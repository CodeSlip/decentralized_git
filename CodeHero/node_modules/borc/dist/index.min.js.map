{"version":3,"sources":["/Users/dignifiedquire/opensource/borc/webpack/universalModuleDefinition","/Users/dignifiedquire/opensource/borc/webpack/bootstrap","/Users/dignifiedquire/opensource/borc/node_modules/node-libs-browser/node_modules/buffer/index.js","/Users/dignifiedquire/opensource/borc/node_modules/bignumber.js/bignumber.js","/Users/dignifiedquire/opensource/borc/src/constants.js","/Users/dignifiedquire/opensource/borc/src/utils.js","/Users/dignifiedquire/opensource/borc/node_modules/webpack/buildin/global.js","/Users/dignifiedquire/opensource/borc/node_modules/ieee754/index.js","/Users/dignifiedquire/opensource/borc/src/decoder.js","/Users/dignifiedquire/opensource/borc/src/simple.js","/Users/dignifiedquire/opensource/borc/src/tagged.js","/Users/dignifiedquire/opensource/borc/node_modules/iso-url/index.js","/Users/dignifiedquire/opensource/borc/node_modules/iso-url/src/url-browser.js","/Users/dignifiedquire/opensource/borc/src/index.js","/Users/dignifiedquire/opensource/borc/src/diagnose.js","/Users/dignifiedquire/opensource/borc/node_modules/base64-js/index.js","/Users/dignifiedquire/opensource/borc/node_modules/isarray/index.js","/Users/dignifiedquire/opensource/borc/src/decoder.asm.js","/Users/dignifiedquire/opensource/borc/node_modules/iso-url/src/relative.js","/Users/dignifiedquire/opensource/borc/src/encoder.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","base64","ieee754","isArray","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","length","RangeError","Uint8Array","__proto__","arg","encodingOrOffset","this","Error","allocUnsafe","from","TypeError","ArrayBuffer","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","len","checked","copy","buffer","val","type","data","fromObject","assertSize","size","toString","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","b","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","__WEBPACK_AMD_DEFINE_RESULT__","_typeof","iterator","constructor","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","z","xc","yc","k","intCheck","isOdd","toExponential","charAt","toFixedPoint","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabet","caseChanged","isNum","test","search","substring","round","DEBUG","toUpperCase","format","rm","id","c0","ne","maxOrMin","args","method","normalise","pop","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","v","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","lt","minimum","gt","random","dp","rand","Uint32Array","splice","sum","plus","toBaseOut","baseIn","baseOut","arrL","reverse","sign","callerIsToString","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","for","Bignumber","require","MT","POS_INT","NEG_INT","BYTE_STRING","UTF8_STRING","ARRAY","MAP","TAG","SIMPLE_FLOAT","DATE_STRING","DATE_EPOCH","POS_BIGINT","NEG_BIGINT","DECIMAL_FRAC","BIGFLOAT","BASE64URL_EXPECTED","BASE64_EXPECTED","BASE16_EXPECTED","CBOR","URI","BASE64URL","BASE64","REGEXP","MIME","NUMBYTES","ZERO","TWO","FOUR","EIGHT","INDEFINITE","SIMPLE","FALSE","TRUE","NULL","UNDEFINED","SYMS","PARENT","BREAK","STREAM","SHIFT32","SHIFT16","MAX_SAFE_HIGH","NEG_ONE","TEN","OBJECT","constants","parseHalf","mant","arrayBufferToBignumber","buildMap","Map","keys","buildInt32","f","g","buildInt64","f1","f2","writeHalf","u32","u","s16","keySorter","lenA","lenB","isNegativeZero","nextPowerOf2","count","Function","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","rt","log","LN2","parser","utils","Simple","Tagged","URL","Decoder","opts","_classCallCheck","_heap","_heap8","_buffer","_reset","_knownTags","assign","0","Date","1","2","3","4","5","32","35","tags","console","pushInt","pushInt32","pushInt32Neg","pushInt64","pushInt64Neg","pushFloat","pushFloatSingle","pushFloatDouble","pushTrue","pushFalse","pushUndefined","pushNull","pushInfinity","pushInfinityNeg","pushNaN","pushNaNNeg","pushArrayStart","pushArrayStartFixed","pushArrayStartFixed32","pushArrayStartFixed64","pushObjectStart","pushObjectStartFixed","pushObjectStartFixed32","pushObjectStartFixed64","pushByteString","pushByteStringStart","pushUtf8String","pushUtf8StringStart","pushSimpleUnassigned","pushTagUnassigned","pushTagStart","pushTagStart4","pushTagStart8","pushBreak","input","enc","decodeFirst","decodeAll","_parents","_push","createTag","ref","createByteString","createUtf8String","values","createMap","createObject","createArray","_currentParent","_dec","_closeParent","hasChildren","_ref","tmpKey","_depth","_res","tagNumber","typ","raw","h","createInt","createInt32","createInt64","createFloat","createFloatSingle","createFloatDouble","createInt32Neg","createInt64Neg","createTrue","createFalse","createNull","createUndefined","createInfinity","createInfinityNeg","createNaN","createNaNNeg","_createParent","_createArrayStartFixed","len1","len2","len3","len4","_createObjectStartFixed","createByteStringFromHeap","createUtf8StringFromHeap","createSimpleUnassigned","tag","parse","_decode","decode","hasParent","gen","_pushInt","err","JSON","stringify","_pushTag","pushAny","converters","er","error","_require","URLWithLegacySupport","URLSearchParams","defaultBase","relative","_defineProperties","props","descriptor","writable","_possibleConstructorReturn","self","ReferenceError","_assertThisInitialized","_getPrototypeOf","setPrototypeOf","getPrototypeOf","_setPrototypeOf","location","protocol","host","_URL","url","_this","instance","Constructor","path","pathname","auth","username","password","query","startsWith","protoProps","staticProps","subClass","superClass","_inherits","port","hostname","hash","Diagnose","Encoder","diagnose","encode","leveldb","_get","fl","map","reduce","collectObject","acc","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","encodeChunk","lookup","num","output","stdlib","foreign","heap","inputLength","jumpTable","readUInt16","readUInt32","INT_P","octet","UINT_P_8","UINT_P_16","UINT_P_32","UINT_P_64","INT_N","UINT_N_8","UINT_N_16","UINT_N_32","UINT_N_64","step","BYTE_STRING_8","BYTE_STRING_16","BYTE_STRING_32","BYTE_STRING_64","BYTE_STRING_BREAK","UTF8_STRING_8","UTF8_STRING_16","UTF8_STRING_32","UTF8_STRING_64","UTF8_STRING_BREAK","ARRAY_8","ARRAY_16","ARRAY_32","ARRAY_64","ARRAY_BREAK","MAP_8","MAP_16","MAP_32","MAP_64","MAP_BREAK","TAG_KNOWN","TAG_BIGNUM_POS","TAG_BIGNUM_NEG","TAG_FRAC","TAG_BIGNUM_FLOAT","TAG_UNASSIGNED","TAG_BASE64_URL","TAG_BASE64","TAG_BASE16","TAG_MORE_1","TAG_MORE_2","TAG_MORE_4","TAG_MORE_8","SIMPLE_UNASSIGNED","SIMPLE_FALSE","SIMPLE_TRUE","SIMPLE_NULL","SIMPLE_UNDEFINED","SIMPLE_BYTE","SIMPLE_FLOAT_HALF","SIMPLE_FLOAT_SINGLE","SIMPLE_FLOAT_DOUBLE","ERROR","urlParsed","protocolMap","defaultProtocol","HALF","FLOAT","DOUBLE","MAXINT_BN","BUF_NAN","BUF_INF_NEG","BUF_INF_POS","options","streaming","stream","onData","semanticTypes","_pushUrl","_pushBigNumber","addTypes","genTypes","addSemanticType","finalize","fun","old","result","resultMethod","resultLength","pushWrite","b2","_pushUInt8","b4","_pushDoubleBE","mt","orig","_pushUInt16BE","_pushUInt32BE","_pushFloat","_pushNaN","_pushInfinity","_pushIntNum","_pushBuffer","source","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","return","_pushBigint","dec","slide","_pushRawMap","encodeCBOR","keyLength","sort","toType","_pushNumber","_pushString","_pushBoolean","_pushObject","_pushArray","_pushUndefined","_pushMap","_pushSet","_pushDate","_pushRegexp","index"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,GAAAH,GACA,iBAAAC,QACAA,QAAA,KAAAD,IAEAD,EAAA,KAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oCClFA,SAAAC,GAUA,IAAAC,EAAanC,EAAQ,IAErBoC,EAAcpC,EAAQ,GAEtBqC,EAAcrC,EAAQ,IAsDtB,SAAAsC,IACA,OAAAC,EAAAC,oBAAA,sBAGA,SAAAC,EAAAC,EAAAC,GACA,GAAAL,IAAAK,EACA,UAAAC,WAAA,8BAgBA,OAbAL,EAAAC,qBAEAE,EAAA,IAAAG,WAAAF,IACAG,UAAAP,EAAAT,WAGA,OAAAY,IACAA,EAAA,IAAAH,EAAAI,IAGAD,EAAAC,UAGAD,EAaA,SAAAH,EAAAQ,EAAAC,EAAAL,GACA,KAAAJ,EAAAC,qBAAAS,gBAAAV,GACA,WAAAA,EAAAQ,EAAAC,EAAAL,GAIA,oBAAAI,EAAA,CACA,oBAAAC,EACA,UAAAE,MAAA,qEAGA,OAAAC,EAAAF,KAAAF,GAGA,OAAAK,EAAAH,KAAAF,EAAAC,EAAAL,GAWA,SAAAS,EAAAV,EAAAvB,EAAA6B,EAAAL,GACA,oBAAAxB,EACA,UAAAkC,UAAA,yCAGA,0BAAAC,aAAAnC,aAAAmC,YAsIA,SAAAZ,EAAAa,EAAAC,EAAAb,GAGA,GAFAY,EAAAE,WAEAD,EAAA,GAAAD,EAAAE,WAAAD,EACA,UAAAZ,WAAA,6BAGA,GAAAW,EAAAE,WAAAD,GAAAb,GAAA,GACA,UAAAC,WAAA,6BAIAW,OADAG,IAAAF,QAAAE,IAAAf,EACA,IAAAE,WAAAU,QACGG,IAAAf,EACH,IAAAE,WAAAU,EAAAC,GAEA,IAAAX,WAAAU,EAAAC,EAAAb,GAGAJ,EAAAC,qBAEAE,EAAAa,GACAT,UAAAP,EAAAT,UAGAY,EAAAiB,EAAAjB,EAAAa,GAGA,OAAAb,EAjKAkB,CAAAlB,EAAAvB,EAAA6B,EAAAL,GAGA,iBAAAxB,EAgGA,SAAAuB,EAAAmB,EAAAC,GACA,iBAAAA,GAAA,KAAAA,IACAA,EAAA,QAGA,IAAAvB,EAAAwB,WAAAD,GACA,UAAAT,UAAA,8CAGA,IAAAV,EAAA,EAAAc,EAAAI,EAAAC,GAEAE,GADAtB,EAAAD,EAAAC,EAAAC,IACAsB,MAAAJ,EAAAC,GAEAE,IAAArB,IAIAD,IAAAwB,MAAA,EAAAF,IAGA,OAAAtB,EAnHAyB,CAAAzB,EAAAvB,EAAA6B,GAgKA,SAAAN,EAAA0B,GACA,GAAA7B,EAAA8B,SAAAD,GAAA,CACA,IAAAE,EAAA,EAAAC,EAAAH,EAAAzB,QAGA,YAFAD,EAAAD,EAAAC,EAAA4B,IAEA3B,OACAD,GAGA0B,EAAAI,KAAA9B,EAAA,IAAA4B,GACA5B,GAGA,GAAA0B,EAAA,CACA,uBAAAd,aAAAc,EAAAK,kBAAAnB,aAAA,WAAAc,EACA,uBAAAA,EAAAzB,SAigDA+B,EAjgDAN,EAAAzB,SAkgDA+B,EAjgDAjC,EAAAC,EAAA,GAGAiB,EAAAjB,EAAA0B,GAGA,cAAAA,EAAAO,MAAAtC,EAAA+B,EAAAQ,MACA,OAAAjB,EAAAjB,EAAA0B,EAAAQ,MAy/CA,IAAAF,EAr/CA,UAAArB,UAAA,sFAxLAwB,CAAAnC,EAAAvB,GA6BA,SAAA2D,EAAAC,GACA,oBAAAA,EACA,UAAA1B,UAAA,oCACG,GAAA0B,EAAA,EACH,UAAAnC,WAAA,wCA8BA,SAAAO,EAAAT,EAAAqC,GAIA,GAHAD,EAAAC,GACArC,EAAAD,EAAAC,EAAAqC,EAAA,MAAAR,EAAAQ,KAEAxC,EAAAC,oBACA,QAAAtC,EAAA,EAAmBA,EAAA6E,IAAU7E,EAC7BwC,EAAAxC,GAAA,EAIA,OAAAwC,EA0CA,SAAAiB,EAAAjB,EAAAa,GACA,IAAAZ,EAAAY,EAAAZ,OAAA,MAAA4B,EAAAhB,EAAAZ,QACAD,EAAAD,EAAAC,EAAAC,GAEA,QAAAzC,EAAA,EAAiBA,EAAAyC,EAAYzC,GAAA,EAC7BwC,EAAAxC,GAAA,IAAAqD,EAAArD,GAGA,OAAAwC,EAgEA,SAAA6B,EAAA5B,GAGA,GAAAA,GAAAL,IACA,UAAAM,WAAA,0DAAAN,IAAA0C,SAAA,cAGA,SAAArC,EA8FA,SAAAc,EAAAI,EAAAC,GACA,GAAAvB,EAAA8B,SAAAR,GACA,OAAAA,EAAAlB,OAGA,uBAAAW,aAAA,mBAAAA,YAAA2B,SAAA3B,YAAA2B,OAAApB,iBAAAP,aACA,OAAAO,EAAAJ,WAGA,iBAAAI,IACAA,EAAA,GAAAA,GAGA,IAAAS,EAAAT,EAAAlB,OACA,OAAA2B,EAAA,SAIA,IAFA,IAAAY,GAAA,IAGA,OAAApB,GACA,YACA,aACA,aACA,OAAAQ,EAEA,WACA,YACA,UAAAZ,EACA,OAAAyB,EAAAtB,GAAAlB,OAEA,WACA,YACA,cACA,eACA,SAAA2B,EAEA,UACA,OAAAA,IAAA,EAEA,aACA,OAAAc,EAAAvB,GAAAlB,OAEA,QACA,GAAAuC,EAAA,OAAAC,EAAAtB,GAAAlB,OAEAmB,GAAA,GAAAA,GAAAuB,cACAH,GAAA,GAgFA,SAAAI,EAAAC,EAAA5D,EAAArB,GACA,IAAAJ,EAAAqF,EAAA5D,GACA4D,EAAA5D,GAAA4D,EAAAjF,GACAiF,EAAAjF,GAAAJ,EAgJA,SAAAsF,EAAAf,EAAAC,EAAAlB,EAAAM,EAAA2B,GAEA,OAAAhB,EAAA9B,OAAA,SAqBA,GAnBA,iBAAAa,GACAM,EAAAN,EACAA,EAAA,GACGA,EAAA,WACHA,EAAA,WACGA,GAAA,aACHA,GAAA,YAGAA,KAEAkC,MAAAlC,KAEAA,EAAAiC,EAAA,EAAAhB,EAAA9B,OAAA,GAIAa,EAAA,IAAAA,EAAAiB,EAAA9B,OAAAa,GAEAA,GAAAiB,EAAA9B,OAAA,CACA,GAAA8C,EAAA,SAAuBjC,EAAAiB,EAAA9B,OAAA,OACpB,GAAAa,EAAA,GACH,IAAAiC,EAA4B,SAA5BjC,EAAA,EASA,GALA,iBAAAkB,IACAA,EAAAnC,EAAAa,KAAAsB,EAAAZ,IAIAvB,EAAA8B,SAAAK,GAEA,WAAAA,EAAA/B,QACA,EAGAgD,EAAAlB,EAAAC,EAAAlB,EAAAM,EAAA2B,GACG,oBAAAf,EAGH,OAFAA,GAAA,IAEAnC,EAAAC,qBAAA,mBAAAK,WAAAf,UAAA8D,QACAH,EACA5C,WAAAf,UAAA8D,QAAAvF,KAAAoE,EAAAC,EAAAlB,GAEAX,WAAAf,UAAA+D,YAAAxF,KAAAoE,EAAAC,EAAAlB,GAIAmC,EAAAlB,EAAA,CAAAC,GAAAlB,EAAAM,EAAA2B,GAGA,UAAApC,UAAA,wCAGA,SAAAsC,EAAAG,EAAApB,EAAAlB,EAAAM,EAAA2B,GACA,IA2BAvF,EA3BA6F,EAAA,EACAC,EAAAF,EAAAnD,OACAsD,EAAAvB,EAAA/B,OAEA,QAAAe,IAAAI,IAGA,UAFAA,EAAAoC,OAAApC,GAAAuB,gBAEA,UAAAvB,GAAA,YAAAA,GAAA,aAAAA,GAAA,CACA,GAAAgC,EAAAnD,OAAA,GAAA+B,EAAA/B,OAAA,EACA,SAGAoD,EAAA,EACAC,GAAA,EACAC,GAAA,EACAzC,GAAA,EAIA,SAAA2C,EAAAC,EAAAlG,GACA,WAAA6F,EACAK,EAAAlG,GAEAkG,EAAAC,aAAAnG,EAAA6F,GAMA,GAAAN,EAAA,CACA,IAAAa,GAAA,EAEA,IAAApG,EAAAsD,EAAwBtD,EAAA8F,EAAe9F,IACvC,GAAAiG,EAAAL,EAAA5F,KAAAiG,EAAAzB,GAAA,IAAA4B,EAAA,EAAApG,EAAAoG,IAEA,IADA,IAAAA,MAAApG,GACAA,EAAAoG,EAAA,IAAAL,EAAA,OAAAK,EAAAP,OAEA,IAAAO,IAAApG,KAAAoG,GACAA,GAAA,OAMA,IAFA9C,EAAAyC,EAAAD,IAAAxC,EAAAwC,EAAAC,GAEA/F,EAAAsD,EAAwBtD,GAAA,EAAQA,IAAA,CAGhC,IAFA,IAAAqG,GAAA,EAEAC,EAAA,EAAqBA,EAAAP,EAAeO,IACpC,GAAAL,EAAAL,EAAA5F,EAAAsG,KAAAL,EAAAzB,EAAA8B,GAAA,CACAD,GAAA,EACA,MAIA,GAAAA,EAAA,OAAArG,EAIA,SAeA,SAAAuG,EAAAL,EAAAvC,EAAA6C,EAAA/D,GACA+D,EAAAC,OAAAD,IAAA,EACA,IAAAE,EAAAR,EAAAzD,OAAA+D,EAEA/D,GAGAA,EAAAgE,OAAAhE,IAEAiE,IACAjE,EAAAiE,GALAjE,EAAAiE,EAUA,IAAAC,EAAAhD,EAAAlB,OACA,GAAAkE,EAAA,eAAAxD,UAAA,sBAEAV,EAAAkE,EAAA,IACAlE,EAAAkE,EAAA,GAGA,QAAA3G,EAAA,EAAiBA,EAAAyC,IAAYzC,EAAA,CAC7B,IAAA4G,EAAAC,SAAAlD,EAAAmD,OAAA,EAAA9G,EAAA,OACA,GAAAwF,MAAAoB,GAAA,OAAA5G,EACAkG,EAAAM,EAAAxG,GAAA4G,EAGA,OAAA5G,EAGA,SAAA+G,EAAAb,EAAAvC,EAAA6C,EAAA/D,GACA,OAAAuE,EAAA/B,EAAAtB,EAAAuC,EAAAzD,OAAA+D,GAAAN,EAAAM,EAAA/D,GAGA,SAAAwE,EAAAf,EAAAvC,EAAA6C,EAAA/D,GACA,OAAAuE,EA26BA,SAAAE,GAGA,IAFA,IAAAC,EAAA,GAEAnH,EAAA,EAAiBA,EAAAkH,EAAAzE,SAAgBzC,EAEjCmH,EAAAC,KAAA,IAAAF,EAAAG,WAAArH,IAGA,OAAAmH,EAn7BAG,CAAA3D,GAAAuC,EAAAM,EAAA/D,GAGA,SAAA8E,EAAArB,EAAAvC,EAAA6C,EAAA/D,GACA,OAAAwE,EAAAf,EAAAvC,EAAA6C,EAAA/D,GAGA,SAAA+E,EAAAtB,EAAAvC,EAAA6C,EAAA/D,GACA,OAAAuE,EAAA9B,EAAAvB,GAAAuC,EAAAM,EAAA/D,GAGA,SAAAgF,EAAAvB,EAAAvC,EAAA6C,EAAA/D,GACA,OAAAuE,EA06BA,SAAAE,EAAAQ,GAIA,IAHA,IAAArH,EAAAsH,EAAAC,EACAT,EAAA,GAEAnH,EAAA,EAAiBA,EAAAkH,EAAAzE,WACjBiF,GAAA,QADiC1H,EAEjCK,EAAA6G,EAAAG,WAAArH,GACA2H,EAAAtH,GAAA,EACAuH,EAAAvH,EAAA,IACA8G,EAAAC,KAAAQ,GACAT,EAAAC,KAAAO,GAGA,OAAAR,EAv7BAU,CAAAlE,EAAAuC,EAAAzD,OAAA+D,GAAAN,EAAAM,EAAA/D,GA+EA,SAAAqF,EAAA5B,EAAA6B,EAAAC,GACA,WAAAD,GAAAC,IAAA9B,EAAAzD,OACAR,EAAAgG,cAAA/B,GAEAjE,EAAAgG,cAAA/B,EAAAlC,MAAA+D,EAAAC,IAIA,SAAAE,EAAAhC,EAAA6B,EAAAC,GACAA,EAAAG,KAAAC,IAAAlC,EAAAzD,OAAAuF,GAIA,IAHA,IAAAK,EAAA,GACArI,EAAA+H,EAEA/H,EAAAgI,GAAA,CACA,IAKAM,EAAAC,EAAAC,EAAAC,EALAC,EAAAxC,EAAAlG,GACA2I,EAAA,KACAC,EAAAF,EAAA,MAAAA,EAAA,MAAAA,EAAA,QAEA,GAAA1I,EAAA4I,GAAAZ,EAGA,OAAAY,GACA,OACAF,EAAA,MACAC,EAAAD,GAGA,MAEA,OAGA,WAFAJ,EAAApC,EAAAlG,EAAA,OAGAyI,GAAA,GAAAC,IAAA,KAAAJ,GAEA,MACAK,EAAAF,GAIA,MAEA,OACAH,EAAApC,EAAAlG,EAAA,GACAuI,EAAArC,EAAAlG,EAAA,GAEA,UAAAsI,IAAA,UAAAC,KACAE,GAAA,GAAAC,IAAA,OAAAJ,IAAA,KAAAC,GAEA,OAAAE,EAAA,OAAAA,EAAA,SACAE,EAAAF,GAIA,MAEA,OACAH,EAAApC,EAAAlG,EAAA,GACAuI,EAAArC,EAAAlG,EAAA,GACAwI,EAAAtC,EAAAlG,EAAA,GAEA,UAAAsI,IAAA,UAAAC,IAAA,UAAAC,KACAC,GAAA,GAAAC,IAAA,OAAAJ,IAAA,OAAAC,IAAA,KAAAC,GAEA,OAAAC,EAAA,UACAE,EAAAF,GAOA,OAAAE,GAGAA,EAAA,MACAC,EAAA,GACKD,EAAA,QAELA,GAAA,MACAN,EAAAjB,KAAAuB,IAAA,eACAA,EAAA,WAAAA,GAGAN,EAAAjB,KAAAuB,GACA3I,GAAA4I,EAGA,OAQA,SAAAC,GACA,IAAAzE,EAAAyE,EAAApG,OAEA,GAAA2B,GAAA0E,EACA,OAAA9C,OAAA+C,aAAAC,MAAAhD,OAAA6C,GAIA,IAAAR,EAAA,GACArI,EAAA,EAEA,KAAAA,EAAAoE,GACAiE,GAAArC,OAAA+C,aAAAC,MAAAhD,OAAA6C,EAAA7E,MAAAhE,KAAA8I,IAGA,OAAAT,EAvBAY,CAAAZ,GA1gCA7I,EAAA6C,SACA7C,EAAA0J,WAiUA,SAAAzG,IACAA,OAEAA,EAAA,GAGA,OAAAJ,EAAA8G,OAAA1G,IAtUAjD,EAAA4J,kBAAA,GA0BA/G,EAAAC,yBAAAkB,IAAAxB,EAAAM,oBAAAN,EAAAM,oBAOA,WACA,IACA,IAAAsD,EAAA,IAAAjD,WAAA,GAOA,OANAiD,EAAAhD,UAAA,CACAA,UAAAD,WAAAf,UACAyH,IAAA,WACA,YAGA,KAAAzD,EAAAyD,OACA,mBAAAzD,EAAA0D,UACA,IAAA1D,EAAA0D,SAAA,KAAA/F,WACG,MAAAgG,GACH,UApBAC,GAKAhK,EAAA4C,eAuEAC,EAAAoH,SAAA,KAGApH,EAAAqH,SAAA,SAAA9D,GAEA,OADAA,EAAAhD,UAAAP,EAAAT,UACAgE,GA4BAvD,EAAAa,KAAA,SAAAjC,EAAA6B,EAAAL,GACA,OAAAS,EAAA,KAAAjC,EAAA6B,EAAAL,IAGAJ,EAAAC,sBACAD,EAAAT,UAAAgB,UAAAD,WAAAf,UACAS,EAAAO,UAAAD,WAEA,oBAAA5B,eAAA4I,SAAAtH,EAAAtB,OAAA4I,WAAAtH,GAEA3B,OAAAC,eAAA0B,EAAAtB,OAAA4I,QAAA,CACA1I,MAAA,KACA2I,cAAA,KAmCAvH,EAAA8G,MAAA,SAAAtE,EAAAgF,EAAAjG,GACA,OAvBA,SAAApB,EAAAqC,EAAAgF,EAAAjG,GAGA,OAFAgB,EAAAC,GAEAA,GAAA,EACAtC,EAAAC,EAAAqC,QAGArB,IAAAqG,EAIA,iBAAAjG,EAAArB,EAAAC,EAAAqC,GAAAgF,OAAAjG,GAAArB,EAAAC,EAAAqC,GAAAgF,QAGAtH,EAAAC,EAAAqC,GASAsE,CAAA,KAAAtE,EAAAgF,EAAAjG,IAoBAvB,EAAAY,YAAA,SAAA4B,GACA,OAAA5B,EAAA,KAAA4B,IAOAxC,EAAAyH,gBAAA,SAAAjF,GACA,OAAA5B,EAAA,KAAA4B,IAqHAxC,EAAA8B,SAAA,SAAAkB,GACA,cAAAA,MAAA0E,YAGA1H,EAAA2H,QAAA,SAAAC,EAAA5E,GACA,IAAAhD,EAAA8B,SAAA8F,KAAA5H,EAAA8B,SAAAkB,GACA,UAAAlC,UAAA,6BAGA,GAAA8G,IAAA5E,EAAA,SAIA,IAHA,IAAA6E,EAAAD,EAAAxH,OACA0H,EAAA9E,EAAA5C,OAEAzC,EAAA,EAAAoE,EAAA+D,KAAAC,IAAA8B,EAAAC,GAAuCnK,EAAAoE,IAASpE,EAChD,GAAAiK,EAAAjK,KAAAqF,EAAArF,GAAA,CACAkK,EAAAD,EAAAjK,GACAmK,EAAA9E,EAAArF,GACA,MAIA,OAAAkK,EAAAC,GAAA,EACAA,EAAAD,EAAA,EACA,GAGA7H,EAAAwB,WAAA,SAAAD,GACA,OAAAoC,OAAApC,GAAAuB,eACA,UACA,WACA,YACA,YACA,aACA,aACA,aACA,WACA,YACA,cACA,eACA,SAEA,QACA,WAIA9C,EAAA+H,OAAA,SAAAC,EAAA5H,GACA,IAAAN,EAAAkI,GACA,UAAAlH,UAAA,+CAGA,OAAAkH,EAAA5H,OACA,OAAAJ,EAAA8G,MAAA,GAGA,IAAAnJ,EAEA,QAAAwD,IAAAf,EAGA,IAFAA,EAAA,EAEAzC,EAAA,EAAeA,EAAAqK,EAAA5H,SAAiBzC,EAChCyC,GAAA4H,EAAArK,GAAAyC,OAIA,IAAA8B,EAAAlC,EAAAY,YAAAR,GACA6H,EAAA,EAEA,IAAAtK,EAAA,EAAaA,EAAAqK,EAAA5H,SAAiBzC,EAAA,CAC9B,IAAAkG,EAAAmE,EAAArK,GAEA,IAAAqC,EAAA8B,SAAA+B,GACA,UAAA/C,UAAA,+CAGA+C,EAAA5B,KAAAC,EAAA+F,GACAA,GAAApE,EAAAzD,OAGA,OAAA8B,GAsDAlC,EAAAkB,aAyEAlB,EAAAT,UAAAmI,WAAA,EAQA1H,EAAAT,UAAA2I,OAAA,WACA,IAAAnG,EAAArB,KAAAN,OAEA,GAAA2B,EAAA,KACA,UAAA1B,WAAA,6CAGA,QAAA1C,EAAA,EAAiBA,EAAAoE,EAASpE,GAAA,EAC1BoF,EAAArC,KAAA/C,IAAA,GAGA,OAAA+C,MAGAV,EAAAT,UAAA4I,OAAA,WACA,IAAApG,EAAArB,KAAAN,OAEA,GAAA2B,EAAA,KACA,UAAA1B,WAAA,6CAGA,QAAA1C,EAAA,EAAiBA,EAAAoE,EAASpE,GAAA,EAC1BoF,EAAArC,KAAA/C,IAAA,GACAoF,EAAArC,KAAA/C,EAAA,EAAAA,EAAA,GAGA,OAAA+C,MAGAV,EAAAT,UAAA6I,OAAA,WACA,IAAArG,EAAArB,KAAAN,OAEA,GAAA2B,EAAA,KACA,UAAA1B,WAAA,6CAGA,QAAA1C,EAAA,EAAiBA,EAAAoE,EAASpE,GAAA,EAC1BoF,EAAArC,KAAA/C,IAAA,GACAoF,EAAArC,KAAA/C,EAAA,EAAAA,EAAA,GACAoF,EAAArC,KAAA/C,EAAA,EAAAA,EAAA,GACAoF,EAAArC,KAAA/C,EAAA,EAAAA,EAAA,GAGA,OAAA+C,MAGAV,EAAAT,UAAAkD,SAAA,WACA,IAAArC,EAAA,EAAAM,KAAAN,OACA,WAAAA,EAAA,GACA,IAAAiI,UAAAjI,OAAAyF,EAAAnF,KAAA,EAAAN,GAhIA,SAAAmB,EAAAmE,EAAAC,GACA,IAAAhD,GAAA,EAaA,SANAxB,IAAAuE,KAAA,KACAA,EAAA,GAKAA,EAAAhF,KAAAN,OACA,SAOA,SAJAe,IAAAwE,KAAAjF,KAAAN,UACAuF,EAAAjF,KAAAN,QAGAuF,GAAA,EACA,SAOA,IAHAA,KAAA,KACAD,KAAA,GAGA,SAKA,IAFAnE,MAAA,UAGA,OAAAA,GACA,UACA,OAAA+G,EAAA5H,KAAAgF,EAAAC,GAEA,WACA,YACA,OAAAE,EAAAnF,KAAAgF,EAAAC,GAEA,YACA,OAAA4C,EAAA7H,KAAAgF,EAAAC,GAEA,aACA,aACA,OAAA6C,EAAA9H,KAAAgF,EAAAC,GAEA,aACA,OAAAF,EAAA/E,KAAAgF,EAAAC,GAEA,WACA,YACA,cACA,eACA,OAAA8C,EAAA/H,KAAAgF,EAAAC,GAEA,QACA,GAAAhD,EAAA,UAAA7B,UAAA,qBAAAS,GACAA,KAAA,IAAAuB,cACAH,GAAA,IAiEAgE,MAAAjG,KAAA2H,YAGArI,EAAAT,UAAAmJ,OAAA,SAAA1F,GACA,IAAAhD,EAAA8B,SAAAkB,GAAA,UAAAlC,UAAA,6BACA,OAAAJ,OAAAsC,GACA,IAAAhD,EAAA2H,QAAAjH,KAAAsC,IAGAhD,EAAAT,UAAAoJ,QAAA,WACA,IAAA9D,EAAA,GACA+D,EAAAzL,EAAA4J,kBAOA,OALArG,KAAAN,OAAA,IACAyE,EAAAnE,KAAA+B,SAAA,QAAAmG,GAAAC,MAAA,SAAkDC,KAAA,KAClDpI,KAAAN,OAAAwI,IAAA/D,GAAA,UAGA,WAAAA,EAAA,KAGA7E,EAAAT,UAAAoI,QAAA,SAAAoB,EAAArD,EAAAC,EAAAqD,EAAAC,GACA,IAAAjJ,EAAA8B,SAAAiH,GACA,UAAAjI,UAAA,6BAmBA,QAhBAK,IAAAuE,IACAA,EAAA,QAGAvE,IAAAwE,IACAA,EAAAoD,IAAA3I,OAAA,QAGAe,IAAA6H,IACAA,EAAA,QAGA7H,IAAA8H,IACAA,EAAAvI,KAAAN,QAGAsF,EAAA,GAAAC,EAAAoD,EAAA3I,QAAA4I,EAAA,GAAAC,EAAAvI,KAAAN,OACA,UAAAC,WAAA,sBAGA,GAAA2I,GAAAC,GAAAvD,GAAAC,EACA,SAGA,GAAAqD,GAAAC,EACA,SAGA,GAAAvD,GAAAC,EACA,SAOA,GAAAjF,OAAAqI,EAAA,SAOA,IANA,IAAAlB,GAFAoB,KAAA,IADAD,KAAA,GAIAlB,GALAnC,KAAA,IADAD,KAAA,GAOA3D,EAAA+D,KAAAC,IAAA8B,EAAAC,GACAoB,EAAAxI,KAAAiB,MAAAqH,EAAAC,GACAE,EAAAJ,EAAApH,MAAA+D,EAAAC,GAEAhI,EAAA,EAAiBA,EAAAoE,IAASpE,EAC1B,GAAAuL,EAAAvL,KAAAwL,EAAAxL,GAAA,CACAkK,EAAAqB,EAAAvL,GACAmK,EAAAqB,EAAAxL,GACA,MAIA,OAAAkK,EAAAC,GAAA,EACAA,EAAAD,EAAA,EACA,GAqIA7H,EAAAT,UAAA6J,SAAA,SAAAjH,EAAAlB,EAAAM,GACA,WAAAb,KAAA2C,QAAAlB,EAAAlB,EAAAM,IAGAvB,EAAAT,UAAA8D,QAAA,SAAAlB,EAAAlB,EAAAM,GACA,OAAA0B,EAAAvC,KAAAyB,EAAAlB,EAAAM,GAAA,IAGAvB,EAAAT,UAAA+D,YAAA,SAAAnB,EAAAlB,EAAAM,GACA,OAAA0B,EAAAvC,KAAAyB,EAAAlB,EAAAM,GAAA,IAsDAvB,EAAAT,UAAAmC,MAAA,SAAAJ,EAAA6C,EAAA/D,EAAAmB,GAEA,QAAAJ,IAAAgD,EACA5C,EAAA,OACAnB,EAAAM,KAAAN,OACA+D,EAAA,OACG,QAAAhD,IAAAf,GAAA,iBAAA+D,EACH5C,EAAA4C,EACA/D,EAAAM,KAAAN,OACA+D,EAAA,MACG,KAAAkF,SAAAlF,GAYH,UAAAxD,MAAA,2EAXAwD,GAAA,EAEAkF,SAAAjJ,IACAA,GAAA,OACAe,IAAAI,MAAA,UAEAA,EAAAnB,EACAA,OAAAe,GAOA,IAAAkD,EAAA3D,KAAAN,OAAA+D,EAGA,SAFAhD,IAAAf,KAAAiE,KAAAjE,EAAAiE,GAEA/C,EAAAlB,OAAA,IAAAA,EAAA,GAAA+D,EAAA,IAAAA,EAAAzD,KAAAN,OACA,UAAAC,WAAA,0CAGAkB,MAAA,QAGA,IAFA,IAAAoB,GAAA,IAGA,OAAApB,GACA,UACA,OAAA2C,EAAAxD,KAAAY,EAAA6C,EAAA/D,GAEA,WACA,YACA,OAAAsE,EAAAhE,KAAAY,EAAA6C,EAAA/D,GAEA,YACA,OAAAwE,EAAAlE,KAAAY,EAAA6C,EAAA/D,GAEA,aACA,aACA,OAAA8E,EAAAxE,KAAAY,EAAA6C,EAAA/D,GAEA,aAEA,OAAA+E,EAAAzE,KAAAY,EAAA6C,EAAA/D,GAEA,WACA,YACA,cACA,eACA,OAAAgF,EAAA1E,KAAAY,EAAA6C,EAAA/D,GAEA,QACA,GAAAuC,EAAA,UAAA7B,UAAA,qBAAAS,GACAA,GAAA,GAAAA,GAAAuB,cACAH,GAAA,IAKA3C,EAAAT,UAAA+J,OAAA,WACA,OACAlH,KAAA,SACAC,KAAAkH,MAAAhK,UAAAoC,MAAA7D,KAAA4C,KAAA8I,MAAA9I,KAAA,KAkGA,IAAA+F,EAAA,KAoBA,SAAA8B,EAAA1E,EAAA6B,EAAAC,GACA,IAAA8D,EAAA,GACA9D,EAAAG,KAAAC,IAAAlC,EAAAzD,OAAAuF,GAEA,QAAAhI,EAAA+H,EAAqB/H,EAAAgI,IAAShI,EAC9B8L,GAAA9F,OAAA+C,aAAA,IAAA7C,EAAAlG,IAGA,OAAA8L,EAGA,SAAAjB,EAAA3E,EAAA6B,EAAAC,GACA,IAAA8D,EAAA,GACA9D,EAAAG,KAAAC,IAAAlC,EAAAzD,OAAAuF,GAEA,QAAAhI,EAAA+H,EAAqB/H,EAAAgI,IAAShI,EAC9B8L,GAAA9F,OAAA+C,aAAA7C,EAAAlG,IAGA,OAAA8L,EAGA,SAAAnB,EAAAzE,EAAA6B,EAAAC,GACA,IAAA5D,EAAA8B,EAAAzD,SACAsF,KAAA,KAAAA,EAAA,KACAC,KAAA,GAAAA,EAAA5D,KAAA4D,EAAA5D,GAGA,IAFA,IAAA2H,EAAA,GAEA/L,EAAA+H,EAAqB/H,EAAAgI,IAAShI,EAC9B+L,GAAAC,EAAA9F,EAAAlG,IAGA,OAAA+L,EAGA,SAAAjB,EAAA5E,EAAA6B,EAAAC,GAIA,IAHA,IAAAiE,EAAA/F,EAAAlC,MAAA+D,EAAAC,GACAK,EAAA,GAEArI,EAAA,EAAiBA,EAAAiM,EAAAxJ,OAAkBzC,GAAA,EACnCqI,GAAArC,OAAA+C,aAAAkD,EAAAjM,GAAA,IAAAiM,EAAAjM,EAAA,IAGA,OAAAqI,EA4CA,SAAA6D,EAAA1F,EAAA2F,EAAA1J,GACA,GAAA+D,EAAA,MAAAA,EAAA,YAAA9D,WAAA,sBACA,GAAA8D,EAAA2F,EAAA1J,EAAA,UAAAC,WAAA,yCA+IA,SAAA0J,EAAAlG,EAAAjF,EAAAuF,EAAA2F,EAAAlB,EAAA7C,GACA,IAAA/F,EAAA8B,SAAA+B,GAAA,UAAA/C,UAAA,+CACA,GAAAlC,EAAAgK,GAAAhK,EAAAmH,EAAA,UAAA1F,WAAA,qCACA,GAAA8D,EAAA2F,EAAAjG,EAAAzD,OAAA,UAAAC,WAAA,sBAsDA,SAAA2J,EAAAnG,EAAAjF,EAAAuF,EAAA8F,GACArL,EAAA,IAAAA,EAAA,MAAAA,EAAA,GAEA,QAAAjB,EAAA,EAAAsG,EAAA6B,KAAAC,IAAAlC,EAAAzD,OAAA+D,EAAA,GAAuDxG,EAAAsG,IAAOtG,EAC9DkG,EAAAM,EAAAxG,IAAAiB,EAAA,QAAAqL,EAAAtM,EAAA,EAAAA,MAAA,GAAAsM,EAAAtM,EAAA,EAAAA,GAkCA,SAAAuM,EAAArG,EAAAjF,EAAAuF,EAAA8F,GACArL,EAAA,IAAAA,EAAA,WAAAA,EAAA,GAEA,QAAAjB,EAAA,EAAAsG,EAAA6B,KAAAC,IAAAlC,EAAAzD,OAAA+D,EAAA,GAAuDxG,EAAAsG,IAAOtG,EAC9DkG,EAAAM,EAAAxG,GAAAiB,IAAA,GAAAqL,EAAAtM,EAAA,EAAAA,GAAA,IAmKA,SAAAwM,EAAAtG,EAAAjF,EAAAuF,EAAA2F,EAAAlB,EAAA7C,GACA,GAAA5B,EAAA2F,EAAAjG,EAAAzD,OAAA,UAAAC,WAAA,sBACA,GAAA8D,EAAA,YAAA9D,WAAA,sBAGA,SAAA+J,EAAAvG,EAAAjF,EAAAuF,EAAA8F,EAAAI,GAMA,OALAA,GACAF,EAAAtG,EAAAjF,EAAAuF,EAAA,GAGAtE,EAAA6B,MAAAmC,EAAAjF,EAAAuF,EAAA8F,EAAA,MACA9F,EAAA,EAWA,SAAAmG,EAAAzG,EAAAjF,EAAAuF,EAAA8F,EAAAI,GAMA,OALAA,GACAF,EAAAtG,EAAAjF,EAAAuF,EAAA,GAGAtE,EAAA6B,MAAAmC,EAAAjF,EAAAuF,EAAA8F,EAAA,MACA9F,EAAA,EA5dAnE,EAAAT,UAAAoC,MAAA,SAAA+D,EAAAC,GACA,IAmBA4E,EAnBAxI,EAAArB,KAAAN,OAqBA,IApBAsF,OAGA,GACAA,GAAA3D,GACA,IAAA2D,EAAA,GACGA,EAAA3D,IACH2D,EAAA3D,IANA4D,OAAAxE,IAAAwE,EAAA5D,IAAA4D,GASA,GACAA,GAAA5D,GACA,IAAA4D,EAAA,GACGA,EAAA5D,IACH4D,EAAA5D,GAGA4D,EAAAD,IAAAC,EAAAD,GAGA1F,EAAAC,qBACAsK,EAAA7J,KAAAuG,SAAAvB,EAAAC,IACApF,UAAAP,EAAAT,cACG,CACH,IAAAiL,EAAA7E,EAAAD,EACA6E,EAAA,IAAAvK,EAAAwK,OAAArJ,GAEA,QAAAxD,EAAA,EAAmBA,EAAA6M,IAAc7M,EACjC4M,EAAA5M,GAAA+C,KAAA/C,EAAA+H,GAIA,OAAA6E,GAYAvK,EAAAT,UAAAkL,WAAA,SAAAtG,EAAAjD,EAAAmJ,GACAlG,GAAA,EACAjD,GAAA,EACAmJ,GAAAR,EAAA1F,EAAAjD,EAAAR,KAAAN,QAKA,IAJA,IAAA+B,EAAAzB,KAAAyD,GACAuG,EAAA,EACA/M,EAAA,IAEAA,EAAAuD,IAAAwJ,GAAA,MACAvI,GAAAzB,KAAAyD,EAAAxG,GAAA+M,EAGA,OAAAvI,GAGAnC,EAAAT,UAAAoL,WAAA,SAAAxG,EAAAjD,EAAAmJ,GACAlG,GAAA,EACAjD,GAAA,EAEAmJ,GACAR,EAAA1F,EAAAjD,EAAAR,KAAAN,QAMA,IAHA,IAAA+B,EAAAzB,KAAAyD,IAAAjD,GACAwJ,EAAA,EAEAxJ,EAAA,IAAAwJ,GAAA,MACAvI,GAAAzB,KAAAyD,IAAAjD,GAAAwJ,EAGA,OAAAvI,GAGAnC,EAAAT,UAAAqL,UAAA,SAAAzG,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACAM,KAAAyD,IAGAnE,EAAAT,UAAAsL,aAAA,SAAA1G,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACAM,KAAAyD,GAAAzD,KAAAyD,EAAA,OAGAnE,EAAAT,UAAAuE,aAAA,SAAAK,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACAM,KAAAyD,IAAA,EAAAzD,KAAAyD,EAAA,IAGAnE,EAAAT,UAAAuL,aAAA,SAAA3G,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,SACAM,KAAAyD,GAAAzD,KAAAyD,EAAA,MAAAzD,KAAAyD,EAAA,iBAAAzD,KAAAyD,EAAA,IAGAnE,EAAAT,UAAAwL,aAAA,SAAA5G,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACA,SAAAM,KAAAyD,IAAAzD,KAAAyD,EAAA,OAAAzD,KAAAyD,EAAA,MAAAzD,KAAAyD,EAAA,KAGAnE,EAAAT,UAAAyL,UAAA,SAAA7G,EAAAjD,EAAAmJ,GACAlG,GAAA,EACAjD,GAAA,EACAmJ,GAAAR,EAAA1F,EAAAjD,EAAAR,KAAAN,QAKA,IAJA,IAAA+B,EAAAzB,KAAAyD,GACAuG,EAAA,EACA/M,EAAA,IAEAA,EAAAuD,IAAAwJ,GAAA,MACAvI,GAAAzB,KAAAyD,EAAAxG,GAAA+M,EAKA,OADAvI,IADAuI,GAAA,OACAvI,GAAA2D,KAAAmF,IAAA,IAAA/J,IACAiB,GAGAnC,EAAAT,UAAA2L,UAAA,SAAA/G,EAAAjD,EAAAmJ,GACAlG,GAAA,EACAjD,GAAA,EACAmJ,GAAAR,EAAA1F,EAAAjD,EAAAR,KAAAN,QAKA,IAJA,IAAAzC,EAAAuD,EACAwJ,EAAA,EACAvI,EAAAzB,KAAAyD,IAAAxG,GAEAA,EAAA,IAAA+M,GAAA,MACAvI,GAAAzB,KAAAyD,IAAAxG,GAAA+M,EAKA,OADAvI,IADAuI,GAAA,OACAvI,GAAA2D,KAAAmF,IAAA,IAAA/J,IACAiB,GAGAnC,EAAAT,UAAA4L,SAAA,SAAAhH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACA,IAAAM,KAAAyD,IACA,OAAAzD,KAAAyD,GAAA,GADAzD,KAAAyD,IAIAnE,EAAAT,UAAA6L,YAAA,SAAAjH,EAAAkG,GACAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACA,IAAA+B,EAAAzB,KAAAyD,GAAAzD,KAAAyD,EAAA,MACA,aAAAhC,EAAA,WAAAA,KAGAnC,EAAAT,UAAA8L,YAAA,SAAAlH,EAAAkG,GACAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACA,IAAA+B,EAAAzB,KAAAyD,EAAA,GAAAzD,KAAAyD,IAAA,EACA,aAAAhC,EAAA,WAAAA,KAGAnC,EAAAT,UAAA+L,YAAA,SAAAnH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACAM,KAAAyD,GAAAzD,KAAAyD,EAAA,MAAAzD,KAAAyD,EAAA,OAAAzD,KAAAyD,EAAA,QAGAnE,EAAAT,UAAAgM,YAAA,SAAApH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACAM,KAAAyD,IAAA,GAAAzD,KAAAyD,EAAA,OAAAzD,KAAAyD,EAAA,MAAAzD,KAAAyD,EAAA,IAGAnE,EAAAT,UAAAiM,YAAA,SAAArH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACAP,EAAA+D,KAAAlD,KAAAyD,GAAA,SAGAnE,EAAAT,UAAAkM,YAAA,SAAAtH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACAP,EAAA+D,KAAAlD,KAAAyD,GAAA,SAGAnE,EAAAT,UAAAmM,aAAA,SAAAvH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACAP,EAAA+D,KAAAlD,KAAAyD,GAAA,SAGAnE,EAAAT,UAAAoM,aAAA,SAAAxH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAAzD,KAAAN,QACAP,EAAA+D,KAAAlD,KAAAyD,GAAA,SASAnE,EAAAT,UAAAqM,YAAA,SAAAhN,EAAAuF,EAAAjD,EAAAmJ,IACAzL,KACAuF,GAAA,EACAjD,GAAA,EAEAmJ,IAEAN,EAAArJ,KAAA9B,EAAAuF,EAAAjD,EADA4E,KAAAmF,IAAA,IAAA/J,GAAA,EACA,GAGA,IAAAwJ,EAAA,EACA/M,EAAA,EAGA,IAFA+C,KAAAyD,GAAA,IAAAvF,IAEAjB,EAAAuD,IAAAwJ,GAAA,MACAhK,KAAAyD,EAAAxG,GAAAiB,EAAA8L,EAAA,IAGA,OAAAvG,EAAAjD,GAGAlB,EAAAT,UAAAsM,YAAA,SAAAjN,EAAAuF,EAAAjD,EAAAmJ,IACAzL,KACAuF,GAAA,EACAjD,GAAA,EAEAmJ,IAEAN,EAAArJ,KAAA9B,EAAAuF,EAAAjD,EADA4E,KAAAmF,IAAA,IAAA/J,GAAA,EACA,GAGA,IAAAvD,EAAAuD,EAAA,EACAwJ,EAAA,EAGA,IAFAhK,KAAAyD,EAAAxG,GAAA,IAAAiB,IAEAjB,GAAA,IAAA+M,GAAA,MACAhK,KAAAyD,EAAAxG,GAAAiB,EAAA8L,EAAA,IAGA,OAAAvG,EAAAjD,GAGAlB,EAAAT,UAAAuM,WAAA,SAAAlN,EAAAuF,EAAAkG,GAMA,OALAzL,KACAuF,GAAA,EACAkG,GAAAN,EAAArJ,KAAA9B,EAAAuF,EAAA,SACAnE,EAAAC,sBAAArB,EAAAkH,KAAAiG,MAAAnN,IACA8B,KAAAyD,GAAA,IAAAvF,EACAuF,EAAA,GAWAnE,EAAAT,UAAAyM,cAAA,SAAApN,EAAAuF,EAAAkG,GAYA,OAXAzL,KACAuF,GAAA,EACAkG,GAAAN,EAAArJ,KAAA9B,EAAAuF,EAAA,WAEAnE,EAAAC,qBACAS,KAAAyD,GAAA,IAAAvF,EACA8B,KAAAyD,EAAA,GAAAvF,IAAA,GAEAoL,EAAAtJ,KAAA9B,EAAAuF,GAAA,GAGAA,EAAA,GAGAnE,EAAAT,UAAA0M,cAAA,SAAArN,EAAAuF,EAAAkG,GAYA,OAXAzL,KACAuF,GAAA,EACAkG,GAAAN,EAAArJ,KAAA9B,EAAAuF,EAAA,WAEAnE,EAAAC,qBACAS,KAAAyD,GAAAvF,IAAA,EACA8B,KAAAyD,EAAA,OAAAvF,GAEAoL,EAAAtJ,KAAA9B,EAAAuF,GAAA,GAGAA,EAAA,GAWAnE,EAAAT,UAAA2M,cAAA,SAAAtN,EAAAuF,EAAAkG,GAcA,OAbAzL,KACAuF,GAAA,EACAkG,GAAAN,EAAArJ,KAAA9B,EAAAuF,EAAA,gBAEAnE,EAAAC,qBACAS,KAAAyD,EAAA,GAAAvF,IAAA,GACA8B,KAAAyD,EAAA,GAAAvF,IAAA,GACA8B,KAAAyD,EAAA,GAAAvF,IAAA,EACA8B,KAAAyD,GAAA,IAAAvF,GAEAsL,EAAAxJ,KAAA9B,EAAAuF,GAAA,GAGAA,EAAA,GAGAnE,EAAAT,UAAA4M,cAAA,SAAAvN,EAAAuF,EAAAkG,GAcA,OAbAzL,KACAuF,GAAA,EACAkG,GAAAN,EAAArJ,KAAA9B,EAAAuF,EAAA,gBAEAnE,EAAAC,qBACAS,KAAAyD,GAAAvF,IAAA,GACA8B,KAAAyD,EAAA,GAAAvF,IAAA,GACA8B,KAAAyD,EAAA,GAAAvF,IAAA,EACA8B,KAAAyD,EAAA,OAAAvF,GAEAsL,EAAAxJ,KAAA9B,EAAAuF,GAAA,GAGAA,EAAA,GAGAnE,EAAAT,UAAA6M,WAAA,SAAAxN,EAAAuF,EAAAjD,EAAAmJ,GAIA,GAHAzL,KACAuF,GAAA,GAEAkG,EAAA,CACA,IAAAgC,EAAAvG,KAAAmF,IAAA,IAAA/J,EAAA,GACA6I,EAAArJ,KAAA9B,EAAAuF,EAAAjD,EAAAmL,EAAA,GAAAA,GAGA,IAAA1O,EAAA,EACA+M,EAAA,EACA4B,EAAA,EAGA,IAFA5L,KAAAyD,GAAA,IAAAvF,IAEAjB,EAAAuD,IAAAwJ,GAAA,MACA9L,EAAA,OAAA0N,GAAA,IAAA5L,KAAAyD,EAAAxG,EAAA,KACA2O,EAAA,GAGA5L,KAAAyD,EAAAxG,IAAAiB,EAAA8L,GAAA,GAAA4B,EAAA,IAGA,OAAAnI,EAAAjD,GAGAlB,EAAAT,UAAAgN,WAAA,SAAA3N,EAAAuF,EAAAjD,EAAAmJ,GAIA,GAHAzL,KACAuF,GAAA,GAEAkG,EAAA,CACA,IAAAgC,EAAAvG,KAAAmF,IAAA,IAAA/J,EAAA,GACA6I,EAAArJ,KAAA9B,EAAAuF,EAAAjD,EAAAmL,EAAA,GAAAA,GAGA,IAAA1O,EAAAuD,EAAA,EACAwJ,EAAA,EACA4B,EAAA,EAGA,IAFA5L,KAAAyD,EAAAxG,GAAA,IAAAiB,IAEAjB,GAAA,IAAA+M,GAAA,MACA9L,EAAA,OAAA0N,GAAA,IAAA5L,KAAAyD,EAAAxG,EAAA,KACA2O,EAAA,GAGA5L,KAAAyD,EAAAxG,IAAAiB,EAAA8L,GAAA,GAAA4B,EAAA,IAGA,OAAAnI,EAAAjD,GAGAlB,EAAAT,UAAAiN,UAAA,SAAA5N,EAAAuF,EAAAkG,GAOA,OANAzL,KACAuF,GAAA,EACAkG,GAAAN,EAAArJ,KAAA9B,EAAAuF,EAAA,YACAnE,EAAAC,sBAAArB,EAAAkH,KAAAiG,MAAAnN,IACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,GACA8B,KAAAyD,GAAA,IAAAvF,EACAuF,EAAA,GAGAnE,EAAAT,UAAAkN,aAAA,SAAA7N,EAAAuF,EAAAkG,GAYA,OAXAzL,KACAuF,GAAA,EACAkG,GAAAN,EAAArJ,KAAA9B,EAAAuF,EAAA,gBAEAnE,EAAAC,qBACAS,KAAAyD,GAAA,IAAAvF,EACA8B,KAAAyD,EAAA,GAAAvF,IAAA,GAEAoL,EAAAtJ,KAAA9B,EAAAuF,GAAA,GAGAA,EAAA,GAGAnE,EAAAT,UAAAmN,aAAA,SAAA9N,EAAAuF,EAAAkG,GAYA,OAXAzL,KACAuF,GAAA,EACAkG,GAAAN,EAAArJ,KAAA9B,EAAAuF,EAAA,gBAEAnE,EAAAC,qBACAS,KAAAyD,GAAAvF,IAAA,EACA8B,KAAAyD,EAAA,OAAAvF,GAEAoL,EAAAtJ,KAAA9B,EAAAuF,GAAA,GAGAA,EAAA,GAGAnE,EAAAT,UAAAoN,aAAA,SAAA/N,EAAAuF,EAAAkG,GAcA,OAbAzL,KACAuF,GAAA,EACAkG,GAAAN,EAAArJ,KAAA9B,EAAAuF,EAAA,0BAEAnE,EAAAC,qBACAS,KAAAyD,GAAA,IAAAvF,EACA8B,KAAAyD,EAAA,GAAAvF,IAAA,EACA8B,KAAAyD,EAAA,GAAAvF,IAAA,GACA8B,KAAAyD,EAAA,GAAAvF,IAAA,IAEAsL,EAAAxJ,KAAA9B,EAAAuF,GAAA,GAGAA,EAAA,GAGAnE,EAAAT,UAAAqN,aAAA,SAAAhO,EAAAuF,EAAAkG,GAeA,OAdAzL,KACAuF,GAAA,EACAkG,GAAAN,EAAArJ,KAAA9B,EAAAuF,EAAA,0BACAvF,EAAA,IAAAA,EAAA,WAAAA,EAAA,GAEAoB,EAAAC,qBACAS,KAAAyD,GAAAvF,IAAA,GACA8B,KAAAyD,EAAA,GAAAvF,IAAA,GACA8B,KAAAyD,EAAA,GAAAvF,IAAA,EACA8B,KAAAyD,EAAA,OAAAvF,GAEAsL,EAAAxJ,KAAA9B,EAAAuF,GAAA,GAGAA,EAAA,GAiBAnE,EAAAT,UAAAsN,aAAA,SAAAjO,EAAAuF,EAAAkG,GACA,OAAAD,EAAA1J,KAAA9B,EAAAuF,GAAA,EAAAkG,IAGArK,EAAAT,UAAAuN,aAAA,SAAAlO,EAAAuF,EAAAkG,GACA,OAAAD,EAAA1J,KAAA9B,EAAAuF,GAAA,EAAAkG,IAYArK,EAAAT,UAAAwN,cAAA,SAAAnO,EAAAuF,EAAAkG,GACA,OAAAC,EAAA5J,KAAA9B,EAAAuF,GAAA,EAAAkG,IAGArK,EAAAT,UAAAyN,cAAA,SAAApO,EAAAuF,EAAAkG,GACA,OAAAC,EAAA5J,KAAA9B,EAAAuF,GAAA,EAAAkG,IAIArK,EAAAT,UAAA0C,KAAA,SAAA8G,EAAAkE,EAAAvH,EAAAC,GAOA,GANAD,MAAA,GACAC,GAAA,IAAAA,MAAAjF,KAAAN,QACA6M,GAAAlE,EAAA3I,SAAA6M,EAAAlE,EAAA3I,QACA6M,MAAA,GACAtH,EAAA,GAAAA,EAAAD,IAAAC,EAAAD,GAEAC,IAAAD,EAAA,SACA,OAAAqD,EAAA3I,QAAA,IAAAM,KAAAN,OAAA,SAEA,GAAA6M,EAAA,EACA,UAAA5M,WAAA,6BAGA,GAAAqF,EAAA,GAAAA,GAAAhF,KAAAN,OAAA,UAAAC,WAAA,6BACA,GAAAsF,EAAA,YAAAtF,WAAA,2BAEAsF,EAAAjF,KAAAN,SAAAuF,EAAAjF,KAAAN,QAEA2I,EAAA3I,OAAA6M,EAAAtH,EAAAD,IACAC,EAAAoD,EAAA3I,OAAA6M,EAAAvH,GAGA,IACA/H,EADAoE,EAAA4D,EAAAD,EAGA,GAAAhF,OAAAqI,GAAArD,EAAAuH,KAAAtH,EAEA,IAAAhI,EAAAoE,EAAA,EAAqBpE,GAAA,IAAQA,EAC7BoL,EAAApL,EAAAsP,GAAAvM,KAAA/C,EAAA+H,QAEG,GAAA3D,EAAA,MAAA/B,EAAAC,oBAEH,IAAAtC,EAAA,EAAeA,EAAAoE,IAASpE,EACxBoL,EAAApL,EAAAsP,GAAAvM,KAAA/C,EAAA+H,QAGApF,WAAAf,UAAA2N,IAAApP,KAAAiL,EAAArI,KAAAuG,SAAAvB,IAAA3D,GAAAkL,GAGA,OAAAlL,GAOA/B,EAAAT,UAAAiI,KAAA,SAAArF,EAAAuD,EAAAC,EAAApE,GAEA,oBAAAY,EAAA,CAUA,GATA,iBAAAuD,GACAnE,EAAAmE,EACAA,EAAA,EACAC,EAAAjF,KAAAN,QACK,iBAAAuF,IACLpE,EAAAoE,EACAA,EAAAjF,KAAAN,QAGA,IAAA+B,EAAA/B,OAAA,CACA,IAAA+M,EAAAhL,EAAA6C,WAAA,GAEAmI,EAAA,MACAhL,EAAAgL,GAIA,QAAAhM,IAAAI,GAAA,iBAAAA,EACA,UAAAT,UAAA,6BAGA,oBAAAS,IAAAvB,EAAAwB,WAAAD,GACA,UAAAT,UAAA,qBAAAS,OAEG,iBAAAY,IACHA,GAAA,KAIA,GAAAuD,EAAA,GAAAhF,KAAAN,OAAAsF,GAAAhF,KAAAN,OAAAuF,EACA,UAAAtF,WAAA,sBAGA,GAAAsF,GAAAD,EACA,OAAAhF,KAMA,IAAA/C,EAEA,GALA+H,KAAA,EACAC,OAAAxE,IAAAwE,EAAAjF,KAAAN,OAAAuF,IAAA,EACAxD,MAAA,GAGA,iBAAAA,EACA,IAAAxE,EAAA+H,EAAmB/H,EAAAgI,IAAShI,EAC5B+C,KAAA/C,GAAAwE,MAEG,CACH,IAAAyH,EAAA5J,EAAA8B,SAAAK,KAAAS,EAAA,IAAA5C,EAAAmC,EAAAZ,GAAAkB,YACAV,EAAA6H,EAAAxJ,OAEA,IAAAzC,EAAA,EAAeA,EAAAgI,EAAAD,IAAiB/H,EAChC+C,KAAA/C,EAAA+H,GAAAkE,EAAAjM,EAAAoE,GAIA,OAAArB,MAKA,IAAA0M,EAAA,qBAoBA,SAAAzD,EAAAvK,GACA,OAAAA,EAAA,OAAAA,EAAAqD,SAAA,IACArD,EAAAqD,SAAA,IAGA,SAAAG,EAAAtB,EAAA+D,GAEA,IAAAiB,EADAjB,KAAAgI,IAMA,IAJA,IAAAjN,EAAAkB,EAAAlB,OACAkN,EAAA,KACA1D,EAAA,GAEAjM,EAAA,EAAiBA,EAAAyC,IAAYzC,EAAA,CAG7B,IAFA2I,EAAAhF,EAAA0D,WAAArH,IAEA,OAAA2I,EAAA,OAEA,IAAAgH,EAAA,CAEA,GAAAhH,EAAA,QAEAjB,GAAA,OAAAuE,EAAA7E,KAAA,aACA,SACS,GAAApH,EAAA,IAAAyC,EAAA,EAETiF,GAAA,OAAAuE,EAAA7E,KAAA,aACA,SAIAuI,EAAAhH,EACA,SAIA,GAAAA,EAAA,QACAjB,GAAA,OAAAuE,EAAA7E,KAAA,aACAuI,EAAAhH,EACA,SAIAA,EAAA,OAAAgH,EAAA,UAAAhH,EAAA,YACKgH,IAELjI,GAAA,OAAAuE,EAAA7E,KAAA,aAKA,GAFAuI,EAAA,KAEAhH,EAAA,KACA,IAAAjB,GAAA,WACAuE,EAAA7E,KAAAuB,QACK,GAAAA,EAAA,MACL,IAAAjB,GAAA,WACAuE,EAAA7E,KAAAuB,GAAA,SAAAA,EAAA,UACK,GAAAA,EAAA,OACL,IAAAjB,GAAA,WACAuE,EAAA7E,KAAAuB,GAAA,OAAAA,GAAA,YAAAA,EAAA,SACK,MAAAA,EAAA,SAIL,UAAA3F,MAAA,sBAHA,IAAA0E,GAAA,WACAuE,EAAA7E,KAAAuB,GAAA,OAAAA,GAAA,UAAAA,GAAA,YAAAA,EAAA,MAMA,OAAAsD,EA8BA,SAAA/G,EAAAgC,GACA,OAAAjF,EAAA2N,YApHA,SAAA1I,GAIA,IAFAA,EAWA,SAAAA,GACA,OAAAA,EAAA2I,KAAA3I,EAAA2I,OACA3I,EAAA4I,QAAA,iBAbAC,CAAA7I,GAAA4I,QAAAL,EAAA,KAEAhN,OAAA,WAEA,KAAAyE,EAAAzE,OAAA,MACAyE,GAAA,IAGA,OAAAA,EA0GA8I,CAAA9I,IAGA,SAAAF,EAAAiJ,EAAAC,EAAA1J,EAAA/D,GACA,QAAAzC,EAAA,EAAiBA,EAAAyC,KACjBzC,EAAAwG,GAAA0J,EAAAzN,QAAAzC,GAAAiQ,EAAAxN,UAD6BzC,EAE7BkQ,EAAAlQ,EAAAwG,GAAAyJ,EAAAjQ,GAGA,OAAAA,mDCvzDA,IAAAmQ,EAEA,SAAAC,EAAAlM,GAAwU,OAAtOkM,EAA3E,mBAAArP,QAAA,iBAAAA,OAAAsP,SAA2E,SAAAnM,GAAkC,cAAAA,GAA+B,SAAAA,GAAkC,OAAAA,GAAA,mBAAAnD,QAAAmD,EAAAoM,cAAAvP,QAAAmD,IAAAnD,OAAAa,UAAA,gBAAAsC,IAAmIA,IAIxU,SAAAqM,GAiDA,IAAAC,EACAC,EAAA,6CACAC,EAAAvI,KAAAwI,KACAC,EAAAzI,KAAAiG,MACAyC,EAAA,qBACAC,EAAAD,EAAA,yDACAE,EAAA,KACAC,EAAA,GACAC,EAAA,iBAGAC,EAAA,2DACAC,EAAA,IAIAC,EAAA,IAw9EA,SAAAC,EAAA5P,GACA,IAAAzB,EAAA,EAAAyB,EACA,OAAAA,EAAA,GAAAA,IAAAzB,MAAA,EAIA,SAAAsR,EAAArH,GAOA,IANA,IAAAlI,EACAwP,EACAvR,EAAA,EACAsG,EAAA2D,EAAAxH,OACA3B,EAAAmJ,EAAA,MAEUjK,EAAAsG,GAAO,CAIjB,IAHAvE,EAAAkI,EAAAjK,KAAA,GACAuR,EAAAP,EAAAjP,EAAAU,OAEY8O,IAAKxP,EAAA,IAAAA,GAIjBjB,GAAAiB,EAIA,IAAAuE,EAAAxF,EAAA2B,OAAsB,KAAA3B,EAAAuG,aAAAf,KAItB,OAAAxF,EAAAkD,MAAA,EAAAsC,EAAA,MAIA,SAAA0D,EAAAE,EAAAC,GACA,IAAAF,EACA5E,EACAmM,EAAAtH,EAAA7J,EACAoR,EAAAtH,EAAA9J,EACAL,EAAAkK,EAAAnI,EACAuE,EAAA6D,EAAApI,EACA2P,EAAAxH,EAAAX,EACAtJ,EAAAkK,EAAAZ,EAEA,IAAAvJ,IAAAsG,EAAA,YAIA,GAHA2D,EAAAuH,MAAA,GACAnM,EAAAoM,MAAA,GAEAxH,GAAA5E,EAAA,OAAA4E,EAAA5E,EAAA,GAAAiB,EAAAtG,EAEA,GAAAA,GAAAsG,EAAA,OAAAtG,EAIA,GAHAiK,EAAAjK,EAAA,EACAqF,EAAAqM,GAAAzR,GAEAuR,IAAAC,EAAA,OAAApM,EAAA,GAAAmM,EAAAvH,EAAA,KAEA,IAAA5E,EAAA,OAAAqM,EAAAzR,EAAAgK,EAAA,KAGA,IAFA3D,GAAAoL,EAAAF,EAAA/O,SAAAxC,EAAAwR,EAAAhP,QAAAiP,EAAAzR,EAEAD,EAAA,EAAeA,EAAAsG,EAAOtG,IACtB,GAAAwR,EAAAxR,IAAAyR,EAAAzR,GAAA,OAAAwR,EAAAxR,GAAAyR,EAAAzR,GAAAiK,EAAA,KAIA,OAAAyH,GAAAzR,EAAA,EAAAyR,EAAAzR,EAAAgK,EAAA,KAOA,SAAA0H,EAAAlQ,EAAA2G,EAAA6C,EAAA1K,GACA,GAAAkB,EAAA2G,GAAA3G,EAAAwJ,GAAAxJ,OAAA,EAAAiP,EAAAjP,GAAAmP,EAAAnP,IACA,MAAAuB,MAAA6N,GAAAtQ,GAAA,8BAAAkB,IAAA2G,GAAA3G,EAAAwJ,EAAA,mEAAAjF,OAAAvE,IAKA,SAAAmQ,EAAAnQ,GACA,IAAAiQ,EAAAjQ,EAAApB,EAAAoC,OAAA,EACA,OAAA4O,EAAA5P,EAAA8H,EAAAyH,IAAAU,GAAAjQ,EAAApB,EAAAqR,GAAA,KAGA,SAAAG,EAAA3K,EAAAqC,GACA,OAAArC,EAAAzE,OAAA,EAAAyE,EAAA4K,OAAA,OAAA5K,EAAAlD,MAAA,GAAAkD,IAAAqC,EAAA,YAAAA,EAGA,SAAAwI,EAAA7K,EAAAqC,EAAAgI,GACA,IAAAnN,EAAA4N,EAEA,GAAAzI,EAAA,GAEA,IAAAyI,EAAAT,EAAA,MAAwBhI,EAAKyI,GAAAT,GAI7BrK,EAAA8K,EAAA9K,OAIA,KAAAqC,GAFAnF,EAAA8C,EAAAzE,QAEA,CACA,IAAAuP,EAAAT,EAAAhI,GAAAnF,IAA8BmF,EAAKyI,GAAAT,GAInCrK,GAAA8K,OACOzI,EAAAnF,IACP8C,IAAAlD,MAAA,EAAAuF,GAAA,IAAArC,EAAAlD,MAAAuF,IAIA,OAAArC,GAIAsJ,EApkFA,SAAAyB,EAAAC,GACA,IAAAC,EACAC,EACAC,EA6fAC,EAmoBAC,EACAC,EACAC,EACAC,EACAC,EAnoCAC,EAAApC,EAAA5O,UAAA,CACA0O,YAAAE,EACA1L,SAAA,KACA+N,QAAA,MAEAC,EAAA,IAAAtC,EAAA,GAKAuC,EAAA,GAaAC,EAAA,EAKAC,GAAA,EAIAC,EAAA,GAKAC,GAAA,IAKAC,EAAA,IAGAC,GAAA,EAkBAC,EAAA,EAIAC,EAAA,EAGAC,EAAA,CACAC,OAAA,GACAC,UAAA,EACAC,mBAAA,EACAC,eAAA,IACAC,iBAAA,IACAC,kBAAA,EACAC,uBAAA,IAEAC,OAAA,IAKAC,EAAA,uCAWA,SAAAzD,EAAA/O,EAAA4D,GACA,IAAA6O,EACA7T,EACA8T,EACA5K,EACAvJ,EACAoU,EACAhQ,EACA8C,EACAgD,EAAAnH,KAEA,KAAAmH,aAAAsG,GAIA,WAAAA,EAAA/O,EAAA4D,GAGA,SAAAA,EAAA,CAEA,GAAA5D,aAAA+O,EAIA,OAHAtG,EAAAnI,EAAAN,EAAAM,EACAmI,EAAAX,EAAA9H,EAAA8H,OACAW,EAAA7J,GAAAoB,IAAApB,GAAAoB,EAAAuC,QAAAvC,GAMA,IAFA2S,EAAA,iBAAA3S,IAEA,EAAAA,GAAA,GAIA,GAFAyI,EAAAnI,EAAA,EAAAN,EAAA,GAAAA,MAAA,KAEAA,QAAA,CACA,IAAA8H,EAAA,EAAAvJ,EAAAyB,EAA8BzB,GAAA,GAASA,GAAA,GAAAuJ,KAMvC,OAFAW,EAAAX,SACAW,EAAA7J,EAAA,CAAAoB,IAIAyF,EAAAlB,OAAAvE,OACS,CAET,GADAyF,EAAAlB,OAAAvE,IACAgP,EAAA4D,KAAAnN,GAAA,OAAAmL,EAAAnI,EAAAhD,EAAAkN,GACAlK,EAAAnI,EAAA,IAAAmF,EAAAG,WAAA,IAAAH,IAAAlD,MAAA,UAIAuF,EAAArC,EAAAxB,QAAA,WAAAwB,IAAA4I,QAAA,UAEA9P,EAAAkH,EAAAoN,OAAA,UAEA/K,EAAA,IAAAA,EAAAvJ,GACAuJ,IAAArC,EAAAlD,MAAAhE,EAAA,GACAkH,IAAAqN,UAAA,EAAAvU,IACSuJ,EAAA,IAETA,EAAArC,EAAAzE,YAEO,CAMP,GAJAkP,EAAAtM,EAAA,EAAA4O,EAAAxR,OAAA,QACAyE,EAAAlB,OAAAvE,GAGA,IAAA4D,EAEA,OAAAmP,EADAtK,EAAA,IAAAsG,EAAA/O,aAAA+O,EAAA/O,EAAAyF,GACA6L,EAAA7I,EAAAX,EAAA,EAAAyJ,GAKA,GAFAoB,EAAA,iBAAA3S,EAEA,CAEA,KAAAA,GAAA,SAAA4Q,EAAAnI,EAAAhD,EAAAkN,EAAA/O,GAGA,GAFA6E,EAAAnI,EAAA,EAAAN,EAAA,GAAAyF,IAAAlD,MAAA,SAEAwM,EAAAiE,OAAAvN,EAAA4I,QAAA,gBAAArN,OAAA,GACA,MAAAO,MAAA8N,EAAArP,GAIA2S,GAAA,OAEAlK,EAAAnI,EAAA,KAAAmF,EAAAG,WAAA,IAAAH,IAAAlD,MAAA,SAOA,IAJAkQ,EAAAD,EAAAjQ,MAAA,EAAAqB,GACAkE,EAAAvJ,EAAA,EAGAoE,EAAA8C,EAAAzE,OAA8BzC,EAAAoE,EAASpE,IACvC,GAAAkU,EAAAxO,QAAArF,EAAA6G,EAAA4K,OAAA9R,IAAA,GACA,QAAAK,GAEA,GAAAL,EAAAuJ,EAAA,CACAA,EAAAnF,EACA,eAEa,IAAA+P,IAEbjN,KAAAwN,gBAAAxN,IAAA/B,gBAAA+B,KAAA/B,gBAAA+B,IAAAwN,gBAAA,CACAP,GAAA,EACAnU,GAAA,EACAuJ,EAAA,EACA,SAIA,OAAA8I,EAAAnI,EAAAlE,OAAAvE,GAAA2S,EAAA/O,IAMAkE,GAFArC,EAAAkL,EAAAlL,EAAA7B,EAAA,GAAA6E,EAAAnI,IAEA2D,QAAA,SAAAwB,IAAA4I,QAAA,QAAoEvG,EAAArC,EAAAzE,OAIpE,IAAAzC,EAAA,EAAiB,KAAAkH,EAAAG,WAAArH,GAA0BA,KAK3C,IAAAoE,EAAA8C,EAAAzE,OAA4B,KAAAyE,EAAAG,aAAAjD,KAM5B,GAFA8C,IAAAlD,MAAAhE,IAAAoE,GAEA,CAGA,GAFAA,GAAApE,EAEAoU,GAAA5D,EAAAiE,OAAArQ,EAAA,KAAA3C,EAAAwP,GAAAxP,IAAAmP,EAAAnP,IACA,MAAAuB,MAAA8N,EAAA5G,EAAAnI,EAAAN,GAKA,IAFA8H,IAAAvJ,EAAA,GAEAoT,EAEAlJ,EAAA7J,EAAA6J,EAAAX,EAAA,UACS,GAAAA,EAAA4J,EAETjJ,EAAA7J,EAAA,CAAA6J,EAAAX,EAAA,OACS,CAST,GARAW,EAAAX,IACAW,EAAA7J,EAAA,GAIAL,GAAAuJ,EAAA,GAAAyH,EACAzH,EAAA,IAAAvJ,GAAAgR,GAEAhR,EAAAoE,EAAA,CAGA,IAFApE,GAAAkK,EAAA7J,EAAA+G,MAAAF,EAAAlD,MAAA,EAAAhE,IAEAoE,GAAA4M,EAAiChR,EAAAoE,GACjC8F,EAAA7J,EAAA+G,MAAAF,EAAAlD,MAAAhE,KAAAgR,IAGA9J,IAAAlD,MAAAhE,GACAA,EAAAgR,EAAA9J,EAAAzE,YAEAzC,GAAAoE,EAGA,KAAgBpE,IAAKkH,GAAA,KAIrBgD,EAAA7J,EAAA+G,MAAAF,SAIAgD,EAAA7J,EAAA,CAAA6J,EAAAX,EAAA,GAmwBA,SAAAoL,EAAAlT,EAAAzB,EAAA4U,EAAAC,GACA,IAAAC,EAAAvL,EAAAwL,EAAA3Q,EAAA8C,EAEA,GADA,MAAA0N,IAAA5B,EAAyCrB,EAAAiD,EAAA,MACzCnT,EAAApB,EAAA,OAAAoB,EAAAqD,WAIA,GAHAgQ,EAAArT,EAAApB,EAAA,GACA0U,EAAAtT,EAAA8H,EAEA,MAAAvJ,EACAkH,EAAAoK,EAAA7P,EAAApB,GACA6G,EAAA,GAAA2N,GAAA,GAAAA,GAAAE,GAAA9B,EAAApB,EAAA3K,EAAA6N,GAAAhD,EAAA7K,EAAA6N,EAAA,UAWA,GAPAxL,GAFA9H,EAAA+S,EAAA,IAAAhE,EAAA/O,GAAAzB,EAAA4U,IAEArL,EAEAnF,GADA8C,EAAAoK,EAAA7P,EAAApB,IACAoC,OAKA,GAAAoS,GAAA,GAAAA,IAAA7U,GAAAuJ,MAAA0J,GAAA,CAEA,KAAgB7O,EAAApE,EAASkH,GAAA,IAAA9C,KAIzB8C,EAAA2K,EAAA3K,EAAAqC,QAKA,GAHAvJ,GAAA+U,EACA7N,EAAA6K,EAAA7K,EAAAqC,EAAA,KAEAA,EAAA,EAAAnF,GACA,KAAApE,EAAA,MAAAkH,GAAA,IAAyClH,IAAKkH,GAAA,WAM9C,IAFAlH,GAAAuJ,EAAAnF,GAEA,EAGA,IAFAmF,EAAA,GAAAnF,IAAA8C,GAAA,KAEoBlH,IAAKkH,GAAA,KAQzB,OAAAzF,EAAAM,EAAA,GAAA+S,EAAA,IAAA5N,IAIA,SAAA8N,EAAAC,EAAAC,GAKA,IAJA,IAAAzT,EACAzB,EAAA,EACAI,EAAA,IAAAoQ,EAAAyE,EAAA,IAEYjV,EAAAiV,EAAAxS,OAAiBzC,IAAA,CAG7B,KAFAyB,EAAA,IAAA+O,EAAAyE,EAAAjV,KAEA+B,EAAA,CACA3B,EAAAqB,EACA,MACSyT,EAAA/U,KAAAC,EAAAqB,KACTrB,EAAAqB,GAIA,OAAArB,EAQA,SAAA+U,EAAA1T,EAAApB,EAAAkJ,GAIA,IAHA,IAAAvJ,EAAA,EACAsG,EAAAjG,EAAAoC,QAEYpC,IAAAiG,GAASjG,EAAA+U,OAKrB,IAAA9O,EAAAjG,EAAA,GAAoBiG,GAAA,GAASA,GAAA,GAAAtG,KAgB7B,OAXAuJ,EAAAvJ,EAAAuJ,EAAAyH,EAAA,GAAAoC,EAEA3R,EAAApB,EAAAoB,EAAA8H,EAAA,KACOA,EAAA4J,EAEP1R,EAAApB,EAAA,CAAAoB,EAAA8H,EAAA,IAEA9H,EAAA8H,IACA9H,EAAApB,KAGAoB,EAmDA,SAAA+S,EAAAtK,EAAAmL,EAAAT,EAAA9T,GACA,IAAAR,EACAN,EACAsG,EACAoL,EACAjQ,EACA6T,EACAC,EACA/D,EAAAtH,EAAA7J,EACAmV,EAAAtE,EAEA,GAAAM,EAAA,CAOAzF,EAAA,CAEA,IAAAzL,EAAA,EAAAoR,EAAAF,EAAA,GAAgCE,GAAA,GAASA,GAAA,GAAApR,KAMzC,IAFAN,EAAAqV,EAAA/U,GAEA,EACAN,GAAAgR,EACA1K,EAAA+O,EAGAE,GAFA9T,EAAA+P,EAAA8D,EAAA,IAEAE,EAAAlV,EAAAgG,EAAA,aAIA,IAFAgP,EAAA5E,GAAA1Q,EAAA,GAAAgR,KAEAQ,EAAA/O,OAAA,CACA,IAAA3B,EAWA,MAAAiL,EATA,KAAsByF,EAAA/O,QAAA6S,EAAiB9D,EAAApK,KAAA,IAIvC3F,EAAA8T,EAAA,EACAjV,EAAA,EAEAgG,GADAtG,GAAAgR,GACAA,EAAA,MAIa,CAGb,IAFAvP,EAAAiQ,EAAAF,EAAA8D,GAEAhV,EAAA,EAAyBoR,GAAA,GAASA,GAAA,GAAApR,KAUlCiV,GAFAjP,GAHAtG,GAAAgR,GAGAA,EAAA1Q,GAEA,IAAAmB,EAAA+T,EAAAlV,EAAAgG,EAAA,QAWA,GAPAxF,KAAAuU,EAAA,GAGA,MAAA7D,EAAA8D,EAAA,KAAAhP,EAAA,EAAA7E,IAAA+T,EAAAlV,EAAAgG,EAAA,IACAxF,EAAA8T,EAAA,GAAAW,GAAAzU,KAAA,GAAA8T,OAAA1K,EAAAnI,EAAA,QAAAwT,EAAA,MAAAA,IAAA,GAAAX,GAAA9T,GAAA,GAAA8T,IACA5U,EAAA,EAAAsG,EAAA,EAAA7E,EAAA+T,EAAAlV,EAAAgG,GAAA,EAAAkL,EAAA8D,EAAA,UAAAV,IAAA1K,EAAAnI,EAAA,QAEAsT,EAAA,IAAA7D,EAAA,GAcA,OAbAA,EAAA/O,OAAA,EAEA3B,GAEAuU,GAAAnL,EAAAX,EAAA,EAEAiI,EAAA,GAAAgE,GAAAxE,EAAAqE,EAAArE,MACA9G,EAAAX,GAAA8L,GAAA,GAGA7D,EAAA,GAAAtH,EAAAX,EAAA,EAGAW,EAiBA,GAbA,GAAAlK,GACAwR,EAAA/O,OAAA6S,EACA5D,EAAA,EACA4D,MAEA9D,EAAA/O,OAAA6S,EAAA,EACA5D,EAAA8D,EAAAxE,EAAAhR,GAGAwR,EAAA8D,GAAAhP,EAAA,EAAAsK,EAAAnP,EAAA+T,EAAAlV,EAAAgG,GAAAkP,EAAAlP,IAAAoL,EAAA,GAIA5Q,EACA,OAAmB,CAEnB,MAAAwU,EAAA,CAEA,IAAAtV,EAAA,EAAAsG,EAAAkL,EAAA,GAAsClL,GAAA,GAASA,GAAA,GAAAtG,KAM/C,IAFAsG,EAAAkL,EAAA,IAAAE,EAEAA,EAAA,EAA2BpL,GAAA,GAASA,GAAA,GAAAoL,KAKpC1R,GAAA0R,IACAxH,EAAAX,IACAiI,EAAA,IAAAT,IAAAS,EAAA,OAGA,MAGA,GADAA,EAAA8D,IAAA5D,EACAF,EAAA8D,IAAAvE,EAAA,MACAS,EAAA8D,KAAA,EACA5D,EAAA,EAMA,IAAA1R,EAAAwR,EAAA/O,OAA6B,IAAA+O,IAAAxR,GAAewR,EAAA4D,QAM5ClL,EAAAX,EAAA6J,EACAlJ,EAAA7J,EAAA6J,EAAAX,EAAA,KACSW,EAAAX,EAAA4J,IACTjJ,EAAA7J,EAAA,CAAA6J,EAAAX,EAAA,IAIA,OAAAW,EAGA,SAAA2I,EAAApR,GACA,IAAAyF,EACAqC,EAAA9H,EAAA8H,EACA,cAAAA,EAAA9H,EAAAqD,YACAoC,EAAAoK,EAAA7P,EAAApB,GACA6G,EAAAqC,GAAA0J,GAAA1J,GAAA2J,EAAArB,EAAA3K,EAAAqC,GAAAwI,EAAA7K,EAAAqC,EAAA,KACA9H,EAAAM,EAAA,MAAAmF,KA+nCA,OAprEAsJ,EAAAyB,QACAzB,EAAAiF,SAAA,EACAjF,EAAAkF,WAAA,EACAlF,EAAAmF,WAAA,EACAnF,EAAAoF,YAAA,EACApF,EAAAqF,cAAA,EACArF,EAAAsF,gBAAA,EACAtF,EAAAuF,gBAAA,EACAvF,EAAAwF,gBAAA,EACAxF,EAAAyF,iBAAA,EACAzF,EAAA0F,OAAA,EAoCA1F,EAAA2F,OAAA3F,EAAAjB,IAAA,SAAArL,GACA,IAAApC,EAAAsU,EAEA,SAAAlS,EAAA,CACA,aAAAkM,EAAAlM,GAoHA,MAAAlB,MAAA6N,EAAA,oBAAA3M,GA9EA,GAnCAA,EAAArC,eAAAC,EAAA,oBAEA6P,EADAyE,EAAAlS,EAAApC,GACA,EAAAsP,EAAAtP,GACAiR,EAAAqD,GAKAlS,EAAArC,eAAAC,EAAA,mBAEA6P,EADAyE,EAAAlS,EAAApC,GACA,IAAAA,GACAkR,EAAAoD,GAOAlS,EAAArC,eAAAC,EAAA,qBACAsU,EAAAlS,EAAApC,KAEAsU,EAAAhB,KACAzD,EAAAyE,EAAA,IAAAhF,EAAA,EAAAtP,GACA6P,EAAAyE,EAAA,KAAAhF,EAAAtP,GACAmR,EAAAmD,EAAA,GACAlD,EAAAkD,EAAA,KAEAzE,EAAAyE,GAAAhF,IAAAtP,GACAmR,IAAAC,EAAAkD,EAAA,GAAAA,OAOAlS,EAAArC,eAAAC,EAAA,SAGA,IAFAsU,EAAAlS,EAAApC,KAEAsU,EAAAhB,IACAzD,EAAAyE,EAAA,IAAAhF,GAAA,EAAAtP,GACA6P,EAAAyE,EAAA,KAAAhF,EAAAtP,GACAqR,EAAAiD,EAAA,GACAhD,EAAAgD,EAAA,OACa,CAGb,GAFAzE,EAAAyE,GAAAhF,IAAAtP,IAEAsU,EAGA,MAAApT,MAAA6N,EAAA/O,EAAA,oBAAAsU,GAFAjD,IAAAC,EAAAgD,EAAA,GAAAA,KAUA,GAAAlS,EAAArC,eAAAC,EAAA,WAGA,IAFAsU,EAAAlS,EAAApC,QAEAsU,EAYA,MAAApT,MAAA6N,EAAA/O,EAAA,uBAAAsU,GAXA,GAAAA,EAAA,CACA,uBAAAC,yBAAAC,kBAAAD,OAAAE,YAIA,MADAlD,GAAA+C,EACApT,MAAA6N,EAAA,sBAHAwC,EAAA+C,OAMA/C,EAAA+C,EAyBA,GAhBAlS,EAAArC,eAAAC,EAAA,iBAEA6P,EADAyE,EAAAlS,EAAApC,GACA,IAAAA,GACAwR,EAAA8C,GAKAlS,EAAArC,eAAAC,EAAA,mBAEA6P,EADAyE,EAAAlS,EAAApC,GACA,EAAAsP,EAAAtP,GACAyR,EAAA6C,GAKAlS,EAAArC,eAAAC,EAAA,WAEA,aAAAsO,EADAgG,EAAAlS,EAAApC,IACmD,MAAAkB,MAAA6N,EAAA/O,EAAA,mBAAAsU,GAAnD5C,EAAA4C,EAKA,GAAAlS,EAAArC,eAAAC,EAAA,aAIA,oBAHAsU,EAAAlS,EAAApC,KAGA,sBAAAuS,KAAA+B,GAGA,MAAApT,MAAA6N,EAAA/O,EAAA,aAAAsU,GAFAnC,EAAAmC,GAWA,OACArD,iBACAC,gBACAwD,eAAA,CAAAvD,EAAAC,GACAuD,MAAA,CAAAtD,EAAAC,GACAC,SACAC,cACAC,gBACAC,SACAS,aAUAzD,EAAAkG,YAAA,SAAAN,GACA,OAAAA,aAAA5F,GAAA4F,IAAA,IAAAA,EAAAO,eAAA,GASAnG,EAAAoG,QAAApG,EAAAvF,IAAA,WACA,OAAA+J,EAAAtK,UAAAkI,EAAAiE,KASArG,EAAAsG,QAAAtG,EAAApI,IAAA,WACA,OAAA4M,EAAAtK,UAAAkI,EAAAmE,KAcAvG,EAAAwG,QAMA1E,EALA,iBAKAnK,KAAA6O,SAAA,mBACA,OAAApG,EANA,iBAMAzI,KAAA6O,WACO,WACP,2BAAA7O,KAAA6O,SAAA,YAAA7O,KAAA6O,SAAA,IAEA,SAAAC,GACA,IAAAhN,EACA5E,EACAkE,EACAmI,EACA0E,EACApW,EAAA,EACAK,EAAA,GACA6W,EAAA,IAAA1G,EAAAsC,GAIA,GAHA,MAAAmE,IAAAlE,EAA4CpB,EAAAsF,EAAA,EAAA7F,GAC5CM,EAAAhB,EAAAuG,EAAAjG,GAEAqC,EAEA,GAAAgD,OAAAC,gBAAA,CAGA,IAFArM,EAAAoM,OAAAC,gBAAA,IAAAa,YAAAzF,GAAA,IAEkB1R,EAAA0R,IAOlB0E,EAAA,OAAAnM,EAAAjK,IAAAiK,EAAAjK,EAAA,WAKA,MACAqF,EAAAgR,OAAAC,gBAAA,IAAAa,YAAA,IACAlN,EAAAjK,GAAAqF,EAAA,GACA4E,EAAAjK,EAAA,GAAAqF,EAAA,KAIAhF,EAAA+G,KAAAgP,EAAA,MACApW,GAAA,GAIAA,EAAA0R,EAAA,MACW,KAAA2E,OAAAE,YAuBX,MADAlD,GAAA,EACArQ,MAAA6N,EAAA,sBAnBA,IAFA5G,EAAAoM,OAAAE,YAAA7E,GAAA,GAEkB1R,EAAA0R,IAKlB0E,EAAA,oBAAAnM,EAAAjK,IAAA,cAAAiK,EAAAjK,EAAA,cAAAiK,EAAAjK,EAAA,YAAAiK,EAAAjK,EAAA,IAAAiK,EAAAjK,EAAA,SAAAiK,EAAAjK,EAAA,OAAAiK,EAAAjK,EAAA,KAEA,KACAqW,OAAAE,YAAA,GAAAjS,KAAA2F,EAAAjK,IAGAK,EAAA+G,KAAAgP,EAAA,MACApW,GAAA,GAIAA,EAAA0R,EAAA,EAQA,IAAA2B,EACA,KAAgBrT,EAAA0R,IAChB0E,EAAA9D,KACA,OAAAjS,EAAAL,KAAAoW,EAAA,MAaA,IATA1E,EAAArR,IAAAL,GACAiX,GAAAjG,EAEAU,GAAAuF,IACAb,EAAAlF,EAAAF,EAAAiG,GACA5W,EAAAL,GAAA4Q,EAAAc,EAAA0E,MAIc,IAAA/V,EAAAL,GAAYK,EAAA+U,MAAApV,KAK1B,GAAAA,EAAA,EACAK,EAAA,CAAAkJ,EAAA,OACS,CAET,IAAAA,GAAA,EAAsB,IAAAlJ,EAAA,GAAYA,EAAA+W,OAAA,KAAA7N,GAAAyH,GAKlC,IAAAhR,EAAA,EAAAoW,EAAA/V,EAAA,GAA+B+V,GAAA,GAASA,GAAA,GAAApW,KAKxCA,EAAAgR,IAAAzH,GAAAyH,EAAAhR,GAKA,OAFAkX,EAAA3N,IACA2N,EAAA7W,IACA6W,IAUA1G,EAAA6G,IAAA,WAKA,IAJA,IAAArX,EAAA,EACAiV,EAAAvK,UACA2M,EAAA,IAAA7G,EAAAyE,EAAA,IAEYjV,EAAAiV,EAAAxS,QACZ4U,IAAAC,KAAArC,EAAAjV,MAGA,OAAAqX,GAKAjF,EAAA,WAQA,SAAAmF,EAAArQ,EAAAsQ,EAAAC,EAAAvD,GAOA,IANA,IAAA5N,EAEAoR,EADA9R,EAAA,IAEA5F,EAAA,EACAoE,EAAA8C,EAAAzE,OAEczC,EAAAoE,GAAS,CACvB,IAAAsT,EAAA9R,EAAAnD,OAAiCiV,IAAQ9R,EAAA8R,IAAAF,GAMzC,IAFA5R,EAAA,IAAAsO,EAAAxO,QAAAwB,EAAA4K,OAAA9R,MAEAsG,EAAA,EAAqBA,EAAAV,EAAAnD,OAAgB6D,IACrCV,EAAAU,GAAAmR,EAAA,IACA,MAAA7R,EAAAU,EAAA,KAAAV,EAAAU,EAAA,MACAV,EAAAU,EAAA,IAAAV,EAAAU,GAAAmR,EAAA,EACA7R,EAAAU,IAAAmR,GAKA,OAAA7R,EAAA+R,UAMA,gBAAAzQ,EAAAsQ,EAAAC,EAAAG,EAAAC,GACA,IAAA3D,EACA5T,EACAiJ,EACAmI,EACA5Q,EACAoJ,EACAsH,EACArH,EACAnK,EAAAkH,EAAAxB,QAAA,KACAuR,EAAAlE,EACA6B,EAAA5B,EAqBA,IAnBAhT,GAAA,IACA0R,EAAA6B,EAEAA,EAAA,EACArM,IAAA4I,QAAA,QAEA5F,GADAC,EAAA,IAAAqG,EAAAgH,IACAlK,IAAApG,EAAAzE,OAAAzC,GACAuT,EAAA7B,EAGAvH,EAAA9J,EAAAkX,EAAAxF,EAAAT,EAAApH,EAAA7J,GAAA6J,EAAAX,EAAA,QAAAkO,EA3DA,cA4DAtN,EAAAZ,EAAAY,EAAA9J,EAAAoC,QAMA8G,EAAAmI,GAFAF,EAAA+F,EAAArQ,EAAAsQ,EAAAC,EAAAI,GAAA3D,EAAAD,EAhEA,eAgEAC,EAhEA,aAgEAD,KAEAxR,OAEc,GAAA+O,IAAAE,GAAcF,EAAA4D,OAK5B,IAAA5D,EAAA,UAAA0C,EAAApC,OAAA,GA2BA,GAzBA9R,EAAA,IACAuJ,GAEAW,EAAA7J,EAAAmR,EACAtH,EAAAX,IAEAW,EAAAnI,EAAA6V,EAEApG,GADAtH,EAAAiI,EAAAjI,EAAAC,EAAA8M,EAAArC,EAAA6C,IACApX,EACAS,EAAAoJ,EAAApJ,EACAyI,EAAAW,EAAAX,GAOAvJ,EAAAwR,EAFAlR,EAAAiJ,EAAA0N,EAAA,GAIAvF,EAAA+F,EAAA,EACA3W,KAAAR,EAAA,SAAAkR,EAAAlR,EAAA,GACAQ,EAAA8T,EAAA,SAAA5U,GAAAc,KAAA,GAAA8T,OAAA1K,EAAAnI,EAAA,QAAA/B,EAAA0R,GAAA1R,GAAA0R,IAAA,GAAAkD,GAAA9T,GAAA,GAAA8T,GAAA,EAAApD,EAAAlR,EAAA,IAAAsU,IAAA1K,EAAAnI,EAAA,QAIAzB,EAAA,IAAAkR,EAAA,GAEAtK,EAAApG,EAAAiR,EAAAmC,EAAApC,OAAA,IAAAmF,EAAA/C,EAAApC,OAAA,IAAAoC,EAAApC,OAAA,OACS,CAIT,GAFAN,EAAA/O,OAAAnC,EAEAQ,EAEA,MAAA2W,IAA2BjG,IAAAlR,GAAAmX,GAC3BjG,EAAAlR,GAAA,EAEAA,MACAiJ,EACAiI,EAAA,IAAApH,OAAAoH,IAMA,IAAAE,EAAAF,EAAA/O,QAA6B+O,IAAAE,KAK7B,IAAA1R,EAAA,EAAAkH,EAAA,GAA+BlH,GAAA0R,EAAQxK,GAAAgN,EAAApC,OAAAN,EAAAxR,OAKvCkH,EAAA6K,EAAA7K,EAAAqC,EAAA2K,EAAApC,OAAA,IAIA,OAAA5K,GAvIA,GA4IAiL,EAAA,WAEA,SAAA2F,EAAA5N,EAAAwH,EAAAqG,GACA,IAAA3X,EACA4X,EACAC,EACAC,EACAC,EAAA,EACAnY,EAAAkK,EAAAzH,OACA2V,EAAA1G,EAAAP,EACAkH,EAAA3G,EAAAP,EAAA,EAEA,IAAAjH,IAAAlG,QAA2BhE,KAK3BmY,IADAH,EAAAI,GAHAH,EAAA/N,EAAAlK,GAAAmR,IAEA/Q,EAAAiY,EAAAJ,GADAC,EAAAhO,EAAAlK,GAAAmR,EAAA,GACAiH,GACAjH,IAAAgH,GACAJ,EAAA,IAAA3X,EAAA+Q,EAAA,GAAAkH,EAAAH,EACAhO,EAAAlK,GAAAgY,EAAAD,EAIA,OADAI,IAAAjO,EAAA,CAAAiO,GAAA/N,OAAAF,IACAA,EAGA,SAAAF,EAAAC,EAAA5E,EAAAiT,EAAAC,GACA,IAAAvY,EAAAwY,EAEA,GAAAF,GAAAC,EACAC,EAAAF,EAAAC,EAAA,UAEA,IAAAvY,EAAAwY,EAAA,EAA2BxY,EAAAsY,EAAQtY,IACnC,GAAAiK,EAAAjK,IAAAqF,EAAArF,GAAA,CACAwY,EAAAvO,EAAAjK,GAAAqF,EAAArF,GAAA,KACA,MAKA,OAAAwY,EAGA,SAAAC,EAAAxO,EAAA5E,EAAAiT,EAAAP,GAGA,IAFA,IAAA/X,EAAA,EAEcsY,KACdrO,EAAAqO,IAAAtY,EACAA,EAAAiK,EAAAqO,GAAAjT,EAAAiT,GAAA,IACArO,EAAAqO,GAAAtY,EAAA+X,EAAA9N,EAAAqO,GAAAjT,EAAAiT,GAIA,MAAcrO,EAAA,IAAAA,EAAAxH,OAAA,EAAuBwH,EAAAmN,OAAA,OAMrC,gBAAAlN,EAAAC,EAAA8M,EAAArC,EAAAmD,GACA,IAAAS,EACAjP,EACAvJ,EACA0Y,EACAjX,EACAkX,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAvX,EAAAmI,EAAAnI,GAAAoI,EAAApI,EAAA,KACAyP,EAAAtH,EAAA7J,EACAoR,EAAAtH,EAAA9J,EAEA,KAAAmR,KAAA,IAAAC,KAAA,IACA,WAAAjB,EACAtG,EAAAnI,GAAAoI,EAAApI,IAAAyP,GAAAC,GAAAD,EAAA,IAAAC,EAAA,GAAAA,GACAD,GAAA,GAAAA,EAAA,KAAAC,EAAA,EAAA1P,IAAA,EADAwX,KAiBA,IAZAT,GADAD,EAAA,IAAArI,EAAAzO,IACA1B,EAAA,GAEA0B,EAAAkV,GADA1N,EAAAW,EAAAX,EAAAY,EAAAZ,GACA,EAEAwO,IACAA,EAAAhH,EACAxH,EAAA8H,EAAAnH,EAAAX,EAAAyH,GAAAK,EAAAlH,EAAAZ,EAAAyH,GACAjP,IAAAiP,EAAA,GAKAhR,EAAA,EAAmByR,EAAAzR,KAAAwR,EAAAxR,IAAA,GAAuBA,KAM1C,GAFAyR,EAAAzR,IAAAwR,EAAAxR,IAAA,IAAAuJ,IAEAxH,EAAA,EACA+W,EAAA1R,KAAA,GACAsR,GAAA,MACS,CAoBT,IAnBAS,EAAA3H,EAAA/O,OACA4W,EAAA5H,EAAAhP,OACAzC,EAAA,EACA+B,GAAA,GAEAN,EAAAmP,EAAAmH,GAAAtG,EAAA,QAGA,IACAA,EAAAqG,EAAArG,EAAAhQ,EAAAsW,GACAvG,EAAAsG,EAAAtG,EAAA/P,EAAAsW,GACAsB,EAAA5H,EAAAhP,OACA0W,EAAA3H,EAAA/O,QAGAyW,EAAAG,EAEAL,GADAD,EAAAvH,EAAAxN,MAAA,EAAAqV,IACA5W,OAEgBuW,EAAAK,EAAWN,EAAAC,KAAA,GAI3BM,EAAA7H,EAAAzN,QACAsV,EAAA,IAAAlP,OAAAkP,GACAF,EAAA3H,EAAA,GACAA,EAAA,IAAAsG,EAAA,GAAAqB,IAGA,GAKA,GAJA3X,EAAA,GAEA+W,EAAAxO,EAAAyH,EAAAsH,EAAAM,EAAAL,IAEA,GAgBA,GAdAC,EAAAF,EAAA,GACAM,GAAAL,IAAAC,IAAAlB,GAAAgB,EAAA,SAEAtX,EAAAmP,EAAAqI,EAAAG,IAWA,EAWA,IATA3X,GAAAsW,IAAAtW,EAAAsW,EAAA,GAGAa,GADAD,EAAAb,EAAArG,EAAAhQ,EAAAsW,IACAtV,OACAuW,EAAAD,EAAAtW,OAKA,GAAAuH,EAAA2O,EAAAI,EAAAH,EAAAI,IACAvX,IAEAgX,EAAAE,EAAAU,EAAAT,EAAAU,EAAA7H,EAAAmH,EAAAb,GACAa,EAAAD,EAAAlW,OACA+V,EAAA,OAOA,GAAA/W,IAEA+W,EAAA/W,EAAA,GAKAmX,GADAD,EAAAlH,EAAAzN,SACAvB,OAQA,GALAmW,EAAAI,IAAAL,EAAA,IAAAvO,OAAAuO,IAEAF,EAAAM,EAAAJ,EAAAK,EAAAjB,GACAiB,EAAAD,EAAAtW,QAEA,GAAA+V,EAKA,KAAAxO,EAAAyH,EAAAsH,EAAAM,EAAAL,GAAA,GACAvX,IAEAgX,EAAAM,EAAAM,EAAAL,EAAAM,EAAA7H,EAAAuH,EAAAjB,GACAiB,EAAAD,EAAAtW,YAGa,IAAA+V,IACb/W,IACAsX,EAAA,KAKAD,EAAA9Y,KAAAyB,EAEAsX,EAAA,GACAA,EAAAC,KAAAxH,EAAA0H,IAAA,GAEAH,EAAA,CAAAvH,EAAA0H,IACAF,EAAA,UAEWE,IAAAC,GAAA,MAAAJ,EAAA,KAAAhX,KAEX2W,EAAA,MAAAK,EAAA,GAEAD,EAAA,IAAAA,EAAA1B,OAAA,KAGA,GAAAW,GAAAhH,EAAA,CAEA,IAAA/Q,EAAA,EAAA+B,EAAA+W,EAAA,GAAgC/W,GAAA,GAASA,GAAA,GAAA/B,KAIzCwU,EAAAqE,EAAA5B,GAAA4B,EAAAtP,EAAAvJ,EAAAuJ,EAAAyH,EAAA,KAAA4D,EAAA8D,QAEAG,EAAAtP,IACAsP,EAAA/X,GAAA4X,EAGA,OAAAG,GAnPA,GA4WAtG,EAAA,8BACAC,EAAA,cACAC,EAAA,cACAC,EAAA,qBACAC,EAAA,6BALAN,EAMA,SAAAnI,EAAAhD,EAAAkN,EAAA/O,GACA,IAAA0S,EACAhW,EAAAqS,EAAAlN,IAAA4I,QAAA6C,EAAA,IAEA,GAAAD,EAAA2B,KAAAtS,GACAmI,EAAAnI,EAAAyD,MAAAzD,GAAA,KAAAA,EAAA,OACAmI,EAAA7J,EAAA6J,EAAAX,EAAA,SACS,CACT,IAAA6K,IAEArS,IAAA+N,QAAAyC,EAAA,SAAAnS,EAAAoZ,EAAAC,GAEA,OADA1B,EAAA,MAAA0B,IAAAtU,eAAA,QAAAsU,EAAA,IACApU,MAAA0S,EAAA3X,EAAAoZ,IAGAnU,IACA0S,EAAA1S,EAEAtD,IAAA+N,QAAA0C,EAAA,MAAA1C,QAAA2C,EAAA,SAGAvL,GAAAnF,GAAA,WAAAyO,EAAAzO,EAAAgW,GAKA,GAAAvH,EAAAiE,MACA,MAAAzR,MAAA6N,EAAA,SAAAxL,EAAA,SAAAA,EAAA,gBAAA6B,GAIAgD,EAAA7J,EAAA6J,EAAAX,EAAAW,EAAAnI,EAAA,OAgLA6Q,EAAA8G,cAAA9G,EAAA+G,IAAA,WACA,IAAAzP,EAAA,IAAAsG,EAAAzN,MAEA,OADAmH,EAAAnI,EAAA,IAAAmI,EAAAnI,EAAA,GACAmI,GAWA0I,EAAAgH,WAAA,SAAAzP,EAAA9E,GACA,OAAA2E,EAAAjH,KAAA,IAAAyN,EAAArG,EAAA9E,KAiBAuN,EAAAiH,cAAAjH,EAAAqE,GAAA,SAAAA,EAAArC,GACA,IAAAvU,EACAoB,EACA2U,EACAlM,EAAAnH,KAEA,SAAAkU,EAGA,OAFAtF,EAAAsF,EAAA,EAAA7F,GACA,MAAAwD,IAAA5B,EAA2CrB,EAAAiD,EAAA,KAC3CJ,EAAA,IAAAhE,EAAAtG,GAAA+M,EAAA/M,EAAAX,EAAA,EAAAqL,GAGA,KAAAvU,EAAA6J,EAAA7J,GAAA,YAGA,GAFAoB,IAAA2U,EAAA/V,EAAAoC,OAAA,GAAA4O,EAAAtO,KAAAwG,EAAAyH,MAEAoF,EAAA/V,EAAA+V,GAAA,KAA0BA,EAAA,MAAaA,GAAA,GAAA3U,KAIvC,OADAA,EAAA,IAAAA,EAAA,GACAA,GAwBAmR,EAAAkH,UAAAlH,EAAAT,IAAA,SAAAhI,EAAA9E,GACA,OAAA8M,EAAApP,KAAA,IAAAyN,EAAArG,EAAA9E,GAAA0N,EAAAC,IAQAJ,EAAAmH,mBAAAnH,EAAAoH,KAAA,SAAA7P,EAAA9E,GACA,OAAA8M,EAAApP,KAAA,IAAAyN,EAAArG,EAAA9E,GAAA,MAmBAuN,EAAAqH,gBAAArH,EAAAtF,IAAA,SAAA7L,EAAArB,GACA,IAAA8Z,EACAC,EACAna,EACA0R,EAEA0I,EACAC,EACAC,EACAnQ,EACAD,EAAAnH,KAGA,IAFAtB,EAAA,IAAA+O,EAAA/O,IAEApB,IAAAoB,EAAA8Y,YACA,MAAAvX,MAAA6N,EAAA,4BAAAgC,EAAApR,IAOA,GAJA,MAAArB,MAAA,IAAAoQ,EAAApQ,IAEAga,EAAA3Y,EAAA8H,EAAA,IAEAW,EAAA7J,IAAA6J,EAAA7J,EAAA,OAAA6J,EAAA7J,EAAA,KAAA6J,EAAAX,GAAA,GAAAW,EAAA7J,EAAAoC,SAAAhB,EAAApB,IAAAoB,EAAApB,EAAA,GAIA,OADA8J,EAAA,IAAAqG,EAAArI,KAAAmF,KAAAuF,EAAA3I,GAAAkQ,EAAA,EAAAxI,EAAAnQ,IAAAoR,EAAApR,KACArB,EAAA+J,EAAAqQ,IAAApa,GAAA+J,EAKA,GAFAkQ,EAAA5Y,EAAAM,EAAA,EAEA3B,EAAA,CAEA,GAAAA,EAAAC,GAAAD,EAAAC,EAAA,IAAAD,EAAA2B,EAAA,WAAAyO,EAAA+I,MACAY,GAAAE,GAAAnQ,EAAAqQ,aAAAna,EAAAma,eACArQ,IAAAsQ,IAAApa,QAEO,IAAAqB,EAAA8H,EAAA,IAAAW,EAAAX,EAAA,GAAAW,EAAAX,GAAA,OAAAW,EAAAX,EACPW,EAAA7J,EAAA,MAAA+Z,GAAAlQ,EAAA7J,EAAA,SACA6J,EAAA7J,EAAA,SAAA+Z,GAAAlQ,EAAA7J,EAAA,gBAMA,OAJAqR,EAAAxH,EAAAnI,EAAA,GAAA6P,EAAAnQ,IAAA,IAEAyI,EAAAX,GAAA,IAAAmI,EAAA,EAAAA,GAEA,IAAAlB,EAAA6J,EAAA,EAAA3I,KACO6B,IAIP7B,EAAAhB,EAAA6C,EAAAvC,EAAA,IAcA,IAXAoJ,GACAF,EAAA,IAAA1J,EAAA,IACA6J,IAAA5Y,EAAAM,EAAA,GACAuY,EAAA1I,EAAAnQ,IAGA6Y,GADAta,EAAAmI,KAAAwR,KAAA9G,EAAApR,KACA,EAGA0I,EAAA,IAAAqG,EAAAsC,KAEa,CACb,GAAAwH,EAAA,CAEA,KADAnQ,IAAAsQ,MAAAvQ,IACA7J,EAAA,MAEAqR,EACAvH,EAAA9J,EAAAoC,OAAAiP,IAAAvH,EAAA9J,EAAAoC,OAAAiP,GACWyI,IACXhQ,IAAAqQ,IAAApa,IAIA,GAAAJ,EAAA,CAEA,QADAA,EAAA4Q,EAAA5Q,EAAA,IACA,MACAsa,EAAAta,EAAA,OAKA,GAFAwU,EADA/S,IAAAgZ,MAAAP,GACAzY,EAAA8H,EAAA,KAEA9H,EAAA8H,EAAA,GACA+Q,EAAA1I,EAAAnQ,OACW,CAEX,OADAzB,GAAA6S,EAAApR,IACA,MACA6Y,EAAAta,EAAA,EAIAkK,IAAAuQ,MAAAvQ,GAEAwH,EACAxH,EAAA7J,GAAA6J,EAAA7J,EAAAoC,OAAAiP,IAAAxH,EAAA7J,EAAAoC,OAAAiP,GACSyI,IACTjQ,IAAAsQ,IAAApa,IAIA,OAAA+Z,EAAAhQ,GACAkQ,IAAAlQ,EAAA2I,EAAAX,IAAAhI,IACA/J,EAAA+J,EAAAqQ,IAAApa,GAAAsR,EAAA8C,EAAArK,EAAAoJ,EAAAP,OAlGA0F,GAkGAvO,IAYAyI,EAAA8H,aAAA,SAAA9F,GACA,IAAAnT,EAAA,IAAA+O,EAAAzN,MAEA,OADA,MAAA6R,IAAA5B,EAAyCrB,EAAAiD,EAAA,KACzCJ,EAAA/S,IAAA8H,EAAA,EAAAqL,IAQAhC,EAAA+H,UAAA/H,EAAAgI,GAAA,SAAAzQ,EAAA9E,GACA,WAAA2E,EAAAjH,KAAA,IAAAyN,EAAArG,EAAA9E,KAOAuN,EAAAlH,SAAA,WACA,QAAA3I,KAAA1C,GAQAuS,EAAAiI,cAAAjI,EAAAmE,GAAA,SAAA5M,EAAA9E,GACA,OAAA2E,EAAAjH,KAAA,IAAAyN,EAAArG,EAAA9E,IAAA,GAQAuN,EAAAkI,uBAAAlI,EAAAmI,IAAA,SAAA5Q,EAAA9E,GACA,YAAAA,EAAA2E,EAAAjH,KAAA,IAAAyN,EAAArG,EAAA9E,MAAA,IAAAA,GAOAuN,EAAA2H,UAAA,WACA,QAAAxX,KAAA1C,GAAAgR,EAAAtO,KAAAwG,EAAAyH,GAAAjO,KAAA1C,EAAAoC,OAAA,GAQAmQ,EAAAoI,WAAApI,EAAAiE,GAAA,SAAA1M,EAAA9E,GACA,OAAA2E,EAAAjH,KAAA,IAAAyN,EAAArG,EAAA9E,IAAA,GAQAuN,EAAAqI,oBAAArI,EAAAsI,IAAA,SAAA/Q,EAAA9E,GACA,YAAAA,EAAA2E,EAAAjH,KAAA,IAAAyN,EAAArG,EAAA9E,MAAA,IAAAA,GAOAuN,EAAApN,MAAA,WACA,OAAAzC,KAAAhB,GAOA6Q,EAAAuI,WAAA,WACA,OAAApY,KAAAhB,EAAA,GAOA6Q,EAAAwI,WAAA,WACA,OAAArY,KAAAhB,EAAA,GAOA6Q,EAAAyI,OAAA,WACA,QAAAtY,KAAA1C,GAAA,GAAA0C,KAAA1C,EAAA,IAwBAuS,EAAA0I,MAAA,SAAAnR,EAAA9E,GACA,IAAArF,EACAsG,EACApF,EACAqa,EACArR,EAAAnH,KACAkH,EAAAC,EAAAnI,EAIA,GAFAsD,GADA8E,EAAA,IAAAqG,EAAArG,EAAA9E,IACAtD,GAEAkI,IAAA5E,EAAA,WAAAmL,EAAA+I,KAEA,GAAAtP,GAAA5E,EAEA,OADA8E,EAAApI,GAAAsD,EACA6E,EAAAoN,KAAAnN,GAGA,IAAAqR,EAAAtR,EAAAX,EAAAyH,EACAyK,EAAAtR,EAAAZ,EAAAyH,EACAQ,EAAAtH,EAAA7J,EACAoR,EAAAtH,EAAA9J,EAEA,IAAAmb,IAAAC,EAAA,CAEA,IAAAjK,IAAAC,EAAA,OAAAD,GAAArH,EAAApI,GAAAsD,EAAA8E,GAAA,IAAAqG,EAAAiB,EAAAvH,EAAAqP,KAEA,IAAA/H,EAAA,KAAAC,EAAA,GAEA,OAAAA,EAAA,IAAAtH,EAAApI,GAAAsD,EAAA8E,GAAA,IAAAqG,EAAAgB,EAAA,GAAAtH,EACA,GAAA8I,GAAA,KAQA,GAJAwI,EAAAnK,EAAAmK,GACAC,EAAApK,EAAAoK,GACAjK,IAAAxN,QAEAiG,EAAAuR,EAAAC,EAAA,CAWA,KAVAF,EAAAtR,EAAA,IACAA,KACA/I,EAAAsQ,IAEAiK,EAAAD,EACAta,EAAAuQ,GAGAvQ,EAAAyW,UAEAtS,EAAA4E,EAAmB5E,IAAKnE,EAAAkG,KAAA,IAIxBlG,EAAAyW,eAKA,IAFArR,GAAAiV,GAAAtR,EAAAuH,EAAA/O,SAAA4C,EAAAoM,EAAAhP,SAAAwH,EAAA5E,EAEA4E,EAAA5E,EAAA,EAAuBA,EAAAiB,EAAOjB,IAC9B,GAAAmM,EAAAnM,IAAAoM,EAAApM,GAAA,CACAkW,EAAA/J,EAAAnM,GAAAoM,EAAApM,GACA,MAUA,GAJAkW,IAAAra,EAAAsQ,IAAAC,IAAAvQ,EAAAiJ,EAAApI,GAAAoI,EAAApI,IACAsD,GAAAiB,EAAAmL,EAAAhP,SAAAzC,EAAAwR,EAAA/O,SAGA,OAAuB4C,IAAKmM,EAAAxR,KAAA,GAK5B,IAFAqF,EAAA0L,EAAA,EAEYzK,EAAA2D,GAAO,CACnB,GAAAuH,IAAAlL,GAAAmL,EAAAnL,GAAA,CACA,IAAAtG,EAAAsG,EAAqBtG,IAAAwR,IAAAxR,GAAewR,EAAAxR,GAAAqF,KAIpCmM,EAAAxR,GACAwR,EAAAlL,IAAAyK,EAGAS,EAAAlL,IAAAmL,EAAAnL,GAIA,KAAY,GAAAkL,EAAA,GAAYA,EAAA4F,OAAA,OAAAqE,GAKxB,OAAAjK,EAAA,GAUA2D,EAAAhL,EAAAqH,EAAAiK,IAPAtR,EAAApI,EAAA,GAAAiR,GAAA,IACA7I,EAAA9J,EAAA,CAAA8J,EAAAZ,EAAA,GACAY,IA8BAyI,EAAA8I,OAAA9I,EAAA4H,IAAA,SAAArQ,EAAA9E,GACA,IAAAwT,EACA9W,EACAmI,EAAAnH,KAGA,OAFAoH,EAAA,IAAAqG,EAAArG,EAAA9E,IAEA6E,EAAA7J,IAAA8J,EAAApI,GAAAoI,EAAA9J,IAAA8J,EAAA9J,EAAA,GACA,IAAAmQ,EAAA+I,MACOpP,EAAA9J,GAAA6J,EAAA7J,IAAA6J,EAAA7J,EAAA,GACP,IAAAmQ,EAAAtG,IAGA,GAAAoJ,GAGAvR,EAAAoI,EAAApI,EACAoI,EAAApI,EAAA,EACA8W,EAAA1G,EAAAjI,EAAAC,EAAA,KACAA,EAAApI,IACA8W,EAAA9W,MAEA8W,EAAA1G,EAAAjI,EAAAC,EAAA,EAAAmJ,IAGAnJ,EAAAD,EAAAoR,MAAAzC,EAAA4B,MAAAtQ,KAEA9J,EAAA,OAAAiT,IAAAnJ,EAAApI,EAAAmI,EAAAnI,GACAoI,IAwBAyI,EAAA+I,aAAA/I,EAAA6H,MAAA,SAAAtQ,EAAA9E,GACA,IAAAhF,EACAkJ,EACAvJ,EACAsG,EACAoL,EACAtR,EACAwb,EACA3D,EACAC,EACA2D,EACAC,EACAC,EACAC,EACAjE,EACAkE,EACA/R,EAAAnH,KACAyO,EAAAtH,EAAA7J,EACAoR,GAAAtH,EAAA,IAAAqG,EAAArG,EAAA9E,IAAAhF,EAEA,KAAAmR,GAAAC,GAAAD,EAAA,IAAAC,EAAA,IAeA,OAbAvH,EAAAnI,IAAAoI,EAAApI,GAAAyP,MAAA,KAAAC,SAAA,KAAAD,EACArH,EAAA9J,EAAA8J,EAAAZ,EAAAY,EAAApI,EAAA,MAEAoI,EAAApI,GAAAmI,EAAAnI,EAEAyP,GAAAC,GAGAtH,EAAA9J,EAAA,IACA8J,EAAAZ,EAAA,GAHAY,EAAA9J,EAAA8J,EAAAZ,EAAA,MAOAY,EAUA,IAPAZ,EAAA8H,EAAAnH,EAAAX,EAAAyH,GAAAK,EAAAlH,EAAAZ,EAAAyH,GACA7G,EAAApI,GAAAmI,EAAAnI,GACA6Z,EAAApK,EAAA/O,SACAoZ,EAAApK,EAAAhP,UAEAuZ,EAAAxK,IAAAC,IAAAuK,EAAAhc,EAAA4b,IAAAC,IAAA7b,GAEAA,EAAA4b,EAAAC,EAAAG,EAAA,GAAkChc,IAAKgc,EAAA5U,KAAA,IAOvC,IAHA2Q,EAAAhH,EACAkL,EAAA9K,EAEAnR,EAAA6b,IAAmB7b,GAAA,GAAU,CAK7B,IAJAK,EAAA,EACAyb,EAAArK,EAAAzR,GAAAic,EACAF,EAAAtK,EAAAzR,GAAAic,EAAA,EAEA3V,EAAAtG,GAAA0R,EAAAkK,GAAgCtV,EAAAtG,GAKhCK,IADA4X,EAAA6D,GAHA7D,EAAAzG,IAAAE,GAAAuK,IAEA7b,EAAA2b,EAAA9D,GADAC,EAAA1G,EAAAE,GAAAuK,EAAA,GACAH,GACAG,IAAAD,EAAA1V,GAAAjG,GACA0X,EAAA,IAAA3X,EAAA6b,EAAA,GAAAF,EAAA7D,EACA8D,EAAA1V,KAAA2R,EAAAF,EAGAiE,EAAA1V,GAAAjG,EASA,OANAA,IACAkJ,EAEAyS,EAAA5E,OAAA,KAGAjC,EAAAhL,EAAA6R,EAAAzS,IAQAqJ,EAAAsJ,QAAA,WACA,IAAAhS,EAAA,IAAAsG,EAAAzN,MAEA,OADAmH,EAAAnI,GAAAmI,EAAAnI,GAAA,KACAmI,GAwBA0I,EAAA0E,KAAA,SAAAnN,EAAA9E,GACA,IAAAnE,EACAgJ,EAAAnH,KACAkH,EAAAC,EAAAnI,EAIA,GAFAsD,GADA8E,EAAA,IAAAqG,EAAArG,EAAA9E,IACAtD,GAEAkI,IAAA5E,EAAA,WAAAmL,EAAA+I,KAEA,GAAAtP,GAAA5E,EAEA,OADA8E,EAAApI,GAAAsD,EACA6E,EAAAoR,MAAAnR,GAGA,IAAAqR,EAAAtR,EAAAX,EAAAyH,EACAyK,EAAAtR,EAAAZ,EAAAyH,EACAQ,EAAAtH,EAAA7J,EACAoR,EAAAtH,EAAA9J,EAEA,IAAAmb,IAAAC,EAAA,CAEA,IAAAjK,IAAAC,EAAA,WAAAjB,EAAAvG,EAAA,GAGA,IAAAuH,EAAA,KAAAC,EAAA,UAAAA,EAAA,GAAAtH,EAAA,IAAAqG,EAAAgB,EAAA,GAAAtH,EAAA,EAAAD,GAOA,GAJAuR,EAAAnK,EAAAmK,GACAC,EAAApK,EAAAoK,GACAjK,IAAAxN,QAEAiG,EAAAuR,EAAAC,EAAA,CAWA,IAVAxR,EAAA,GACAwR,EAAAD,EACAta,EAAAuQ,IAEAxH,KACA/I,EAAAsQ,GAGAtQ,EAAAyW,UAEc1N,IAAK/I,EAAAkG,KAAA,IAInBlG,EAAAyW,UAQA,KALA1N,EAAAuH,EAAA/O,SACA4C,EAAAoM,EAAAhP,QAEA,IAAAvB,EAAAuQ,IAAAD,IAAAtQ,EAAAmE,EAAA4E,GAEAA,EAAA,EAAiB5E,GACjB4E,GAAAuH,IAAAnM,GAAAmM,EAAAnM,GAAAoM,EAAApM,GAAA4E,GAAA8G,EAAA,EACAS,EAAAnM,GAAA0L,IAAAS,EAAAnM,GAAA,EAAAmM,EAAAnM,GAAA0L,EAUA,OAPA9G,IACAuH,EAAA,CAAAvH,GAAAG,OAAAoH,KACAiK,GAKAtG,EAAAhL,EAAAqH,EAAAiK,IAmBA7I,EAAAuJ,UAAAvJ,EAAAyC,GAAA,SAAAA,EAAAT,GACA,IAAAvU,EACAoB,EACA2U,EACAlM,EAAAnH,KAEA,SAAAsS,WAGA,OAFA1D,EAAA0D,EAAA,EAAAjE,GACA,MAAAwD,IAAA5B,EAA2CrB,EAAAiD,EAAA,KAC3CJ,EAAA,IAAAhE,EAAAtG,GAAAmL,EAAAT,GAGA,KAAAvU,EAAA6J,EAAA7J,GAAA,YAIA,GAFAoB,GADA2U,EAAA/V,EAAAoC,OAAA,GACAuO,EAAA,EAEAoF,EAAA/V,EAAA+V,GAAA,CAEA,KAAcA,EAAA,MAAaA,GAAA,GAAA3U,KAK3B,IAAA2U,EAAA/V,EAAA,GAAsB+V,GAAA,GAASA,GAAA,GAAA3U,MAM/B,OADA4T,GAAAnL,EAAAX,EAAA,EAAA9H,MAAAyI,EAAAX,EAAA,GACA9H,GAYAmR,EAAAwJ,UAAA,SAAA1K,GAEA,OADAC,EAAAD,GAAAT,KACAlO,KAAA0X,MAAA,KAAA/I,IAeAkB,EAAAyJ,WAAAzJ,EAAA0J,KAAA,WACA,IAAAlc,EACAqB,EACAX,EACAyb,EACArb,EACAgJ,EAAAnH,KACA1C,EAAA6J,EAAA7J,EACA0B,EAAAmI,EAAAnI,EACAwH,EAAAW,EAAAX,EACA0N,EAAAlE,EAAA,EACAmH,EAAA,IAAA1J,EAAA,OAEA,OAAAzO,IAAA1B,MAAA,GACA,WAAAmQ,GAAAzO,KAAA,KAAA1B,KAAA,IAAAkZ,IAAAlZ,EAAA6J,EAAA,KA6BA,GAtBA,IAHAnI,EAAAoG,KAAAmU,MAAAzJ,EAAA3I,MAGAnI,GAAA,OACAN,EAAA6P,EAAAjR,IACAoC,OAAA8G,GAAA,OAAA9H,GAAA,KACAM,EAAAoG,KAAAmU,MAAA7a,GACA8H,EAAA8H,GAAA9H,EAAA,OAAAA,EAAA,GAAAA,EAAA,GASAzI,EAAA,IAAA0P,EANA/O,EADAM,GAAA,IACA,KAAAwH,GAEA9H,EAAAM,EAAA8P,iBACA7N,MAAA,EAAAvC,EAAAiE,QAAA,QAAA6D,IAKAzI,EAAA,IAAA0P,EAAAzO,EAAA,IAOAjB,EAAAT,EAAA,GAKA,KAHA0B,GADAwH,EAAAzI,EAAAyI,GACA0N,GACA,IAAAlV,EAAA,KAMA,GAHAb,EAAAJ,EACAA,EAAAoZ,EAAAO,MAAAvZ,EAAAoW,KAAAnF,EAAAjI,EAAAhJ,EAAA+V,EAAA,KAEA3F,EAAApQ,EAAAb,GAAA2D,MAAA,EAAAjC,MAAAN,EAAA6P,EAAAxQ,EAAAT,IAAA2D,MAAA,EAAAjC,GAAA,CASA,GALAjB,EAAAyI,OAAAxH,EAKA,SAJAN,IAAAuC,MAAAjC,EAAA,EAAAA,EAAA,MAIAwa,GAAA,QAAA9a,GAea,EAGbA,OAAAuC,MAAA,SAAAvC,EAAAqQ,OAAA,MAEA0C,EAAA1T,IAAAyI,EAAAwJ,EAAA,KACA3S,GAAAU,EAAA2Z,MAAA3Z,GAAA8Z,GAAA1Q,IAGA,MArBA,IAAAqS,IACA/H,EAAAtT,IAAAqI,EAAAwJ,EAAA,KAEA7R,EAAAuZ,MAAAvZ,GAAA0Z,GAAA1Q,IAAA,CACApJ,EAAAI,EACA,MAIA+V,GAAA,EACAlV,GAAA,EACAwa,EAAA,EAgBA,OAAA/H,EAAA1T,IAAAyI,EAAAwJ,EAAA,EAAAC,EAAA5S,IAaAwS,EAAAf,cAAA,SAAAoF,EAAArC,GAMA,OALA,MAAAqC,IACAtF,EAAAsF,EAAA,EAAA7F,GACA6F,KAGAtC,EAAA5R,KAAAkU,EAAArC,EAAA,IAgBAhC,EAAA4J,QAAA,SAAAvF,EAAArC,GAMA,OALA,MAAAqC,IACAtF,EAAAsF,EAAA,EAAA7F,GACA6F,IAAAlU,KAAAwG,EAAA,GAGAoL,EAAA5R,KAAAkU,EAAArC,IA6BAhC,EAAA6J,SAAA,SAAAxF,EAAArC,EAAAD,GACA,IAAAzN,EACAgD,EAAAnH,KAEA,SAAA4R,EACA,MAAAsC,GAAArC,GAAA,UAAAxE,EAAAwE,IACAD,EAAAC,EACAA,EAAA,MACSqC,GAAA,UAAA7G,EAAA6G,IACTtC,EAAAsC,EACAA,EAAArC,EAAA,MAEAD,EAAAnB,OAEO,aAAApD,EAAAuE,GACP,MAAA3R,MAAA6N,EAAA,2BAAA8D,GAKA,GAFAzN,EAAAgD,EAAAsS,QAAAvF,EAAArC,GAEA1K,EAAA7J,EAAA,CACA,IAAAL,EACA4F,EAAAsB,EAAAwV,MAAA,KACAC,GAAAhI,EAAAjB,UACAkJ,GAAAjI,EAAAhB,mBACAC,EAAAe,EAAAf,gBAAA,GACAiJ,EAAAjX,EAAA,GACAkX,EAAAlX,EAAA,GACAmX,EAAA7S,EAAAnI,EAAA,EACAib,EAAAD,EAAAF,EAAA7Y,MAAA,GAAA6Y,EACAzY,EAAA4Y,EAAAva,OAGA,GAFAma,IAAA5c,EAAA2c,IAAAC,IAAA5c,EAAAoE,GAAApE,GAEA2c,EAAA,GAAAvY,EAAA,GAIA,IAHApE,EAAAoE,EAAAuY,KACAE,EAAAG,EAAAlW,OAAA,EAAA9G,GAEgBA,EAAAoE,EAASpE,GAAA2c,EACzBE,GAAAjJ,EAAAoJ,EAAAlW,OAAA9G,EAAA2c,GAGAC,EAAA,IAAAC,GAAAjJ,EAAAoJ,EAAAhZ,MAAAhE,IACA+c,IAAAF,EAAA,IAAAA,GAGA3V,EAAA4V,EAAAD,GAAAlI,EAAAd,kBAAA,MAAA+I,GAAAjI,EAAAb,mBAAAgJ,EAAAhN,QAAA,IAAAmN,OAAA,OAAkJL,EAAA,OAAW,WAAAjI,EAAAZ,wBAAA,KAAA+I,GAAAD,EAG7J,OAAAlI,EAAAlB,QAAA,IAAAvM,GAAAyN,EAAAX,QAAA,KAeApB,EAAAsK,WAAA,SAAAC,GACA,IAAA7c,EACA8c,EACAC,EACAC,EACA/T,EACAgU,EACA9b,EACA+b,EACAC,EACA5E,EACA/X,EACAiB,EACAmI,EAAAnH,KACAyO,EAAAtH,EAAA7J,EAEA,SAAA8c,MACA1b,EAAA,IAAA+O,EAAA2M,IAEA5C,cAAA9Y,EAAApB,GAAA,IAAAoB,EAAAM,IAAAN,EAAAoV,GAAA/D,IACA,MAAA9P,MAAA6N,EAAA,aAAApP,EAAA8Y,YAAA,qCAAA1H,EAAApR,IAIA,IAAA+P,EAAA,WAAAhB,EAAAtG,GAgBA,IAfA5J,EAAA,IAAAkQ,EAAAsC,GACA2K,EAAAL,EAAA,IAAA5M,EAAAsC,GACAuK,EAAAG,EAAA,IAAAhN,EAAAsC,GACA/Q,EAAAuP,EAAAE,GAGAjI,EAAAjJ,EAAAiJ,EAAAxH,EAAAU,OAAAyH,EAAAX,EAAA,EACAjJ,EAAAD,EAAA,GAAA6Q,GAAAqM,EAAAhU,EAAAyH,GAAA,EAAAA,EAAAuM,KACAJ,MAAA1b,EAAAmY,WAAAtZ,GAAA,EAAAiJ,EAAA,EAAAjJ,EAAAmd,EAAAhc,EACA8b,EAAAnK,EACAA,EAAA,IACA3R,EAAA,IAAA+O,EAAAzO,GAEAyb,EAAAnd,EAAA,KAGAwY,EAAA1G,EAAA1Q,EAAAnB,EAAA,KAEA,IADAgd,EAAAF,EAAA9F,KAAAuB,EAAA4B,MAAA4C,KACAzD,WAAAuD,IACAC,EAAAC,EACAA,EAAAC,EACAG,EAAAD,EAAAlG,KAAAuB,EAAA4B,MAAA6C,EAAAG,IACAD,EAAAF,EACAhd,EAAAmB,EAAA6Z,MAAAzC,EAAA4B,MAAA6C,EAAAhd,IACAmB,EAAA6b,EAWA,OARAA,EAAAnL,EAAAgL,EAAA7B,MAAA8B,GAAAC,EAAA,KACAG,IAAAlG,KAAAgG,EAAA7C,MAAAgD,IACAL,IAAA9F,KAAAgG,EAAA7C,MAAA4C,IACAG,EAAAzb,EAAA0b,EAAA1b,EAAAmI,EAAAnI,EAGAjB,EAAAqR,EAAAsL,EAAAJ,EAFA9T,GAAA,EAEAyJ,GAAAsI,MAAApR,GAAAyP,MAAAC,WAAAzH,EAAAqL,EAAAJ,EAAA7T,EAAAyJ,GAAAsI,MAAApR,GAAAyP,OAAA,GAAA8D,EAAAJ,GAAA,CAAAG,EAAAJ,GACAhK,EAAAmK,EACAzc,GAOA8R,EAAA8K,SAAA,WACA,OAAA7K,EAAA9P,OAeA6P,EAAA+K,YAAA,SAAAtI,EAAAT,GAEA,OADA,MAAAS,GAAA1D,EAAA0D,EAAA,EAAAjE,GACAuD,EAAA5R,KAAAsS,EAAAT,EAAA,IAeAhC,EAAA9N,SAAA,SAAAO,GACA,IAAA6B,EACAzF,EAAAsB,KACAhB,EAAAN,EAAAM,EACAwH,EAAA9H,EAAA8H,EAsBA,OApBA,OAAAA,EACAxH,GACAmF,EAAA,WACAnF,EAAA,IAAAmF,EAAA,IAAAA,IAEAA,EAAA,OAGAA,EAAAoK,EAAA7P,EAAApB,GAEA,MAAAgF,EACA6B,EAAAqC,GAAA0J,GAAA1J,GAAA2J,EAAArB,EAAA3K,EAAAqC,GAAAwI,EAAA7K,EAAAqC,EAAA,MAEAoI,EAAAtM,EAAA,EAAA4O,EAAAxR,OAAA,QACAyE,EAAAkL,EAAAL,EAAA7K,EAAAqC,EAAA,QAAAlE,EAAAtD,GAAA,IAGAA,EAAA,GAAAN,EAAApB,EAAA,KAAA6G,EAAA,IAAAA,IAGAA,GAQA0L,EAAAC,QAAAD,EAAAjH,OAAA,WACA,OAAAkH,EAAA9P,OAGA6P,EAAA+D,cAAA,EAEA,mBAAA5V,QAAA,UAAAqP,EAAArP,OAAAsP,YACAuC,EAAA7R,OAAAC,aAAA,YAEA4R,EAAA7R,OAAA6c,IAAA,+BAAAhL,EAAAC,SAGA,MAAAX,GAAA1B,EAAAjB,IAAA2C,GACA1B,EAsHAyB,IACA,QAAAzB,mBAKKhN,KAFD2M,EAAA,WACJ,OAAAK,GACKrQ,KAAAX,EAAAM,EAAAN,EAAAC,QAAAD,QAAA2Q,GAjpFL,iCCJA,IAAM0N,EAAYC,EAAQ,GAE1Bte,EAAQue,GAAK,CACXC,QAAS,EACTC,QAAS,EACTC,YAAa,EACbC,YAAa,EACbC,MAAO,EACPC,IAAK,EACLC,IAAK,EACLC,aAAc,GAGhB/e,EAAQ8e,IAAM,CACZE,YAAa,EACbC,WAAY,EACZC,WAAY,EACZC,WAAY,EACZC,aAAc,EACdC,SAAU,EACVC,mBAAoB,GACpBC,gBAAiB,GACjBC,gBAAiB,GACjBC,KAAM,GACNC,IAAK,GACLC,UAAW,GACXC,OAAQ,GACRC,OAAQ,GACRC,KAAM,IAGR9f,EAAQ+f,SAAW,CACjBC,KAAM,EACN1M,IAAK,GACL2M,IAAK,GACLC,KAAM,GACNC,MAAO,GACPC,WAAY,IAGdpgB,EAAQqgB,OAAS,CACfC,MAAO,GACPC,KAAM,GACNC,KAAM,GACNC,UAAW,IAGbzgB,EAAQ0gB,KAAO,CACbF,KAAMjf,OAAO,QACbkf,UAAWlf,OAAO,SAClBof,OAAQpf,OAAO,UACfqf,MAAOrf,OAAO,SACdsf,OAAQtf,OAAO,WAGjBvB,EAAQ8gB,QAAUnY,KAAKmF,IAAI,EAAG,IAC9B9N,EAAQ+gB,QAAUpY,KAAKmF,IAAI,EAAG,IAE9B9N,EAAQghB,cAAgB,QACxBhhB,EAAQihB,QAAU,IAAI5C,GAAW,GACjCre,EAAQkhB,IAAM,IAAI7C,EAAU,IAC5Bre,EAAQigB,IAAM,IAAI5B,EAAU,GAE5Bre,EAAQ2gB,OAAS,CACf/B,MAAO,EACPuC,OAAQ,EACRtC,IAAK,EACLC,IAAK,EACLJ,YAAa,EACbC,YAAa,kCCvEf,SAAA9b,GAEA,IAAMwb,EAAYC,EAAQ,GAEpB8C,EAAY9C,EAAQ,GACpBwC,EAAUM,EAAUN,QACpBC,EAAUK,EAAUL,QAG1B/gB,EAAQqhB,UAAY,SAAoB3a,GACtC,IAAIqX,EAAKuD,EAAMlJ,EAIf,OAHAA,EAAgB,IAAT1R,EAAI,IAAa,EAAI,EAC5BqX,GAAgB,IAATrX,EAAI,KAAc,EACzB4a,GAAkB,EAAT5a,EAAI,KAAc,EAAKA,EAAI,GAC/BqX,EAEc,KAARA,EACF3F,GAAQkJ,EAAO,IAAQ,UAEvBlJ,EAAOzP,KAAKmF,IAAI,EAAGiQ,EAAM,KAAO,KAAOuD,GAJhC,qBAAPlJ,EAA+BkJ,GAgB1CthB,EAAQuhB,uBAAyB,SAAU7a,GAGzC,IAFA,IATczE,EASR2C,EAAM8B,EAAI3C,WACZ8E,EAAM,GACDrI,EAAI,EAAGA,EAAIoE,EAAKpE,IACvBqI,IAZY5G,EAYCyE,EAAIlG,IAXX,GACC,IAAMyB,EAAEqD,SAAS,IAGnBrD,EAAEqD,SAAS,IAUlB,OAAO,IAAI+Y,EAAUxV,EAAK,KAI5B7I,EAAQwhB,SAAW,SAAC9c,GAIlB,IAHA,IAAMmE,EAAM,IAAI4Y,IACVC,EAAOxgB,OAAOwgB,KAAKhd,GACnBzB,EAASye,EAAKze,OACXzC,EAAI,EAAGA,EAAIyC,EAAQzC,IAC1BqI,EAAIkH,IAAI2R,EAAKlhB,GAAIkE,EAAIgd,EAAKlhB,KAE5B,OAAOqI,GAGT7I,EAAQ2hB,WAAa,SAACC,EAAGC,GACvB,OAAOD,EAAIb,EAAUc,GAGvB7hB,EAAQ8hB,WAAa,SAACC,EAAIC,EAAI7E,EAAIC,GAChC,IAAMwE,EAAI5hB,EAAQ2hB,WAAWI,EAAIC,GAC3BH,EAAI7hB,EAAQ2hB,WAAWxE,EAAIC,GAEjC,OAAIwE,EArDgB,QAsDX,IAAIvD,EAAUuD,GAAG3G,MAAM6F,GAAShJ,KAAK+J,GAEpCD,EAAId,EAAWe,GAI3B7hB,EAAQiiB,UAAY,SAAoBvb,EAAKgU,GAc3C,IAAMwH,EAAMrf,EAAOY,YAAY,GAC/Bye,EAAIvS,aAAa+K,EAAM,GACvB,IAAMyH,EAAID,EAAItU,aAAa,GAK3B,GAAqB,IAAZ,KAAJuU,GACH,OAAO,EAOT,IAAIC,EAAOD,GAAK,GAAM,MAChBpE,EAAOoE,GAAK,GAAM,IAClBb,EAAW,QAAJa,EASb,GAAKpE,GAAO,KAASA,GAAO,IAC1BqE,IAASrE,EAAM,KAAQ,KAAOuD,GAAQ,QAMjC,MAAKvD,GAAO,KAASA,EAAM,KAchC,OAAO,EAbP,GAAIuD,GAAS,GAAM,IAAMvD,GAAQ,EAC/B,OAAO,EAETqE,GAASd,EAAO,SAAc,IAAMvD,EAiBtC,OADArX,EAAIoI,cAAcsT,EAAK,IAChB,GAGTpiB,EAAQqiB,UAAY,SAAU5X,EAAG5E,GAC/B,IAAIyc,EAAO7X,EAAE,GAAG1G,WACZwe,EAAO1c,EAAE,GAAG9B,WAEhB,OAAIue,EAAOC,EACF,EAGLA,EAAOD,GACD,EAGH7X,EAAE,GAAGD,QAAQ3E,EAAE,KAIxB7F,EAAQwiB,eAAiB,SAAC9X,GACxB,OAAa,IAANA,GAAY,EAAIA,EAAI,GAG7B1K,EAAQyiB,aAAe,SAACxgB,GACtB,IAAIygB,EAAQ,EAGZ,GAAIzgB,KAAOA,EAAKA,EAAI,GAClB,OAAOA,EAGT,KAAa,IAANA,GACLA,IAAM,EACNygB,GAAS,EAGX,OAAO,GAAKA,0DCzKd,SAAA9R,EAAAlM,GAAwU,OAAtOkM,EAA3E,mBAAArP,QAAA,iBAAAA,OAAAsP,SAA2E,SAAAnM,GAAkC,cAAAA,GAA+B,SAAAA,GAAkC,OAAAA,GAAA,mBAAAnD,QAAAmD,EAAAoM,cAAAvP,QAAAmD,IAAAnD,OAAAa,UAAA,gBAAAsC,IAAmIA,GAExU,IAAAmd,EAEAA,EAAA,WACA,OAAAte,KADA,GAIA,IAEAse,KAAA,IAAAc,SAAA,iBACC,MAAA5Y,GAED,gCAAA3J,OAAA,YAAAwQ,EAAAxQ,WAAAyhB,EAAAzhB,QAMAH,EAAAD,QAAA6hB,gCCnBA7hB,EAAAyG,KAAA,SAAA1B,EAAAiC,EAAA4b,EAAAC,EAAAC,GACA,IAAA/Y,EAAAnJ,EACAmiB,EAAA,EAAAD,EAAAD,EAAA,EACAG,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAE,GAAA,EACA1iB,EAAAoiB,EAAAE,EAAA,IACAhiB,EAAA8hB,GAAA,IACArgB,EAAAwC,EAAAiC,EAAAxG,GAMA,IALAA,GAAAM,EACAiJ,EAAAxH,GAAA,IAAA2gB,GAAA,EACA3gB,KAAA2gB,EACAA,GAAAH,EAEQG,EAAA,EAAWnZ,EAAA,IAAAA,EAAAhF,EAAAiC,EAAAxG,MAAAM,EAAAoiB,GAAA,GAMnB,IAJAtiB,EAAAmJ,GAAA,IAAAmZ,GAAA,EACAnZ,KAAAmZ,EACAA,GAAAL,EAEQK,EAAA,EAAWtiB,EAAA,IAAAA,EAAAmE,EAAAiC,EAAAxG,MAAAM,EAAAoiB,GAAA,GAEnB,OAAAnZ,EACAA,EAAA,EAAAkZ,MACG,IAAAlZ,IAAAiZ,EACH,OAAApiB,EAAAmZ,IAAA7J,KAAA3N,GAAA,KAEA3B,GAAA+H,KAAAmF,IAAA,EAAA+U,GACA9Y,GAAAkZ,EAGA,OAAA1gB,GAAA,KAAA3B,EAAA+H,KAAAmF,IAAA,EAAA/D,EAAA8Y,IAGA7iB,EAAAuE,MAAA,SAAAQ,EAAAtD,EAAAuF,EAAA4b,EAAAC,EAAAC,GACA,IAAA/Y,EAAAnJ,EAAAC,EACAkiB,EAAA,EAAAD,EAAAD,EAAA,EACAG,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAG,EAAA,KAAAN,EAAAla,KAAAmF,IAAA,OAAAnF,KAAAmF,IAAA,SACAtN,EAAAoiB,EAAA,EAAAE,EAAA,EACAhiB,EAAA8hB,EAAA,KACArgB,EAAAd,EAAA,OAAAA,GAAA,EAAAA,EAAA,MAqCA,IApCAA,EAAAkH,KAAAwR,IAAA1Y,GAEAuE,MAAAvE,QAAAyO,KACAtP,EAAAoF,MAAAvE,GAAA,IACAsI,EAAAiZ,IAEAjZ,EAAApB,KAAAiG,MAAAjG,KAAAya,IAAA3hB,GAAAkH,KAAA0a,KAEA5hB,GAAAZ,EAAA8H,KAAAmF,IAAA,GAAA/D,IAAA,IACAA,IACAlJ,GAAA,IAIAY,GADAsI,EAAAkZ,GAAA,EACAE,EAAAtiB,EAEAsiB,EAAAxa,KAAAmF,IAAA,IAAAmV,IAGApiB,GAAA,IACAkJ,IACAlJ,GAAA,GAGAkJ,EAAAkZ,GAAAD,GACApiB,EAAA,EACAmJ,EAAAiZ,GACKjZ,EAAAkZ,GAAA,GACLriB,GAAAa,EAAAZ,EAAA,GAAA8H,KAAAmF,IAAA,EAAA+U,GACA9Y,GAAAkZ,IAEAriB,EAAAa,EAAAkH,KAAAmF,IAAA,EAAAmV,EAAA,GAAAta,KAAAmF,IAAA,EAAA+U,GACA9Y,EAAA,IAIQ8Y,GAAA,EAAW9d,EAAAiC,EAAAxG,GAAA,IAAAI,EAAAJ,GAAAM,EAAAF,GAAA,IAAAiiB,GAAA,GAKnB,IAHA9Y,KAAA8Y,EAAAjiB,EACAmiB,GAAAF,EAEQE,EAAA,EAAUhe,EAAAiC,EAAAxG,GAAA,IAAAuJ,EAAAvJ,GAAAM,EAAAiJ,GAAA,IAAAgZ,GAAA,GAElBhe,EAAAiC,EAAAxG,EAAAM,IAAA,IAAAyB,kCCxFA,SAAAM,EAAAL,yKAEA,IAAME,EAAU4b,EAAQ,GAClBD,EAAYC,EAAQ,GAEpBgF,EAAShF,EAAQ,IACjBiF,EAAQjF,EAAQ,GAChBzd,EAAIyd,EAAQ,GACZkF,EAASlF,EAAQ,GACjBmF,EAASnF,EAAQ,GACfoF,EAAQpF,EAAQ,GAAhBoF,IAKFC,aAKJ,SAAAA,EAAaC,gGAAMC,CAAAtgB,KAAAogB,KACjBC,EAAOA,GAAQ,IAELve,MAAQue,EAAKve,KAAO,MAC5Bue,EAAKve,KAAO,MAGZue,EAAKve,KAAOke,EAAMd,aAAamB,EAAKve,MAItC9B,KAAKugB,MAAQ,IAAIlgB,YAAYggB,EAAKve,MAClC9B,KAAKwgB,OAAS,IAAI5gB,WAAWI,KAAKugB,OAClCvgB,KAAKygB,QAAUnhB,EAAOa,KAAKH,KAAKugB,OAEhCvgB,KAAK0gB,SAGL1gB,KAAK2gB,WAAahjB,OAAOijB,OAAO,CAC9BC,EAAG,SAACpf,GAAD,OAAS,IAAIqf,KAAKrf,IACrBsf,EAAG,SAACtf,GAAD,OAAS,IAAIqf,KAAW,IAANrf,IACrBuf,EAAG,SAACvf,GAAD,OAASue,EAAMhC,uBAAuBvc,IACzCwf,EAAG,SAACxf,GAAD,OAASnE,EAAEogB,QAAQnF,MAAMyH,EAAMhC,uBAAuBvc,KACzDyf,EAAG,SAAC7N,GAEF,OAAO/V,EAAEqgB,IAAIpT,IAAI8I,EAAE,IAAIqE,MAAMrE,EAAE,KAEjC8N,EAAG,SAAC9N,GAEF,OAAO/V,EAAEof,IAAInS,IAAI8I,EAAE,IAAIqE,MAAMrE,EAAE,KAEjC+N,GAAI,SAAC3f,GAAD,OAAS,IAAI0e,EAAI1e,IACrB4f,GAAI,SAAC5f,GAAD,OAAS,IAAIyY,OAAOzY,KACvB4e,EAAKiB,MAGRthB,KAAK+f,OAASA,EAAO9gB,EAAQ,CAC3B4gB,IAAK0B,QAAQ1B,IAAIphB,KAAK8iB,SACtBC,QAASxhB,KAAKwhB,QAAQ/iB,KAAKuB,MAC3ByhB,UAAWzhB,KAAKyhB,UAAUhjB,KAAKuB,MAC/B0hB,aAAc1hB,KAAK0hB,aAAajjB,KAAKuB,MACrC2hB,UAAW3hB,KAAK2hB,UAAUljB,KAAKuB,MAC/B4hB,aAAc5hB,KAAK4hB,aAAanjB,KAAKuB,MACrC6hB,UAAW7hB,KAAK6hB,UAAUpjB,KAAKuB,MAC/B8hB,gBAAiB9hB,KAAK8hB,gBAAgBrjB,KAAKuB,MAC3C+hB,gBAAiB/hB,KAAK+hB,gBAAgBtjB,KAAKuB,MAC3CgiB,SAAUhiB,KAAKgiB,SAASvjB,KAAKuB,MAC7BiiB,UAAWjiB,KAAKiiB,UAAUxjB,KAAKuB,MAC/BkiB,cAAeliB,KAAKkiB,cAAczjB,KAAKuB,MACvCmiB,SAAUniB,KAAKmiB,SAAS1jB,KAAKuB,MAC7BoiB,aAAcpiB,KAAKoiB,aAAa3jB,KAAKuB,MACrCqiB,gBAAiBriB,KAAKqiB,gBAAgB5jB,KAAKuB,MAC3CsiB,QAAStiB,KAAKsiB,QAAQ7jB,KAAKuB,MAC3BuiB,WAAYviB,KAAKuiB,WAAW9jB,KAAKuB,MACjCwiB,eAAgBxiB,KAAKwiB,eAAe/jB,KAAKuB,MACzCyiB,oBAAqBziB,KAAKyiB,oBAAoBhkB,KAAKuB,MACnD0iB,sBAAuB1iB,KAAK0iB,sBAAsBjkB,KAAKuB,MACvD2iB,sBAAuB3iB,KAAK2iB,sBAAsBlkB,KAAKuB,MACvD4iB,gBAAiB5iB,KAAK4iB,gBAAgBnkB,KAAKuB,MAC3C6iB,qBAAsB7iB,KAAK6iB,qBAAqBpkB,KAAKuB,MACrD8iB,uBAAwB9iB,KAAK8iB,uBAAuBrkB,KAAKuB,MACzD+iB,uBAAwB/iB,KAAK+iB,uBAAuBtkB,KAAKuB,MACzDgjB,eAAgBhjB,KAAKgjB,eAAevkB,KAAKuB,MACzCijB,oBAAqBjjB,KAAKijB,oBAAoBxkB,KAAKuB,MACnDkjB,eAAgBljB,KAAKkjB,eAAezkB,KAAKuB,MACzCmjB,oBAAqBnjB,KAAKmjB,oBAAoB1kB,KAAKuB,MACnDojB,qBAAsBpjB,KAAKojB,qBAAqB3kB,KAAKuB,MACrDqjB,kBAAmBrjB,KAAKqjB,kBAAkB5kB,KAAKuB,MAC/CsjB,aAActjB,KAAKsjB,aAAa7kB,KAAKuB,MACrCujB,cAAevjB,KAAKujB,cAAc9kB,KAAKuB,MACvCwjB,cAAexjB,KAAKwjB,cAAc/kB,KAAKuB,MACvCyjB,UAAWzjB,KAAKyjB,UAAUhlB,KAAKuB,OAC9BA,KAAKugB,4DAofKmD,EAAOC,GAMpB,MALqB,iBAAVD,IACTA,EAAQpkB,EAAOa,KAAKujB,EAAOC,GAAO,QAGxB,IAAIvD,EAAQ,CAAEte,KAAM4hB,EAAMhkB,SAC3BkkB,YAAYF,qCAUPA,EAAOC,GAMvB,MALqB,iBAAVD,IACTA,EAAQpkB,EAAOa,KAAKujB,EAAOC,GAAO,QAGxB,IAAIvD,EAAQ,CAAEte,KAAM4hB,EAAMhkB,SAC3BmkB,UAAUH,+CAzfrB,IAAI3kB,EAAIiB,KAAK8jB,SAASzR,MAEtB,GAAItT,EAAEW,OAAS,EACb,MAAM,IAAIO,MAAJ,WAAAoH,OAAqBtI,EAAEW,OAAvB,cAGR,OAAQX,EAAE2C,MACR,KAAKpE,EAAE8f,OAAO7B,IACZvb,KAAK+jB,MACH/jB,KAAKgkB,UAAUjlB,EAAEklB,IAAI,GAAIllB,EAAEklB,IAAI,KAEjC,MACF,KAAK3mB,EAAE8f,OAAOjC,YACZnb,KAAK+jB,MAAM/jB,KAAKkkB,iBAAiBnlB,EAAEklB,IAAKllB,EAAEW,SAC1C,MACF,KAAKpC,EAAE8f,OAAOhC,YACZpb,KAAK+jB,MAAM/jB,KAAKmkB,iBAAiBplB,EAAEklB,IAAKllB,EAAEW,SAC1C,MACF,KAAKpC,EAAE8f,OAAO9B,IACZ,GAAIvc,EAAEqlB,OAAS,EAAI,EACjB,MAAM,IAAInkB,MAAM,qCAElBD,KAAK+jB,MAAM/jB,KAAKqkB,UAAUtlB,EAAEklB,IAAKllB,EAAEW,SACnC,MACF,KAAKpC,EAAE8f,OAAOQ,OACZ,GAAI7e,EAAEqlB,OAAS,EAAI,EACjB,MAAM,IAAInkB,MAAM,qCAElBD,KAAK+jB,MAAM/jB,KAAKskB,aAAavlB,EAAEklB,IAAKllB,EAAEW,SACtC,MACF,KAAKpC,EAAE8f,OAAO/B,MACZrb,KAAK+jB,MAAM/jB,KAAKukB,YAAYxlB,EAAEklB,IAAKllB,EAAEW,SAMrCM,KAAKwkB,gBAAkBxkB,KAAKwkB,eAAe9iB,OAASpE,EAAE8f,OAAO7B,KAC/Dvb,KAAKykB,sCAMP,IAAM1lB,EAAIiB,KAAKwkB,eAGXzlB,EAAEW,OAAS,IAIfX,EAAEW,SAGe,IAAbX,EAAEW,QACJM,KAAK0kB,8CAKFjjB,EAAKkjB,GACV,IAAM5lB,EAAIiB,KAAKwkB,eAGf,OAFAzlB,EAAEqlB,SAEMrlB,EAAE2C,MACR,KAAKpE,EAAE8f,OAAO/B,MACd,KAAK/d,EAAE8f,OAAOjC,YACd,KAAK7d,EAAE8f,OAAOhC,YACRrc,EAAEW,QAAU,EACdM,KAAK4kB,KAAK5kB,KAAK4kB,KAAKllB,OAASX,EAAEW,QAAU+B,EAEzCzB,KAAK4kB,KAAKvgB,KAAK5C,GAEjBzB,KAAKykB,OACL,MACF,KAAKnnB,EAAE8f,OAAOQ,OACI,MAAZ7e,EAAE8lB,QACJ7kB,KAAK4kB,KAAK7lB,EAAE8lB,QAAUpjB,EACtB1C,EAAE8lB,OAAS,KACX7kB,KAAKykB,SAEL1lB,EAAE8lB,OAASpjB,EAEa,iBAAb1C,EAAE8lB,SAEX9lB,EAAE2C,KAAOpE,EAAE8f,OAAO9B,IAClBvc,EAAEklB,IAAMjE,EAAM/B,SAASlf,EAAEklB,OAG7B,MACF,KAAK3mB,EAAE8f,OAAO9B,IACI,MAAZvc,EAAE8lB,QACJ7kB,KAAK4kB,KAAKpY,IAAIzN,EAAE8lB,OAAQpjB,GACxB1C,EAAE8lB,OAAS,KACX7kB,KAAKykB,QAEL1lB,EAAE8lB,OAASpjB,EAEb,MACF,KAAKnE,EAAE8f,OAAO7B,IACZvb,KAAK4kB,KAAKvgB,KAAK5C,GACVkjB,GACH3kB,KAAKykB,OAEP,MACF,QACE,MAAM,IAAIxkB,MAAM,8DAKPkB,EAAKO,EAAML,GACxBrB,KAAK8jB,SAAS9jB,KAAK8kB,QAAU,CAC3BpjB,KAAMA,EACNhC,OAAQ2B,EACR4iB,IAAK9iB,EACLijB,OAAQ,EACRS,OAAQ,uCAMV7kB,KAAK+kB,KAAO,GACZ/kB,KAAK8jB,SAAW,CAAC,CACfpiB,KAAMpE,EAAE8f,OAAO/B,MACf3b,QAAS,EACTukB,IAAKjkB,KAAK+kB,KACVX,OAAQ,EACRS,OAAQ,yCAKDG,EAAW9mB,GACpB,IAAM+mB,EAAMjlB,KAAK2gB,WAAWqE,GAE5B,OAAKC,EAIEA,EAAI/mB,GAHF,IAAIgiB,EAAO8E,EAAW9mB,qCAMtBiD,EAAKE,GACd,OAAOF,uCAGKA,EAAKE,GACjB,OAAOF,sCAGI0B,EAAKxB,GAChB,OAAOwB,2CAGSqiB,EAAK7jB,GACrB,OAAO/B,EAAO+H,OAAO6d,oDAGGlgB,EAAOC,GAC/B,OAAID,IAAUC,EACL3F,EAAO8G,MAAM,GAGf9G,EAAOa,KAAKH,KAAKugB,MAAMtf,MAAM+D,EAAOC,sCAGlCxD,GACT,OAAOA,sCAGI4c,EAAGC,GACd,OAAO0B,EAAM5B,WAAWC,EAAGC,uCAGhBE,EAAIC,EAAI7E,EAAIC,GACvB,OAAOmG,EAAMzB,WAAWC,EAAIC,EAAI7E,EAAIC,uCAGzBpY,GACX,OAAOA,4CAGUyF,EAAG5E,EAAGhF,EAAGC,GAC1B,OAAO4B,EAAQ+D,KAAK,CAACgE,EAAG5E,EAAGhF,EAAGC,GAAI,GAAG,EAAO,GAAI,6CAG/B2J,EAAG5E,EAAGhF,EAAGC,EAAGiJ,EAAG6X,EAAGC,EAAG6G,GACtC,OAAOhmB,EAAQ+D,KAAK,CAACgE,EAAG5E,EAAGhF,EAAGC,EAAGiJ,EAAG6X,EAAGC,EAAG6G,GAAI,GAAG,EAAO,GAAI,0CAG9C9G,EAAGC,GACjB,OAAQ,EAAI0B,EAAM5B,WAAWC,EAAGC,0CAGlBE,EAAIC,EAAI7E,EAAIC,GAC1B,IAAMwE,EAAI2B,EAAM5B,WAAWI,EAAIC,GACzBH,EAAI0B,EAAM5B,WAAWxE,EAAIC,GAE/B,OAAIwE,EAAI/gB,EAAEmgB,cACDngB,EAAEogB,QAAQnF,MAAM,IAAIuC,EAAUuD,GAAG3G,MAAMpa,EAAEigB,SAAShJ,KAAK+J,KAGxD,GAAMD,EAAI/gB,EAAEigB,QAAWe,wCAI/B,OAAO,wCAIP,OAAO,uCAIP,OAAO,yFAQP,OAAO3R,gDAIP,OAAQA,wCAIR,OAAO6J,2CAIP,OAAO,6CAGS0O,EAAK7jB,GACrB,OAAO6jB,EAAI9c,KAAK,qDAGQpD,EAAOC,GAC/B,OAAID,IAAUC,EACL,GAGFjF,KAAKygB,QAAQ1e,SAAS,OAAQiD,EAAOC,kDAGtBxD,GACtB,OAAO,IAAIwe,EAAOxe,mCAKXA,GACPzB,KAAK+jB,MAAM/jB,KAAKolB,UAAU3jB,sCAGjB4c,EAAGC,GACZte,KAAK+jB,MAAM/jB,KAAKqlB,YAAYhH,EAAGC,sCAGtBE,EAAIC,EAAI7E,EAAIC,GACrB7Z,KAAK+jB,MAAM/jB,KAAKslB,YAAY9G,EAAIC,EAAI7E,EAAIC,sCAG/BpY,GACTzB,KAAK+jB,MAAM/jB,KAAKulB,YAAY9jB,4CAGbyF,EAAG5E,EAAGhF,EAAGC,GACxByC,KAAK+jB,MAAM/jB,KAAKwlB,kBAAkBte,EAAG5E,EAAGhF,EAAGC,4CAG5B2J,EAAG5E,EAAGhF,EAAGC,EAAGiJ,EAAG6X,EAAGC,EAAG6G,GACpCnlB,KAAK+jB,MAAM/jB,KAAKylB,kBAAkBve,EAAG5E,EAAGhF,EAAGC,EAAGiJ,EAAG6X,EAAGC,EAAG6G,yCAG3C9G,EAAGC,GACfte,KAAK+jB,MAAM/jB,KAAK0lB,eAAerH,EAAGC,yCAGtBE,EAAIC,EAAI7E,EAAIC,GACxB7Z,KAAK+jB,MAAM/jB,KAAK2lB,eAAenH,EAAIC,EAAI7E,EAAIC,uCAI3C7Z,KAAK+jB,MAAM/jB,KAAK4lB,kDAIhB5lB,KAAK+jB,MAAM/jB,KAAK6lB,kDAIhB7lB,KAAK+jB,MAAM/jB,KAAK8lB,sDAIhB9lB,KAAK+jB,MAAM/jB,KAAK+lB,0DAIhB/lB,KAAK+jB,MAAM/jB,KAAKgmB,4DAIhBhmB,KAAK+jB,MAAM/jB,KAAKimB,uDAIhBjmB,KAAK+jB,MAAM/jB,KAAKkmB,kDAIhBlmB,KAAK+jB,MAAM/jB,KAAKmmB,yDAIhBnmB,KAAKomB,cAAc,GAAI9oB,EAAE8f,OAAO/B,OAAQ,+CAGrBha,GACnBrB,KAAKqmB,uBAAuBhlB,iDAGPilB,EAAMC,GAC3B,IAAMllB,EAAM2e,EAAM5B,WAAWkI,EAAMC,GACnCvmB,KAAKqmB,uBAAuBhlB,iDAGPilB,EAAMC,EAAMC,EAAMC,GACvC,IAAMplB,EAAM2e,EAAMzB,WAAW+H,EAAMC,EAAMC,EAAMC,GAC/CzmB,KAAKqmB,uBAAuBhlB,6CAI5BrB,KAAK0mB,yBAAyB,gDAGVrlB,GACpBrB,KAAK0mB,wBAAwBrlB,kDAGPilB,EAAMC,GAC5B,IAAMllB,EAAM2e,EAAM5B,WAAWkI,EAAMC,GACnCvmB,KAAK0mB,wBAAwBrlB,kDAGPilB,EAAMC,EAAMC,EAAMC,GACxC,IAAMplB,EAAM2e,EAAMzB,WAAW+H,EAAMC,EAAMC,EAAMC,GAC/CzmB,KAAK0mB,wBAAwBrlB,iDAI7BrB,KAAK8jB,SAAS9jB,KAAK8kB,QAAU,CAC3BpjB,KAAMpE,EAAE8f,OAAOjC,YACfzb,QAAS,EACTukB,IAAK,GACLG,OAAQ,EACRS,OAAQ,6CAII7f,EAAOC,GACrBjF,KAAK+jB,MAAM/jB,KAAK2mB,yBAAyB3hB,EAAOC,kDAIhDjF,KAAK8jB,SAAS9jB,KAAK8kB,QAAU,CAC3BpjB,KAAMpE,EAAE8f,OAAOhC,YACf1b,QAAS,EACTukB,IAAK,GACLG,OAAQ,EACRS,OAAQ,6CAII7f,EAAOC,GACrBjF,KAAK+jB,MAAM/jB,KAAK4mB,yBAAyB5hB,EAAOC,iDAG5BxD,GACpBzB,KAAK+jB,MAAM/jB,KAAK6mB,uBAAuBplB,yCAG3BqlB,GACZ9mB,KAAK8jB,SAAS9jB,KAAK8kB,QAAU,CAC3BpjB,KAAMpE,EAAE8f,OAAO7B,IACf7b,OAAQ,EACRukB,IAAK,CAAC6C,0CAIKzI,EAAGC,GAChBte,KAAKsjB,aAAatD,EAAM5B,WAAWC,EAAGC,0CAGzBE,EAAIC,EAAI7E,EAAIC,GACzB7Z,KAAKsjB,aAAatD,EAAMzB,WAAWC,EAAIC,EAAI7E,EAAIC,8CAG9BmL,GACjBhlB,KAAK+jB,MAAM/jB,KAAKgkB,UAAUgB,wCAI1B,GAAIhlB,KAAKwkB,eAAe9kB,QAAU,EAChC,MAAM,IAAIO,MAAM,oBAGlBD,KAAK0kB,+DAGkBrjB,GACX,IAARA,EAKJrB,KAAKomB,cAAc,GAAI9oB,EAAE8f,OAAOQ,OAAQvc,GAJtCrB,KAAK+jB,MAAM/jB,KAAKskB,aAAa,oDAOTjjB,GACV,IAARA,EAKJrB,KAAKomB,cAAc,IAAIvd,MAAMxH,GAAM/D,EAAE8f,OAAO/B,MAAOha,GAJjDrB,KAAK+jB,MAAM/jB,KAAKukB,YAAY,qCAOvBb,GACP,GAAyB,IAArBA,EAAMljB,WACR,MAAM,IAAIP,MAAM,mBAGlBD,KAAK0gB,SACL1gB,KAAKwgB,OAAOhU,IAAIkX,GAChB,IAAMjX,EAAOzM,KAAK+f,OAAOgH,MAAMrD,EAAMljB,YAErC,GAAIR,KAAK8kB,OAAS,EAAG,CACnB,KAAsC,IAA/B9kB,KAAKwkB,eAAe9kB,QACzBM,KAAK0kB,eAEP,GAAI1kB,KAAK8kB,OAAS,EAChB,MAAM,IAAI7kB,MAAM,0BAIpB,GAAIwM,EAAO,EACT,MAAM,IAAIxM,MAAM,mBAGlB,GAAyB,IAArBD,KAAK+kB,KAAKrlB,OACZ,MAAM,IAAIO,MAAM,uDAMPyjB,GAGX,OAFA1jB,KAAKgnB,QAAQtD,GAEN1jB,KAAK+kB,KAAK,qCAGRrB,GAGT,OAFA1jB,KAAKgnB,QAAQtD,GAEN1jB,KAAK+kB,oCAteZ,OAAO/kB,KAAK8jB,SAASpkB,8CAIrB,OAAOM,KAAK8jB,SAAS9jB,KAAK8kB,OAAS,gCAInC,OAAO9kB,KAAKwkB,eAAeP,yCAkgB/B7D,EAAQwD,YAAcxD,EAAQ6G,OAE9BvqB,EAAOD,QAAU2jB,ycC1mBjB,IAAMvC,EAAY9C,EAAQ,GACpBC,EAAK6C,EAAU7C,GACf8B,EAASe,EAAUf,OACnBK,EAAOU,EAAUV,KAKjB8C,aAMJ,SAAAA,EAAa/hB,GACX,+FADkBoiB,CAAAtgB,KAAAigB,GACG,iBAAV/hB,EACT,MAAM,IAAI+B,MAAM,wBAAAoN,EAAkCnP,IAEpD,GAAKA,EAAQ,GAAOA,EAAQ,MAAkB,EAARA,KAAeA,EACnD,MAAM,IAAI+B,MAAM,2CAA6C/B,GAE/D8B,KAAK9B,MAAQA,yDAqCEiD,GACf,OAAOA,aAAe8e,iCAaTxe,EAAKylB,GAIlB,OAHiB,MAAbA,IACFA,GAAY,GAENzlB,GACN,KAAKqb,EAAOC,MACV,OAAO,EACT,KAAKD,EAAOE,KACV,OAAO,EACT,KAAKF,EAAOG,KACV,OAAIiK,EACK,KAEA/J,EAAKF,KAEhB,KAAKH,EAAOI,UACV,OAAIgK,OACF,EAEO/J,EAAKD,UAEhB,KAAM,EACJ,IAAKgK,EACH,MAAM,IAAIjnB,MAAM,iBAElB,OAAOkd,EAAKE,MACd,QACE,OAAO,IAAI4C,EAAOxe,4CArEtB,MAAO,UAAYzB,KAAK9B,MAAQ,sCAShC,MAAO,UAAY8B,KAAK9B,MAAQ,uCAStBipB,GACV,OAAOA,EAAIC,SAASpnB,KAAK9B,MAAO8c,EAAGQ,mDAuDvC9e,EAAOD,QAAUwjB,+aCnGXC,aAQJ,SAAAA,EAAa4G,EAAK5oB,EAAOmpB,GAIvB,+FAJ4B/G,CAAAtgB,KAAAkgB,GAC5BlgB,KAAK8mB,IAAMA,EACX9mB,KAAK9B,MAAQA,EACb8B,KAAKqnB,IAAMA,EACa,iBAAbrnB,KAAK8mB,IACd,MAAM,IAAI7mB,MAAM,qBAAAoN,EAA+BrN,KAAK8mB,KAAO,KAE7D,GAAK9mB,KAAK8mB,IAAM,IAAmB,EAAX9mB,KAAK8mB,OAAa9mB,KAAK8mB,IAC7C,MAAM,IAAI7mB,MAAM,mCAAqCD,KAAK8mB,+DAU5D,SAAAzf,OAAUrH,KAAK8mB,IAAf,KAAAzf,OAAsBigB,KAAKC,UAAUvnB,KAAK9B,OAA1C,wCASUipB,GAEV,OADAA,EAAIK,SAASxnB,KAAK8mB,KACXK,EAAIM,QAAQznB,KAAK9B,uCAcjBwpB,GACP,IAAIC,EAAItJ,EAER,GAAiB,mBADjBA,EAAkB,MAAdqJ,EAAqBA,EAAW1nB,KAAK8mB,UAAO,IAG7B,mBADjBzI,EAAI6B,EAAO,OAASlgB,KAAK8mB,MAEvB,OAAO9mB,KAGX,IACE,OAAOqe,EAAEjhB,KAAK8iB,EAAQlgB,KAAK9B,OAC3B,MAAO0pB,GAGP,OAFAD,EAAKC,EACL5nB,KAAKqnB,IAAMM,EACJ3nB,2CAKbtD,EAAOD,QAAUyjB,gCC3EjB,IAAA2H,EAAe9qB,EAAQ,IACvB+qB,EAAAD,EAAAC,qBACAlW,EAAAiW,EAAAjW,OACAmW,EAAAF,EAAAE,gBACAC,EAAAH,EAAAG,YAEAC,EAAelrB,EAAQ,IAEvBL,EAAAD,QAAA,CACA0jB,IAAA2H,EACAC,kBACAnW,SACAqW,WACAD,6CCbA,SAAA3a,EAAAlM,GAAwU,OAAtOkM,EAA3E,mBAAArP,QAAA,iBAAAA,OAAAsP,SAA2E,SAAAnM,GAAkC,cAAAA,GAA+B,SAAAA,GAAkC,OAAAA,GAAA,mBAAAnD,QAAAmD,EAAAoM,cAAAvP,QAAAmD,IAAAnD,OAAAa,UAAA,gBAAAsC,IAAmIA,GAIxU,SAAA+mB,EAAA7f,EAAA8f,GAA2C,QAAAlrB,EAAA,EAAgBA,EAAAkrB,EAAAzoB,OAAkBzC,IAAA,CAAO,IAAAmrB,EAAAD,EAAAlrB,GAA2BmrB,EAAAvqB,WAAAuqB,EAAAvqB,aAAA,EAAwDuqB,EAAAvhB,cAAA,EAAgC,UAAAuhB,MAAAC,UAAA,GAAuD1qB,OAAAC,eAAAyK,EAAA+f,EAAA5pB,IAAA4pB,IAI9P,SAAAE,EAAAC,EAAAnrB,GAAiD,OAAAA,GAAA,WAAAiQ,EAAAjQ,IAAA,mBAAAA,EAEjD,SAAAmrB,GAAuC,YAAAA,EAAuB,UAAAC,eAAA,6DAAyF,OAAAD,EAFbE,CAAAF,GAAfnrB,EAI3H,SAAAsrB,EAAAhrB,GAAgL,OAAnJgrB,EAAA/qB,OAAAgrB,eAAAhrB,OAAAirB,eAAA,SAAAlrB,GAAgG,OAAAA,EAAAmC,WAAAlC,OAAAirB,eAAAlrB,KAAmDA,GAIhL,SAAAmrB,EAAAnrB,EAAAqB,GAA0I,OAA1G8pB,EAAAlrB,OAAAgrB,gBAAA,SAAAjrB,EAAAqB,GAA6F,OAAjBrB,EAAAmC,UAAAd,EAAiBrB,IAAaA,EAAAqB,GAE1I,IAAAipB,EAAAO,KAAAO,SAAAP,KAAAO,SAAAC,SAAA,KAAAR,KAAAO,SAAAE,KAAA,GACA7I,EAAAoI,KAAApI,IAEA2H,EAEA,SAAAmB,GAGA,SAAAnB,EAAAoB,GACA,IAAAC,EAEAnU,EAAArN,UAAAjI,OAAA,QAAAe,IAAAkH,UAAA,GAAAA,UAAA,GAAAqgB,EAQA,OAnCA,SAAAoB,EAAAC,GAAiD,KAAAD,aAAAC,GAA0C,UAAAjpB,UAAA,qCA6B3FkgB,CAAAtgB,KAAA8nB,IAEAqB,EAAAb,EAAAtoB,KAAA0oB,EAAAZ,GAAA1qB,KAAA4C,KAAAkpB,EAAAlU,KACAsU,KAAAH,EAAAI,SAAAJ,EAAA5X,OACA4X,EAAAK,KAAAL,EAAAM,UAAAN,EAAAO,SAAAP,EAAAM,SAAA,IAAAN,EAAAO,SAAA,KACAP,EAAAQ,MAAAR,EAAA5X,QAAA4X,EAAA5X,OAAAqY,WAAA,KAAAT,EAAA5X,OAAAtQ,MAAA,QACAkoB,EA/BA,IAAAE,EAAAQ,EAAAC,EAyCA,OAjCA,SAAAC,EAAAC,GAA0C,sBAAAA,GAAA,OAAAA,EAA+D,UAAA5pB,UAAA,sDAA6E2pB,EAAAlrB,UAAAlB,OAAAY,OAAAyrB,KAAAnrB,UAAA,CAAyE0O,YAAA,CAAerP,MAAA6rB,EAAA1B,UAAA,EAAAxhB,cAAA,KAA0DmjB,GAAAnB,EAAAkB,EAAAC,GAUxUC,CAAAnC,EAwBC3H,GA1CDkJ,EAkCAvB,GAlCA+B,EAkCA,EACArrB,IAAA,SACAN,MAAA,WACA,OAAA8B,KAAA+B,gBArC6DmmB,EAAAmB,EAAAxqB,UAAAgrB,GAAsEC,GAAA5B,EAAAmB,EAAAS,GAyCnIhC,EAxBA,GA+CAprB,EAAAD,QAAA,CACAqrB,uBACAC,gBAAAQ,KAAAR,gBACAC,cACApW,OAxBA,SAAAzQ,GACA,oBAAAA,EAEA,OADA,IAAAgf,EAAAhf,GACAY,WAGA,KAAAZ,aAAAgf,GAAA,CACA,IAAAqJ,EAAAroB,EAAAsoB,SAAA,GAAApiB,OAAAlG,EAAAsoB,SAAA,KAAApiB,OAAAlG,EAAAuoB,SAAA,KAAAvoB,EAAAqoB,KAAA,MAAyG,EACzGU,EAAA/oB,EAAA+oB,KAAA,IAAA/oB,EAAA+oB,KAAA,GACAnB,EAAA5nB,EAAA4nB,SAAA5nB,EAAA4nB,SAAA,QACAC,EAAA7nB,EAAA6nB,MAAA,GACAmB,EAAAhpB,EAAAgpB,UAAA,GACA5Y,EAAApQ,EAAAoQ,SAAApQ,EAAAwoB,MAAA,IAAAxoB,EAAAwoB,MAAA,IACAS,EAAAjpB,EAAAipB,MAAA,GACAb,EAAApoB,EAAAooB,UAAA,GACAD,EAAAnoB,EAAAmoB,MAAAC,EAAAhY,EACA,SAAAlK,OAAA0hB,GAAA1hB,OAAAmiB,GAAAniB,OAAA2hB,GAAAmB,EAAAD,GAAA7iB,OAAAiiB,GAAAjiB,OAAA+iB,qECjEA3tB,EAAQ4tB,SAAWtP,EAAQ,IAC3Bte,EAAQ2jB,QAAUrF,EAAQ,GAC1Bte,EAAQ6tB,QAAUvP,EAAQ,IAC1Bte,EAAQwjB,OAASlF,EAAQ,GACzBte,EAAQyjB,OAASnF,EAAQ,GAGzBte,EAAQonB,UAAYpnB,EAAQ2jB,QAAQyD,UACpCpnB,EAAQmnB,YAAcnnB,EAAQ2jB,QAAQwD,YACtCnnB,EAAQ8tB,SAAW9tB,EAAQ4tB,SAASE,SACpC9tB,EAAQ+tB,OAAS/tB,EAAQ6tB,QAAQE,OACjC/tB,EAAQwqB,OAASxqB,EAAQ2jB,QAAQ6G,OAEjCxqB,EAAQguB,QAAU,CAChBxD,OAAQxqB,EAAQ2jB,QAAQyD,UACxB2G,OAAQ/tB,EAAQ6tB,QAAQE,OACxBhpB,QAAQ,EACRhE,KAAM,uCCpBR,SAAA8B,ilCAEA,IAAM8gB,EAAUrF,EAAQ,GAClBiF,EAAQjF,EAAQ,GAMhBsP,gaAAiBjK,yCAsJJsD,EAAOC,GAMtB,MALqB,iBAAVD,IACTA,EAAQpkB,EAAOa,KAAKujB,EAAOC,GAAO,SAGxB,IAAI0G,GACLzG,YAAYF,0CA3JdsB,EAAW9mB,GACpB,SAAAmJ,OAAU2d,EAAV,KAAA3d,OAAuBnJ,EAAvB,uCAGSuD,GACT,OAAOipB,EAAAhC,EAAA2B,EAAAxrB,WAAA,YAAAmB,MAAA5C,KAAA4C,KAAgByB,GAAKM,+CAGjBsc,EAAGC,GACd,OAAOoM,EAAAhC,EAAA2B,EAAAxrB,WAAA,cAAAmB,MAAA5C,KAAA4C,KAAkBqe,EAAGC,GAAGvc,+CAGpByc,EAAIC,EAAI7E,EAAIC,GACvB,OAAO6Q,EAAAhC,EAAA2B,EAAAxrB,WAAA,cAAAmB,MAAA5C,KAAA4C,KAAkBwe,EAAIC,EAAI7E,EAAIC,GAAI9X,kDAG3Bsc,EAAGC,GACjB,OAAOoM,EAAAhC,EAAA2B,EAAAxrB,WAAA,iBAAAmB,MAAA5C,KAAA4C,KAAqBqe,EAAGC,GAAGvc,kDAGpByc,EAAIC,EAAI7E,EAAIC,GAC1B,OAAO6Q,EAAAhC,EAAA2B,EAAAxrB,WAAA,iBAAAmB,MAAA5C,KAAA4C,KAAqBwe,EAAIC,EAAI7E,EAAIC,GAAI9X,gDAI5C,MAAO,6CAIP,MAAO,4CAGIN,GACX,IAAMkpB,EAAED,EAAAhC,EAAA2B,EAAAxrB,WAAA,cAAAmB,MAAA5C,KAAA4C,KAAqByB,GAC7B,OAAIue,EAAMf,eAAexd,GAChB,OAGT,GAAA4F,OAAUsjB,EAAV,gDAGiBzjB,EAAG5E,EAAGhF,EAAGC,GAC1B,IAAMotB,EAAED,EAAAhC,EAAA2B,EAAAxrB,WAAA,oBAAAmB,MAAA5C,KAAA4C,KAA2BkH,EAAG5E,EAAGhF,EAAGC,GAC5C,SAAA8J,OAAUsjB,EAAV,gDAGiBzjB,EAAG5E,EAAGhF,EAAGC,EAAGiJ,EAAG6X,EAAGC,EAAG6G,GACtC,IAAMwF,EAAED,EAAAhC,EAAA2B,EAAAxrB,WAAA,oBAAAmB,MAAA5C,KAAA4C,KAA2BkH,EAAG5E,EAAGhF,EAAGC,EAAGiJ,EAAG6X,EAAGC,EAAG6G,GACxD,SAAA9d,OAAUsjB,EAAV,+CAGgBzF,EAAK7jB,GACrB,IAAMI,EAAMyjB,EAAI9c,KAAK,MAErB,OAAa,IAAT/G,EACF,MAAAgG,OAAa5F,EAAb,KAEF,KAAA4F,OAAY5F,oDAGYuD,EAAOC,GAC/B,IAAMxD,EAAOnC,EAAOa,KAAPuqB,EAAAhC,EAAA2B,EAAAxrB,WAAA,2BAAAmB,MAAA5C,KAAA4C,KACoBgF,EAAOC,IACrClD,SAAS,OAEZ,WAAAsF,OAAY5F,EAAZ,8CAIA,MAAO,yDAIP,MAAO,kDAIP,MAAO,+CAIP,MAAO,8CAIP,MAAO,iDAIP,MAAO,2DAGeA,GACtB,gBAAA4F,OAAiB5F,EAAjB,yCAGWoB,EAAKxB,GAChB,IAAMI,EAAGipB,EAAAhC,EAAA2B,EAAAxrB,WAAA,cAAAmB,MAAA5C,KAAA4C,KAAqB6C,EAAKxB,GAEnC,OAAa,IAATA,EAEF,MAAAgG,OAAa5F,EAAI2G,KAAK,MAAtB,KAGF,IAAAf,OAAW5F,EAAI2G,KAAK,MAApB,uCAGSwiB,EAAKvpB,GACd,IAAMI,EAAGipB,EAAAhC,EAAA2B,EAAAxrB,WAAA,YAAAmB,MAAA5C,KAAA4C,KAAmB4qB,GACtBtjB,EAAOuB,MAAM1I,KAAKsB,EAAI0c,QACzB0M,OAAOC,EAAcrpB,GAAM,IAE9B,OAAa,IAATJ,EACF,MAAAgG,OAAaC,EAAb,KAGF,IAAAD,OAAWC,EAAX,0CAGYnG,EAAKE,GACjB,IAAMI,EAAGipB,EAAAhC,EAAA2B,EAAAxrB,WAAA,eAAAmB,MAAA5C,KAAA4C,KAAsBmB,GACzBypB,EAAMjtB,OAAOwgB,KAAK1c,GACrBopB,OAAOC,EAAcrpB,GAAM,IAE9B,OAAa,IAATJ,EACF,MAAAgG,OAAaujB,EAAb,KAGF,IAAAvjB,OAAWujB,EAAX,8CAGgB1F,EAAK7jB,GACrB,IAAMI,EAAMyjB,EAAI9c,KAAK,MAErB,OAAa,IAAT/G,EACF,MAAAgG,OAAa5F,EAAb,KAGF,IAAA4F,OAAW5F,EAAX,sDAGwBuD,EAAOC,GAC/B,IAAMxD,EAAOnC,EAAOa,KAAPuqB,EAAAhC,EAAA2B,EAAAxrB,WAAA,2BAAAmB,MAAA5C,KAAA4C,KACoBgF,EAAOC,IACrClD,SAAS,QAEZ,UAAAsF,OAAW5F,EAAX,0CAeJ,SAASqpB,EAAerpB,GACtB,OAAO,SAACspB,EAAKvsB,GACX,OAAIusB,EACF,GAAA1jB,OAAU0jB,EAAV,MAAA1jB,OAAkB7I,EAAlB,MAAA6I,OAA0B5F,EAAIjD,IAEhC,GAAA6I,OAAU7I,EAAV,MAAA6I,OAAkB5F,EAAIjD,KAP1B9B,EAAOD,QAAU4tB,yDCvKjB5tB,EAAA+D,WAkCA,SAAAwqB,GACA,IAAAC,EAAAC,EAAAF,GACAG,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACA,UAAAE,EAAAC,GAAA,EAAAA,GArCA3uB,EAAAoQ,YA4CA,SAAAme,GAUA,IATA,IAAAK,EACAJ,EAAAC,EAAAF,GACAG,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACApoB,EAAA,IAAAyoB,EATA,SAAAN,EAAAG,EAAAC,GACA,UAAAD,EAAAC,GAAA,EAAAA,EAQAG,CAAAP,EAAAG,EAAAC,IACAI,EAAA,EAEAnqB,EAAA+pB,EAAA,EAAAD,EAAA,EAAAA,EAEAluB,EAAA,EAAiBA,EAAAoE,EAASpE,GAAA,EAC1BouB,EAAAI,EAAAT,EAAA1mB,WAAArH,KAAA,GAAAwuB,EAAAT,EAAA1mB,WAAArH,EAAA,QAAAwuB,EAAAT,EAAA1mB,WAAArH,EAAA,OAAAwuB,EAAAT,EAAA1mB,WAAArH,EAAA,IACA4F,EAAA2oB,KAAAH,GAAA,OACAxoB,EAAA2oB,KAAAH,GAAA,MACAxoB,EAAA2oB,KAAA,IAAAH,EAGA,IAAAD,IACAC,EAAAI,EAAAT,EAAA1mB,WAAArH,KAAA,EAAAwuB,EAAAT,EAAA1mB,WAAArH,EAAA,OACA4F,EAAA2oB,KAAA,IAAAH,GAGA,IAAAD,IACAC,EAAAI,EAAAT,EAAA1mB,WAAArH,KAAA,GAAAwuB,EAAAT,EAAA1mB,WAAArH,EAAA,OAAAwuB,EAAAT,EAAA1mB,WAAArH,EAAA,OACA4F,EAAA2oB,KAAAH,GAAA,MACAxoB,EAAA2oB,KAAA,IAAAH,GAGA,OAAAxoB,GAvEApG,EAAAyI,cA0FA,SAAAwmB,GASA,IARA,IAAAL,EACAhqB,EAAAqqB,EAAAhsB,OACAisB,EAAAtqB,EAAA,EAEAuqB,EAAA,GAIA3uB,EAAA,EAAAspB,EAAAllB,EAAAsqB,EAA0C1uB,EAAAspB,EAAUtpB,GAHpD,MAIA2uB,EAAAvnB,KAAAwnB,EAAAH,EAAAzuB,IAJA,MAIAspB,IAAAtpB,EAJA,QAQA,IAAA0uB,GACAN,EAAAK,EAAArqB,EAAA,GACAuqB,EAAAvnB,KAAAynB,EAAAT,GAAA,GAAAS,EAAAT,GAAA,aACG,IAAAM,IACHN,GAAAK,EAAArqB,EAAA,OAAAqqB,EAAArqB,EAAA,GACAuqB,EAAAvnB,KAAAynB,EAAAT,GAAA,IAAAS,EAAAT,GAAA,MAAAS,EAAAT,GAAA,YAGA,OAAAO,EAAAxjB,KAAA,KA1GA,IALA,IAAA0jB,EAAA,GACAL,EAAA,GACAH,EAAA,oBAAA1rB,sBAAAiJ,MACA4D,EAAA,mEAEAxP,EAAA,EAAAoE,EAAAoL,EAAA/M,OAAkCzC,EAAAoE,IAASpE,EAC3C6uB,EAAA7uB,GAAAwP,EAAAxP,GACAwuB,EAAAhf,EAAAnI,WAAArH,MAQA,SAAAiuB,EAAAF,GACA,IAAA3pB,EAAA2pB,EAAAtrB,OAEA,GAAA2B,EAAA,IACA,UAAApB,MAAA,kDAKA,IAAAkrB,EAAAH,EAAAroB,QAAA,KAGA,OAFA,IAAAwoB,MAAA9pB,GAEA,CAAA8pB,EADAA,IAAA9pB,EAAA,IAAA8pB,EAAA,GAmDA,SAAAU,EAAAH,EAAA1mB,EAAAC,GAIA,IAHA,IAAAomB,EALAU,EAMAC,EAAA,GAEA/uB,EAAA+H,EAAqB/H,EAAAgI,EAAShI,GAAA,EAC9BouB,GAAAK,EAAAzuB,IAAA,cAAAyuB,EAAAzuB,EAAA,kBAAAyuB,EAAAzuB,EAAA,IACA+uB,EAAA3nB,KATAynB,GADAC,EAUAV,IATA,OAAAS,EAAAC,GAAA,OAAAD,EAAAC,GAAA,MAAAD,EAAA,GAAAC,IAYA,OAAAC,EAAA5jB,KAAA,IA1EAqjB,EAAA,IAAAnnB,WAAA,OACAmnB,EAAA,IAAAnnB,WAAA,qCChBA,IAAAvC,EAAA,GAAiBA,SAEjBrF,EAAAD,QAAAoM,MAAAzJ,SAAA,SAAAyD,GACA,wBAAAd,EAAA3E,KAAAyF,kCCLAnG,EAAOD,QAAU,SAAoBwvB,EAAQC,EAAS1qB,GACpD,UAIA,IAAI2qB,EAAO,IAAIF,EAAOrsB,WAAW4B,GAEjC,IAAIggB,EAAU0K,EAAQ1K,QACtB,IAAIC,EAAYyK,EAAQzK,UACxB,IAAIC,EAAewK,EAAQxK,aAC3B,IAAIC,EAAYuK,EAAQvK,UACxB,IAAIC,EAAesK,EAAQtK,aAC3B,IAAIC,EAAYqK,EAAQrK,UACxB,IAAIC,EAAkBoK,EAAQpK,gBAC9B,IAAIC,EAAkBmK,EAAQnK,gBAC9B,IAAIC,EAAWkK,EAAQlK,SACvB,IAAIC,EAAYiK,EAAQjK,UACxB,IAAIC,EAAgBgK,EAAQhK,cAC5B,IAAIC,EAAW+J,EAAQ/J,SACvB,IAAIC,EAAe8J,EAAQ9J,aAC3B,IAAIC,EAAkB6J,EAAQ7J,gBAC9B,IAAIC,EAAU4J,EAAQ5J,QACtB,IAAIC,EAAa2J,EAAQ3J,WAEzB,IAAIC,EAAiB0J,EAAQ1J,eAC7B,IAAIC,EAAsByJ,EAAQzJ,oBAClC,IAAIC,EAAwBwJ,EAAQxJ,sBACpC,IAAIC,EAAwBuJ,EAAQvJ,sBACpC,IAAIC,EAAkBsJ,EAAQtJ,gBAC9B,IAAIC,EAAuBqJ,EAAQrJ,qBACnC,IAAIC,EAAyBoJ,EAAQpJ,uBACrC,IAAIC,EAAyBmJ,EAAQnJ,uBAErC,IAAIC,EAAiBkJ,EAAQlJ,eAC7B,IAAIC,EAAsBiJ,EAAQjJ,oBAClC,IAAIC,EAAiBgJ,EAAQhJ,eAC7B,IAAIC,EAAsB+I,EAAQ/I,oBAElC,IAAIC,EAAuB8I,EAAQ9I,qBAEnC,IAAIE,EAAe4I,EAAQ5I,aAC3B,IAAIC,EAAgB2I,EAAQ3I,cAC5B,IAAIC,EAAgB0I,EAAQ1I,cAC5B,IAAIH,EAAoB6I,EAAQ7I,kBAEhC,IAAII,EAAYyI,EAAQzI,UAExB,IAAIlZ,EAAM0hB,EAAO7mB,KAAKmF,IAOtB,IAAI9G,EAAS,EACb,IAAI2oB,EAAc,EAClB,IAAI3f,EAAO,EAUX,SAASsa,EAAOrD,GACdA,EAAQA,EAAQ,EAEhBjgB,EAAS,EACT2oB,EAAc1I,EAEd,OAAQjgB,EAAS,IAAM2oB,EAAc,GAAI,CACvC3f,EAAO4f,GAAUF,EAAK1oB,GAAU,KAAK0oB,EAAK1oB,GAAU,GAAK,EAEzD,IAAKgJ,EAAO,GAAK,EAAG,CAClB,OAIJ,OAAOA,EAAO,EAKhB,SAAStD,EAAazK,GACpBA,EAAIA,EAAI,EAER,KAAO+E,EAAS,IAAM/E,EAAI,GAAM,IAAM0tB,EAAc,GAAI,CACtD,OAAO,EAGT,OAAO,EAGT,SAASE,EAAY5tB,GACnBA,EAAIA,EAAI,EAER,OACGytB,EAAKztB,EAAI,IAAM,EAAKytB,EAAMztB,EAAI,EAAK,GAClC,EAGN,SAAS6tB,EAAY7tB,GACnBA,EAAIA,EAAI,EAER,OACGytB,EAAKztB,EAAI,IAAM,GAAOytB,EAAMztB,EAAI,EAAK,IAAM,GAAOytB,EAAMztB,EAAI,EAAK,IAAM,EAAKytB,EAAMztB,EAAI,EAAK,GAC1F,EAKN,SAAS8tB,EAAOC,GACdA,EAAQA,EAAQ,EAEhBjL,EAAQiL,EAAQ,GAEhBhpB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASipB,EAAUD,GACjBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTqY,EAAQ2K,EAAM1oB,EAAS,EAAK,GAAK,GAEjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASkpB,EAAWF,GAClBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTqY,EACE8K,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASmpB,EAAWH,GAClBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTsY,EACE6K,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASopB,EAAWJ,GAClBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTwY,EACE2K,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASqpB,EAAOL,GACdA,EAAQA,EAAQ,EAEhBjL,GAAU,GAAMiL,EAAQ,GAAM,GAAM,GAEpChpB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASspB,EAAUN,GACjBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTqY,GACI,GAAK2K,EAAM1oB,EAAS,EAAK,GAAK,GAAM,GAGxCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASupB,EAAWP,GAClBA,EAAQA,EAAQ,EAEhB,IAAIhrB,EAAM,EAEV,GAAI0H,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT1H,EAAM6qB,EAAY7oB,EAAS,EAAK,GAAK,EACrC+d,GAAU,GAAK/f,EAAM,GAAM,GAE3BgC,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASwpB,GAAWR,GAClBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTuY,EACE4K,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASypB,GAAWT,GAClBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTyY,EACE0K,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS0X,GAAasR,GACpBA,EAAQA,EAAQ,EAEhB,IAAIznB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAIkoB,EAAO,EAEXA,EAAQV,EAAQ,GAAM,EACtB,GAAItjB,EAAYgkB,EAAO,GAAK,EAAG,CAC7B,OAAO,EAGTnoB,EAASvB,EAAS,EAAK,EACvBwB,GAASxB,EAAS,EAAK,IAAM0pB,EAAO,GAAM,EAE1CnK,EAAehe,EAAQ,EAAGC,EAAM,GAEhCxB,EAASwB,EAAM,EAEf,OAAO,EAGT,SAASmoB,GAAeX,GACtBA,EAAQA,EAAQ,EAEhB,IAAIznB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAIvF,EAAS,EAEb,GAAIyJ,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTzJ,EAASysB,EAAM1oB,EAAS,EAAK,GAAK,EAClCuB,EAASvB,EAAS,EAAK,EACvBwB,GAASxB,EAAS,EAAK,IAAM/D,EAAS,GAAM,EAE5C,GAAIyJ,EAAazJ,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGTsjB,EAAehe,EAAQ,EAAGC,EAAM,GAEhCxB,EAASwB,EAAM,EAEf,OAAO,EAGT,SAASooB,GAAgBZ,GACvBA,EAAQA,EAAQ,EAEhB,IAAIznB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAIvF,EAAS,EAEb,GAAIyJ,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTzJ,EAAS4sB,EAAY7oB,EAAS,EAAK,GAAK,EACxCuB,EAASvB,EAAS,EAAK,EACvBwB,GAASxB,EAAS,EAAK,IAAM/D,EAAS,GAAM,EAG5C,GAAIyJ,EAAazJ,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGTsjB,EAAehe,EAAQ,EAAGC,EAAM,GAEhCxB,EAASwB,EAAM,EAEf,OAAO,EAGT,SAASqoB,GAAgBb,GACvBA,EAAQA,EAAQ,EAEhB,IAAIznB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAIvF,EAAS,EAEb,GAAIyJ,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTzJ,EAAS6sB,EAAY9oB,EAAS,EAAK,GAAK,EACxCuB,EAASvB,EAAS,EAAK,EACvBwB,GAASxB,EAAS,EAAK,IAAM/D,EAAS,GAAM,EAG5C,GAAIyJ,EAAazJ,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGTsjB,EAAehe,EAAQ,EAAGC,EAAM,GAEhCxB,EAASwB,EAAM,EAEf,OAAO,EAGT,SAASsoB,GAAgBd,GAEvBA,EAAQA,EAAQ,EAEhB,OAAO,EAGT,SAASe,GAAmBf,GAC1BA,EAAQA,EAAQ,EAEhBxJ,IAEAxf,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS2X,GAAaqR,GACpBA,EAAQA,EAAQ,EAEhB,IAAIznB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAIkoB,EAAO,EAEXA,EAAQV,EAAQ,GAAM,EAEtB,GAAItjB,EAAYgkB,EAAO,GAAK,EAAG,CAC7B,OAAO,EAGTnoB,EAASvB,EAAS,EAAK,EACvBwB,GAASxB,EAAS,EAAK,IAAM0pB,EAAO,GAAM,EAE1CjK,EAAele,EAAQ,EAAGC,EAAM,GAEhCxB,EAASwB,EAAM,EAEf,OAAO,EAGT,SAASwoB,GAAehB,GACtBA,EAAQA,EAAQ,EAEhB,IAAIznB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAIvF,EAAS,EAEb,GAAIyJ,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTzJ,EAASysB,EAAM1oB,EAAS,EAAK,GAAK,EAClCuB,EAASvB,EAAS,EAAK,EACvBwB,GAASxB,EAAS,EAAK,IAAM/D,EAAS,GAAM,EAE5C,GAAIyJ,EAAazJ,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGTwjB,EAAele,EAAQ,EAAGC,EAAM,GAEhCxB,EAASwB,EAAM,EAEf,OAAO,EAGT,SAASyoB,GAAgBjB,GACvBA,EAAQA,EAAQ,EAEhB,IAAIznB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAIvF,EAAS,EAEb,GAAIyJ,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTzJ,EAAS4sB,EAAY7oB,EAAS,EAAK,GAAK,EACxCuB,EAASvB,EAAS,EAAK,EACvBwB,GAASxB,EAAS,EAAK,IAAM/D,EAAS,GAAM,EAE5C,GAAIyJ,EAAazJ,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGTwjB,EAAele,EAAQ,EAAGC,EAAM,GAEhCxB,EAASwB,EAAM,EAEf,OAAO,EAGT,SAAS0oB,GAAgBlB,GACvBA,EAAQA,EAAQ,EAEhB,IAAIznB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAIvF,EAAS,EAEb,GAAIyJ,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTzJ,EAAS6sB,EAAY9oB,EAAS,EAAK,GAAK,EACxCuB,EAASvB,EAAS,EAAK,EACvBwB,GAASxB,EAAS,EAAK,IAAM/D,EAAS,GAAM,EAE5C,GAAIyJ,EAAazJ,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGTwjB,EAAele,EAAQ,EAAGC,EAAM,GAEhCxB,EAASwB,EAAM,EAEf,OAAO,EAGT,SAAS2oB,GAAgBnB,GAEvBA,EAAQA,EAAQ,EAEhB,OAAO,EAGT,SAASoB,GAAmBpB,GAC1BA,EAAQA,EAAQ,EAEhBtJ,IAEA1f,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS4X,GAAOoR,GACdA,EAAQA,EAAQ,EAEhBhK,EAAqBgK,EAAQ,IAAO,GAEpChpB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASqqB,GAASrB,GAChBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTsZ,EAAoB0J,EAAM1oB,EAAS,EAAK,GAAK,GAE7CA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASsqB,GAAUtB,GACjBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTsZ,EACE6J,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASuqB,GAAUvB,GACjBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTuZ,EACE4J,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASwqB,GAAUxB,GACjBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTwZ,EACE2J,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASyqB,GAAazB,GACpBA,EAAQA,EAAQ,EAEhBjK,IAEA/e,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS6X,GAAKmR,GACZA,EAAQA,EAAQ,EAEhB,IAAIU,EAAO,EAEXA,EAAQV,EAAQ,IAAO,EAEvB,GAAItjB,EAAYgkB,EAAO,GAAK,EAAG,CAC7B,OAAO,EAGTtK,EAAqBsK,EAAO,GAE5B1pB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS0qB,GAAO1B,GACdA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT0Z,EAAqBsJ,EAAM1oB,EAAS,EAAK,GAAK,GAE9CA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS2qB,GAAQ3B,GACfA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT0Z,EACEyJ,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS4qB,GAAQ5B,GACfA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT2Z,EACEwJ,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS6qB,GAAQ7B,GACfA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT4Z,EACEuJ,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS8qB,GAAW9B,GAClBA,EAAQA,EAAQ,EAEhB7J,IAEAnf,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS+qB,GAAW/B,GAClBA,EAAQA,EAAQ,EAEhBnJ,EAAcmJ,EAAQ,IAAK,EAAK,GAEhChpB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASgrB,GAAgBhC,GACfA,EAAQ,EAEhBnJ,EAAamJ,EAAQ,GAErBhpB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASirB,GAAgBjC,GACfA,EAAQ,EAEhBnJ,EAAamJ,EAAQ,GAErBhpB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASkrB,GAAUlC,GACTA,EAAQ,EAEhBnJ,EAAamJ,EAAQ,GAErBhpB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASmrB,GAAkBnC,GACjBA,EAAQ,EAEhBnJ,EAAamJ,EAAQ,GAErBhpB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASorB,GAAgBpC,GACvBA,EAAQA,EAAQ,EAEhBnJ,EAAcmJ,EAAQ,IAAK,EAAK,GAEhChpB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASqrB,GAAgBrC,GACfA,EAAQ,EAEhBnJ,EAAamJ,EAAQ,GAErBhpB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASsrB,GAAYtC,GACXA,EAAQ,EAEhBnJ,EAAamJ,EAAQ,GAErBhpB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASurB,GAAYvC,GACXA,EAAQ,EAEhBnJ,EAAamJ,EAAQ,GAErBhpB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASwrB,GAAYxC,GACnBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTma,EAAa6I,EAAM1oB,EAAS,EAAK,GAAK,GAEtCA,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASyrB,GAAYzC,GACnBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTma,EACEgJ,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAAS0rB,GAAY1C,GACnBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGToa,EACE+I,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAAS2rB,GAAY3C,GACnBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTqa,EACE8I,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,EAC/B6oB,EAAY7oB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAAS4rB,GAAmB5C,GAC1BA,EAAQA,EAAQ,EAEhBrJ,GAAuBqJ,EAAQ,GAAK,IAAO,GAE3ChpB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS6rB,GAAc7C,GACrBA,EAAQA,EAAQ,EAEhBxK,IAEAxe,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS8rB,GAAa9C,GACpBA,EAAQA,EAAQ,EAEhBzK,IAEAve,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS+rB,GAAa/C,GACpBA,EAAQA,EAAQ,EAEhBtK,IAEA1e,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASgsB,GAAkBhD,GACzBA,EAAQA,EAAQ,EAEhBvK,IAEAze,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASisB,GAAajD,GACpBA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTia,EAAqB+I,EAAM1oB,EAAS,EAAK,GAAK,GAE9CA,EAAUA,EAAS,EAAM,EAEzB,OAAO,EAGT,SAASksB,GAAmBlD,GAC1BA,EAAQA,EAAQ,EAEhB,IAAIpO,EAAI,EACR,IAAIC,EAAI,EACR,IAAIzJ,EAAO,IACX,IAAI2F,EAAM,IACV,IAAIuD,EAAO,IACX,IAAIhgB,EAAI,IACR,GAAIoL,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTkV,EAAI8N,EAAM1oB,EAAS,EAAK,GAAK,EAC7B6a,EAAI6N,EAAM1oB,EAAS,EAAK,GAAK,EAE7B,IAAK4a,EAAI,GAAK,KAAM,CAClBxJ,GAAQ,IAGV2F,MAAU6D,EAAI,GAAK,OAAS,GAC5BN,MAAYM,EAAI,GAAK,OAAS,EAAKC,GAEnC,IAAK9D,GAAO,IAAK,CACfqH,KACIhN,GAAS,uBAA0BkJ,SAElC,IAAKvD,GAAO,KAAM,CACvB,IAAK3F,GAAQ,IAAK,CAChB,IAAKkJ,EAAO,IAAK,CACfuE,QACK,CACLF,SAEG,CACL,IAAKrE,EAAO,IAAK,CACfwE,QACK,CACLF,UAGC,CACLR,KACGhN,EAAOtK,GAAK,KAAMiQ,EAAM,SAAW,OAASuD,KAIjDta,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASmsB,GAAqBnD,GAC5BA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT2Y,EACEqK,EAAM1oB,EAAS,EAAK,GAAK,EACzB0oB,EAAM1oB,EAAS,EAAK,GAAK,EACzB0oB,EAAM1oB,EAAS,EAAK,GAAK,EACzB0oB,EAAM1oB,EAAS,EAAK,GAAK,GAG3BA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASosB,GAAqBpD,GAC5BA,EAAQA,EAAQ,EAEhB,GAAItjB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT4Y,EACEoK,EAAM1oB,EAAS,EAAK,GAAK,EACzB0oB,EAAM1oB,EAAS,EAAK,GAAK,EACzB0oB,EAAM1oB,EAAS,EAAK,GAAK,EACzB0oB,EAAM1oB,EAAS,EAAK,GAAK,EACzB0oB,EAAM1oB,EAAS,EAAK,GAAK,EACzB0oB,EAAM1oB,EAAS,EAAK,GAAK,EACzB0oB,EAAM1oB,EAAS,EAAK,GAAK,EACzB0oB,EAAM1oB,EAAS,EAAK,GAAK,GAG3BA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASqsB,GAAOrD,GACdA,EAAQA,EAAQ,EAEhB,OAAO,EAGT,SAASpP,GAAOoP,GACdA,EAAQA,EAAQ,EAEhBhJ,IAEAhgB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAKT,IAAI4oB,GAAY,CAEdG,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EAEAE,EAEAC,EAEAC,EAEAC,EACAiD,GACAA,GACAA,GACAA,GAEAhD,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EAEAC,EAEAC,EAEAC,GAEAC,GACA4C,GACAA,GACAA,GACAA,GAEA3U,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAiS,GAEAC,GAEAC,GAEAC,GACAuC,GACAA,GACAA,GAEAtC,GAEApS,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAqS,GAEAC,GAEAC,GAEAC,GAEAkC,GACAA,GACAA,GACAjC,GAEAxS,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAyS,GAEAC,GAEAC,GAEAC,GAEA6B,GACAA,GACAA,GACA5B,GAEA5S,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Borc\"] = factory();\n\telse\n\t\troot[\"Borc\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n/* eslint-disable no-proto */\n'use strict';\n\nvar base64 = require('base64-js');\n\nvar ieee754 = require('ieee754');\n\nvar isArray = require('isarray');\n\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\n\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();\n/*\n * Export kMaxLength after typed array support is determined.\n */\n\nexports.kMaxLength = kMaxLength();\n\nfunction typedArraySupport() {\n  try {\n    var arr = new Uint8Array(1);\n    arr.__proto__ = {\n      __proto__: Uint8Array.prototype,\n      foo: function foo() {\n        return 42;\n      }\n    };\n    return arr.foo() === 42 && // typed array instances can be augmented\n    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction kMaxLength() {\n  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n}\n\nfunction createBuffer(that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length');\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n\n    that.length = length;\n  }\n\n  return that;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length);\n  } // Common case.\n\n\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error('If encoding is specified then the first argument must be a string');\n    }\n\n    return allocUnsafe(this, arg);\n  }\n\n  return from(this, arg, encodingOrOffset, length);\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n// TODO: Legacy, not needed anymore. Remove in next major version.\n\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr;\n};\n\nfunction from(that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length);\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset);\n  }\n\n  return fromObject(that, value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\n\n\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length);\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n\n  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    });\n  }\n}\n\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number');\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative');\n  }\n}\n\nfunction alloc(that, size, fill, encoding) {\n  assertSize(size);\n\n  if (size <= 0) {\n    return createBuffer(that, size);\n  }\n\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n  }\n\n  return createBuffer(that, size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\n\n\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding);\n};\n\nfunction allocUnsafe(that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n\n  return that;\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\n\n\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\n\n\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size);\n};\n\nfunction fromString(that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding');\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that;\n}\n\nfunction fromArrayLike(that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n\n  return that;\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds');\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds');\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n\n  return that;\n}\n\nfunction fromObject(that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that;\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that;\n  }\n\n  if (obj) {\n    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0);\n      }\n\n      return fromArrayLike(that, obj);\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n}\n\nfunction checked(length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n  }\n\n  return length | 0;\n}\n\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    // eslint-disable-line eqeqeq\n    length = 0;\n  }\n\n  return Buffer.alloc(+length);\n}\n\nBuffer.isBuffer = function isBuffer(b) {\n  return !!(b != null && b._isBuffer);\n};\n\nBuffer.compare = function compare(a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers');\n  }\n\n  if (a === b) return 0;\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nBuffer.concat = function concat(list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n\n  var i;\n\n  if (length === undefined) {\n    length = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n\n  return buffer;\n};\n\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength;\n  }\n\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0; // Use a for loop to avoid recursion\n\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length;\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n\n      case 'hex':\n        return len >>> 1;\n\n      case 'base64':\n        return base64ToBytes(string).length;\n\n      default:\n        if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\nBuffer.byteLength = byteLength;\n\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n  if (start === undefined || start < 0) {\n    start = 0;\n  } // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n\n\n  if (start > this.length) {\n    return '';\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return '';\n  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return '';\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n\n      case 'ascii':\n        return asciiSlice(this, start, end);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n\n      case 'base64':\n        return base64Slice(this, start, end);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\n\n\nBuffer.prototype._isBuffer = true;\n\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n\n  return this;\n};\n\nBuffer.prototype.toString = function toString() {\n  var length = this.length | 0;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\n\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\n\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n\n  return '<Buffer ' + str + '>';\n};\n\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer');\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n\n  if (start >= end) {\n    return 1;\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n  if (this === target) return 0;\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\n\n\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1; // Normalize byteOffset\n\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n\n  byteOffset = +byteOffset; // Coerce to Number.\n\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n  } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  } // Normalize val\n\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1;\n    }\n\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n\n    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n\n  throw new TypeError('val must be string, number or Buffer');\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n\n  var i;\n\n  if (dir) {\n    var foundIndex = -1;\n\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n\n      if (found) return i;\n    }\n  }\n\n  return -1;\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\n\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n\n    if (length > remaining) {\n      length = remaining;\n    }\n  } // must be an even number of digits\n\n\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n\n  return i;\n}\n\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\n\nfunction latin1Write(buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length);\n}\n\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0; // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0; // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    } // legacy write(string, encoding, offset, length) - remove in v0.13\n\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n\n  if (!encoding) encoding = 'utf8';\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length);\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\n\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\n\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n  var i = start;\n\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = buf[i + 1];\n\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n} // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\n\n\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n  var res = '';\n  var i = 0;\n\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n\n  return res;\n}\n\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n\n  return ret;\n}\n\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n\n  return ret;\n}\n\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n  var out = '';\n\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n\n  return out;\n}\n\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n\n  return res;\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n  var newBuf;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\n\n\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n  if (end > this.length) end = this.length;\n\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n  }\n\n  return len;\n}; // Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\n\n\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n\n      if (code < 256) {\n        val = code;\n      }\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  } // Invalid ranges are not set to a default, so can range check early.\n\n\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return this;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this;\n}; // HELPER FUNCTIONS\n// ================\n\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean(str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n\n  return str;\n}\n\nfunction stringtrim(str) {\n  if (str.trim) return str.trim();\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i); // is surrogate component\n\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } // valid lead\n\n\n        leadSurrogate = codePoint;\n        continue;\n      } // 2 leads in a row\n\n\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      } // valid surrogate pair\n\n\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null; // encode utf8\n\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction asciiToBytes(str) {\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n\n  return byteArray;\n}\n\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray;\n}\n\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n\n  return i;\n}\n\nfunction isnan(val) {\n  return val !== val; // eslint-disable-line no-self-compare\n}","\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n;\n\n(function (globalObject) {\n  'use strict';\n  /*\r\n   *      bignumber.js v8.0.1\r\n   *      A JavaScript library for arbitrary-precision arithmetic.\r\n   *      https://github.com/MikeMcl/bignumber.js\r\n   *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *      MIT Licensed.\r\n   *\r\n   *      BigNumber.prototype methods     |  BigNumber methods\r\n   *                                      |\r\n   *      absoluteValue            abs    |  clone\r\n   *      comparedTo                      |  config               set\r\n   *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n   *      dividedBy                div    |      ROUNDING_MODE\r\n   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n   *      exponentiatedBy          pow    |      RANGE\r\n   *      integerValue                    |      CRYPTO\r\n   *      isEqualTo                eq     |      MODULO_MODE\r\n   *      isFinite                        |      POW_PRECISION\r\n   *      isGreaterThan            gt     |      FORMAT\r\n   *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n   *      isInteger                       |  isBigNumber\r\n   *      isLessThan               lt     |  maximum              max\r\n   *      isLessThanOrEqualTo      lte    |  minimum              min\r\n   *      isNaN                           |  random\r\n   *      isNegative                      |  sum\r\n   *      isPositive                      |\r\n   *      isZero                          |\r\n   *      minus                           |\r\n   *      modulo                   mod    |\r\n   *      multipliedBy             times  |\r\n   *      negated                         |\r\n   *      plus                            |\r\n   *      precision                sd     |\r\n   *      shiftedBy                       |\r\n   *      squareRoot               sqrt   |\r\n   *      toExponential                   |\r\n   *      toFixed                         |\r\n   *      toFormat                        |\r\n   *      toFraction                      |\r\n   *      toJSON                          |\r\n   *      toNumber                        |\r\n   *      toPrecision                     |\r\n   *      toString                        |\r\n   *      valueOf                         |\r\n   *\r\n   */\n\n  var BigNumber,\n      isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n      mathceil = Math.ceil,\n      mathfloor = Math.floor,\n      bignumberError = '[BigNumber Error] ',\n      tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n      BASE = 1e14,\n      LOG_BASE = 14,\n      MAX_SAFE_INTEGER = 0x1fffffffffffff,\n      // 2^53 - 1\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n      SQRT_BASE = 1e7,\n      // EDITABLE\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n  MAX = 1E9; // 0 to MAX_INT32\n\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\n\n  function clone(configObject) {\n    var div,\n        convertBase,\n        parseNumeric,\n        P = BigNumber.prototype = {\n      constructor: BigNumber,\n      toString: null,\n      valueOf: null\n    },\n        ONE = new BigNumber(1),\n        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n    // The default values below must be integers within the inclusive ranges stated.\n    // The values can also be changed at run-time using BigNumber.set.\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,\n        // 0 to MAX\n    // The rounding mode used when rounding to the above decimal places, and when using\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n    // UP         0 Away from zero.\n    // DOWN       1 Towards zero.\n    // CEIL       2 Towards +Infinity.\n    // FLOOR      3 Towards -Infinity.\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    ROUNDING_MODE = 4,\n        // 0 to 8\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,\n        // 0 to -MAX\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,\n        // 0 to MAX\n    // RANGE : [MIN_EXP, MAX_EXP]\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7,\n        // -1 to -MAX\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7,\n        // 1 to MAX\n    // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false,\n        // true or false\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN      1 The remainder has the same sign as the dividend.\n    //             This modulo mode is commonly known as 'truncated division' and is\n    //             equivalent to (a % n) in JavaScript.\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n    //             The remainder is always positive.\n    //\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n    // modes are commonly used for the modulus operation.\n    // Although the other rounding modes can also be used, they may not give useful results.\n    MODULO_MODE = 1,\n        // 0 to 9\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 0,\n        // 0 to MAX\n    // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n      prefix: '',\n      groupSize: 3,\n      secondaryGroupSize: 0,\n      groupSeparator: ',',\n      decimalSeparator: '.',\n      fractionGroupSize: 0,\n      fractionGroupSeparator: '\\xA0',\n      // non-breaking space\n      suffix: ''\n    },\n        // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n    // '-', '.', whitespace, or repeated character.\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------\n    // CONSTRUCTOR\n\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\n\n    function BigNumber(n, b) {\n      var alphabet,\n          c,\n          caseChanged,\n          e,\n          i,\n          isNum,\n          len,\n          str,\n          x = this; // Enable constructor usage without new.\n\n      if (!(x instanceof BigNumber)) {\n        // Don't throw on constructor call without new (#81).\n        // '[BigNumber Error] Constructor call without new: {n}'\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\n        return new BigNumber(n, b);\n      }\n\n      if (b == null) {\n        // Duplicate.\n        if (n instanceof BigNumber) {\n          x.s = n.s;\n          x.e = n.e;\n          x.c = (n = n.c) ? n.slice() : n;\n          return;\n        }\n\n        isNum = typeof n == 'number';\n\n        if (isNum && n * 0 == 0) {\n          // Use `1 / n` to handle minus zero also.\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1; // Faster path for integers.\n\n          if (n === ~~n) {\n            for (e = 0, i = n; i >= 10; i /= 10, e++) {\n              ;\n            }\n\n            x.e = e;\n            x.c = [n];\n            return;\n          }\n\n          str = String(n);\n        } else {\n          str = String(n);\n          if (!isNumeric.test(str)) return parseNumeric(x, str, isNum);\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n        } // Decimal point?\n\n\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n        if ((i = str.search(/e/i)) > 0) {\n          // Determine exponent.\n          if (e < 0) e = i;\n          e += +str.slice(i + 1);\n          str = str.substring(0, i);\n        } else if (e < 0) {\n          // Integer.\n          e = str.length;\n        }\n      } else {\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n        intCheck(b, 2, ALPHABET.length, 'Base');\n        str = String(n); // Allow exponential notation to be used with base 10 argument, while\n        // also rounding to DECIMAL_PLACES as with other bases.\n\n        if (b == 10) {\n          x = new BigNumber(n instanceof BigNumber ? n : str);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n\n        isNum = typeof n == 'number';\n\n        if (isNum) {\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            throw Error(tooManyDigits + n);\n          } // Prevent later check for length on converted number.\n\n\n          isNum = false;\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        alphabet = ALPHABET.slice(0, b);\n        e = i = 0; // Check that str is a valid base b number.\n        // Don't use RegExp so alphabet can contain special characters.\n\n        for (len = str.length; i < len; i++) {\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n            if (c == '.') {\n              // If '.' is not the first character and it has not be found before.\n              if (i > e) {\n                e = len;\n                continue;\n              }\n            } else if (!caseChanged) {\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                caseChanged = true;\n                i = -1;\n                e = 0;\n                continue;\n              }\n            }\n\n            return parseNumeric(x, String(n), isNum, b);\n          }\n        }\n\n        str = convertBase(str, b, 10, x.s); // Decimal point?\n\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n      } // Determine leading zeros.\n\n\n      for (i = 0; str.charCodeAt(i) === 48; i++) {\n        ;\n      } // Determine trailing zeros.\n\n\n      for (len = str.length; str.charCodeAt(--len) === 48;) {\n        ;\n      }\n\n      str = str.slice(i, ++len);\n\n      if (str) {\n        len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n        if (isNum && BigNumber.DEBUG && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n          throw Error(tooManyDigits + x.s * n);\n        }\n\n        e = e - i - 1; // Overflow?\n\n        if (e > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null; // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = []; // Transform base\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE;\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n\n            str = str.slice(i);\n            i = LOG_BASE - str.length;\n          } else {\n            i -= len;\n          }\n\n          for (; i--; str += '0') {\n            ;\n          }\n\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n    } // CONSTRUCTOR PROPERTIES\n\n\n    BigNumber.clone = clone;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\n\n    BigNumber.config = BigNumber.set = function (obj) {\n      var p, v;\n\n      if (obj != null) {\n        if (_typeof(obj) == 'object') {\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            DECIMAL_PLACES = v;\n          } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 8, p);\n            ROUNDING_MODE = v;\n          } // EXPONENTIAL_AT {number|number[]}\n          // Integer, -MAX to MAX inclusive or\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n            v = obj[p];\n\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, 0, p);\n              intCheck(v[1], 0, MAX, p);\n              TO_EXP_NEG = v[0];\n              TO_EXP_POS = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n            }\n          } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'RANGE')) {\n            v = obj[p];\n\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, -1, p);\n              intCheck(v[1], 1, MAX, p);\n              MIN_EXP = v[0];\n              MAX_EXP = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n\n              if (v) {\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n              } else {\n                throw Error(bignumberError + p + ' cannot be zero: ' + v);\n              }\n            }\n          } // CRYPTO {boolean} true or false.\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\n          // '[BigNumber Error] crypto unavailable'\n\n\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\n            v = obj[p];\n\n            if (v === !!v) {\n              if (v) {\n                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                  CRYPTO = v;\n                } else {\n                  CRYPTO = !v;\n                  throw Error(bignumberError + 'crypto unavailable');\n                }\n              } else {\n                CRYPTO = v;\n              }\n            } else {\n              throw Error(bignumberError + p + ' not true or false: ' + v);\n            }\n          } // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 9, p);\n            MODULO_MODE = v;\n          } // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            POW_PRECISION = v;\n          } // FORMAT {object}\n          // '[BigNumber Error] FORMAT not an object: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\n            v = obj[p];\n            if (_typeof(v) == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n          } // ALPHABET {string}\n          // '[BigNumber Error] ALPHABET invalid: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\n            v = obj[p]; // Disallow if only one character,\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\n\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\n              ALPHABET = v;\n            } else {\n              throw Error(bignumberError + p + ' invalid: ' + v);\n            }\n          }\n        } else {\n          // '[BigNumber Error] Object expected: {v}'\n          throw Error(bignumberError + 'Object expected: ' + obj);\n        }\n      }\n\n      return {\n        DECIMAL_PLACES: DECIMAL_PLACES,\n        ROUNDING_MODE: ROUNDING_MODE,\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n        RANGE: [MIN_EXP, MAX_EXP],\n        CRYPTO: CRYPTO,\n        MODULO_MODE: MODULO_MODE,\n        POW_PRECISION: POW_PRECISION,\n        FORMAT: FORMAT,\n        ALPHABET: ALPHABET\n      };\n    };\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\n\n\n    BigNumber.isBigNumber = function (v) {\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.maximum = BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.minimum = BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\n\n\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n            b,\n            e,\n            k,\n            v,\n            i = 0,\n            c = [],\n            rand = new BigNumber(ONE);\n        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n        k = mathceil(dp / LOG_BASE);\n\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n\n            i = k / 2; // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            throw Error(bignumberError + 'crypto unavailable');\n          }\n        } // Use Math.random.\n\n\n        if (!CRYPTO) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n\n        k = c[--i];\n        dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        } // Remove trailing elements which are zero.\n\n\n        for (; c[i] === 0; c.pop(), i--) {\n          ;\n        } // Zero?\n\n\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) {\n            ;\n          } // Count the digits of the first element of c to determine leading zeros, and...\n\n\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++) {\n            ;\n          } // adjust the exponent accordingly.\n\n\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }();\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.sum = function () {\n      var i = 1,\n          args = arguments,\n          sum = new BigNumber(args[0]);\n\n      for (; i < args.length;) {\n        sum = sum.plus(args[i++]);\n      }\n\n      return sum;\n    }; // PRIVATE FUNCTIONS\n    // Called by BigNumber and BigNumber.prototype.toString.\n\n\n    convertBase = function () {\n      var decimal = '0123456789';\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\n\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for (; i < len;) {\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) {\n            ;\n          }\n\n          arr[0] += alphabet.indexOf(str.charAt(i++));\n\n          for (j = 0; j < arr.length; j++) {\n            if (arr[j] > baseOut - 1) {\n              if (arr[j + 1] == null) arr[j + 1] = 0;\n              arr[j + 1] += arr[j] / baseOut | 0;\n              arr[j] %= baseOut;\n            }\n          }\n        }\n\n        return arr.reverse();\n      } // Convert a numeric string of baseIn to a numeric string of baseOut.\n      // If the caller is toString, we are converting from base 10 to baseOut.\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\n\n\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\n        var alphabet,\n            d,\n            e,\n            k,\n            r,\n            x,\n            xc,\n            y,\n            i = str.indexOf('.'),\n            dp = DECIMAL_PLACES,\n            rm = ROUNDING_MODE; // Non-integer.\n\n        if (i >= 0) {\n          k = POW_PRECISION; // Unlimited precision.\n\n          POW_PRECISION = 0;\n          str = str.replace('.', '');\n          y = new BigNumber(baseIn);\n          x = y.pow(str.length - i);\n          POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n          // result by its base raised to a power.\n\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n          y.e = y.c.length;\n        } // Convert the number as integer.\n\n\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.\n\n        e = k = xc.length; // Remove trailing zeros.\n\n        for (; xc[--k] == 0; xc.pop()) {\n          ;\n        } // Zero?\n\n\n        if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.\n\n        if (i < 0) {\n          --e;\n        } else {\n          x.c = xc;\n          x.e = e; // The sign is needed for correct rounding.\n\n          x.s = sign;\n          x = div(x, y, dp, rm, baseOut);\n          xc = x.c;\n          r = x.r;\n          e = x.e;\n        } // xc now represents str converted to baseOut.\n        // THe index of the rounding digit.\n\n\n        d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.\n\n        i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.\n\n        k = baseOut / 2;\n        r = r || d < 0 || xc[d + 1] != null;\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\n        // such as 0.00001.\n\n        if (d < 1 || !xc[0]) {\n          // 1^-dp or 0\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n        } else {\n          // Truncate xc to the required number of decimal places.\n          xc.length = d; // Round up?\n\n          if (r) {\n            // Rounding up may mean the previous digit has to be rounded up and so on.\n            for (--baseOut; ++xc[--d] > baseOut;) {\n              xc[d] = 0;\n\n              if (!d) {\n                ++e;\n                xc = [1].concat(xc);\n              }\n            }\n          } // Determine trailing zeros.\n\n\n          for (k = xc.length; !xc[--k];) {\n            ;\n          } // E.g. [4, 11, 15] becomes 4bf.\n\n\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])) {\n            ;\n          } // Add leading zeros, decimal point and trailing zeros as required.\n\n\n          str = toFixedPoint(str, e, alphabet.charAt(0));\n        } // The caller will add the sign.\n\n\n        return str;\n      };\n    }(); // Perform division in the specified base. Called by div and convertBase.\n\n\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n            temp,\n            xlo,\n            xhi,\n            carry = 0,\n            i = x.length,\n            klo = k % SQRT_BASE,\n            khi = k / SQRT_BASE | 0;\n\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n\n        if (carry) x = [carry].concat(x);\n        return x;\n      }\n\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        return cmp;\n      }\n\n      function subtract(a, b, aL, base) {\n        var i = 0; // Subtract b from a.\n\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        } // Remove leading zeros.\n\n\n        for (; !a[0] && a.length > 1; a.splice(0, 1)) {\n          ;\n        }\n      } // x: dividend, y: divisor.\n\n\n      return function (x, y, dp, rm, base) {\n        var cmp,\n            e,\n            i,\n            more,\n            n,\n            prod,\n            prodL,\n            q,\n            qc,\n            rem,\n            remL,\n            rem0,\n            xi,\n            xL,\n            yc0,\n            yL,\n            yz,\n            s = x.s == y.s ? 1 : -1,\n            xc = x.c,\n            yc = y.c; // Either NaN, Infinity or 0?\n\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        } // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n        for (i = 0; yc[i] == (xc[i] || 0); i++) {\n          ;\n        }\n\n        if (yc[i] > (xc[i] || 0)) e--;\n\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n          for (; remL < yL; rem[remL++] = 0) {\n            ;\n          }\n\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0; // Compare divisor and remainder.\n\n            cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n              n = mathfloor(rem0 / yc0); //  Algorithm:\n              //  product = divisor multiplied by trial digit (n).\n              //  Compare product and remainder.\n              //  If product is greater than remainder:\n              //    Subtract divisor from product, decrement trial digit.\n              //  Subtract product from remainder.\n              //  If product was less than remainder at the last compare:\n              //    Compare new remainder and divisor.\n              //    If remainder is greater than divisor:\n              //      Subtract divisor from remainder, increment trial digit.\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length; // Compare product and remainder.\n                // If product > remainder then trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--; // Subtract divisor from product.\n\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                } // product = divisor\n\n\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n\n              if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n              subtract(rem, prod, remL, base);\n              remL = rem.length; // If product was < remainder.\n\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++; // Subtract divisor from remainder.\n\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n            // Add the next digit, n, to the result array.\n\n\n            qc[i++] = n; // Update the remainder.\n\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n\n          more = rem[0] != null; // Leading zero?\n\n          if (!qc[0]) qc.splice(0, 1);\n        }\n\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) {\n            ;\n          }\n\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n\n        return q;\n      };\n    }();\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\n\n\n    function format(n, i, rm, id) {\n      var c0, e, ne, len, str;\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = id == 1 || id == 2 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n      } else {\n        n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length; // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n        // Exponential notation.\n\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++) {\n            ;\n          }\n\n          str = toExponential(str, e); // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e, '0'); // Append zeros?\n\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0') {\n              ;\n            }\n          } else {\n            i += e - len;\n\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n\n              for (; i--; str += '0') {\n                ;\n              }\n            }\n          }\n        }\n      }\n\n      return n.s < 0 && c0 ? '-' + str : str;\n    } // Handle BigNumber.max and BigNumber.min.\n\n\n    function maxOrMin(args, method) {\n      var n,\n          i = 1,\n          m = new BigNumber(args[0]);\n\n      for (; i < args.length; i++) {\n        n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n\n      return m;\n    }\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\n\n\n    function normalise(n, c, e) {\n      var i = 1,\n          j = c.length; // Remove trailing zeros.\n\n      for (; !c[--j]; c.pop()) {\n        ;\n      } // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n      for (j = c[0]; j >= 10; j /= 10, i++) {\n        ;\n      } // Overflow?\n\n\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null; // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n\n      return n;\n    } // Handle values that fail the validity test in BigNumber.\n\n\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n          dotAfter = /^([^.]+)\\.$/,\n          dotBefore = /^\\.([^.]+)$/,\n          isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n          whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n      return function (x, str, isNum, b) {\n        var base,\n            s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n          x.c = x.e = null;\n        } else {\n          if (!isNum) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n\n            if (b) {\n              base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n\n            if (str != s) return new BigNumber(s, base);\n          } // '[BigNumber Error] Not a number: {n}'\n          // '[BigNumber Error] Not a base {b} number: {n}'\n\n\n          if (BigNumber.DEBUG) {\n            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n          } // NaN\n\n\n          x.c = x.e = x.s = null;\n        }\n      };\n    }();\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\n\n\n    function round(x, sd, rm, r) {\n      var d,\n          i,\n          j,\n          k,\n          n,\n          ni,\n          rd,\n          xc = x.c,\n          pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) {\n            ;\n          }\n\n          i = sd - d; // If the rounding digit is in the first element of xc...\n\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0)) {\n                  ;\n                }\n\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni]; // Get the number of digits of n.\n\n              for (d = 1; k >= 10; k /= 10, d++) {\n                ;\n              } // Get the index of rd within n.\n\n\n              i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n\n              j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n\n          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n\n            return x;\n          } // Remove excess digits.\n\n\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          } // Round up?\n\n\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) {\n                  ;\n                }\n\n                j = xc[0] += k;\n\n                for (k = 1; j >= 10; j /= 10, k++) {\n                  ;\n                } // if i != k the length has increased.\n\n\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          } // Remove trailing zeros.\n\n\n          for (i = xc.length; xc[--i] === 0; xc.pop()) {\n            ;\n          }\n        } // Overflow? Infinity.\n\n\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null; // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n\n      return x;\n    }\n\n    function valueOf(n) {\n      var str,\n          e = n.e;\n      if (e === null) return n.toString();\n      str = coeffToString(n.c);\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n      return n.s < 0 ? '-' + str : str;\n    } // PROTOTYPE/INSTANCE METHODS\n\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\n\n\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\n\n\n    P.comparedTo = function (y, b) {\n      return compare(this, new BigNumber(y, b));\n    };\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.decimalPlaces = P.dp = function (dp, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), dp + x.e + 1, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) {\n        ;\n      }\n      if (n < 0) n = 0;\n      return n;\n    };\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.dividedBy = P.div = function (y, b) {\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\n\n\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\n\n\n    P.exponentiatedBy = P.pow = function (n, m) {\n      var half,\n          isModExp,\n          i,\n          k,\n          more,\n          nIsBig,\n          nIsNeg,\n          nIsOdd,\n          y,\n          x = this;\n      n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.\n\n      if (n.c && !n.isInteger()) {\n        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n      }\n\n      if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.\n\n      nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n        // The sign of the result of pow when x is negative depends on the evenness of n.\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n        return m ? y.mod(m) : y;\n      }\n\n      nIsNeg = n.s < 0;\n\n      if (m) {\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n        if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n        // If x is negative and n is odd, k = -0, else k = 0.\n        k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.\n\n        if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.\n\n        return new BigNumber(nIsNeg ? 1 / k : k);\n      } else if (POW_PRECISION) {\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n\n      if (nIsBig) {\n        half = new BigNumber(0.5);\n        if (nIsNeg) n.s = 1;\n        nIsOdd = isOdd(n);\n      } else {\n        i = Math.abs(+valueOf(n));\n        nIsOdd = i % 2;\n      }\n\n      y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.\n\n      for (;;) {\n        if (nIsOdd) {\n          y = y.times(x);\n          if (!y.c) break;\n\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (isModExp) {\n            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n          }\n        }\n\n        if (i) {\n          i = mathfloor(i / 2);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        } else {\n          n = n.times(half);\n          round(n, n.e + 1, 1);\n\n          if (n.e > 14) {\n            nIsOdd = isOdd(n);\n          } else {\n            i = +valueOf(n);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          }\n        }\n\n        x = x.times(x);\n\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (isModExp) {\n          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (isModExp) return y;\n      if (nIsNeg) y = ONE.div(y);\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\n\n\n    P.integerValue = function (rm) {\n      var n = new BigNumber(this);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(n, n.e + 1, rm);\n    };\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isEqualTo = P.eq = function (y, b) {\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\n\n\n    P.isFinite = function () {\n      return !!this.c;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isGreaterThan = P.gt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n\n\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\n\n\n    P.isInteger = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isLessThan = P.lt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n\n\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\n\n\n    P.isNaN = function () {\n      return !this.s;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\n\n\n    P.isNegative = function () {\n      return this.s < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\n\n\n    P.isPositive = function () {\n      return this.s > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\n\n\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.minus = function (y, b) {\n      var i,\n          j,\n          t,\n          xLTy,\n          x = this,\n          a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Determine which is the bigger number.\n\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n\n        t.reverse(); // Prepend zeros to equalise exponents.\n\n        for (b = a; b--; t.push(0)) {\n          ;\n        }\n\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      } // x < y? Point xc to the array of the bigger number.\n\n\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n      b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n      if (b > 0) for (; b--; xc[i++] = 0) {\n        ;\n      }\n      b = BASE - 1; // Subtract yc from xc.\n\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b) {\n            ;\n          }\n\n          --xc[i];\n          xc[j] += BASE;\n        }\n\n        xc[j] -= yc[j];\n      } // Remove leading zeros and adjust exponent accordingly.\n\n\n      for (; xc[0] == 0; xc.splice(0, 1), --ye) {\n        ;\n      } // Zero?\n\n\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\n\n\n    P.modulo = P.mod = function (y, b) {\n      var q,\n          s,\n          x = this;\n      y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n\n      y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.\n\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n      return y;\n    };\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\n\n\n    P.multipliedBy = P.times = function (y, b) {\n      var c,\n          e,\n          i,\n          j,\n          k,\n          m,\n          xcL,\n          xlo,\n          xhi,\n          ycL,\n          ylo,\n          yhi,\n          zc,\n          base,\n          sqrtBase,\n          x = this,\n          xc = x.c,\n          yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n          if (!xc || !yc) {\n            y.c = y.e = null; // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n\n        return y;\n      }\n\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n      for (i = xcL + ycL, zc = []; i--; zc.push(0)) {\n        ;\n      }\n\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n\n        zc[j] = c;\n      }\n\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n\n      return normalise(y, zc, e);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\n\n\n    P.negated = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.plus = function (y, b) {\n      var t,\n          x = this,\n          a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n\n        t.reverse();\n\n        for (; a--; t.push(0)) {\n          ;\n        }\n\n        t.reverse();\n      }\n\n      a = xc.length;\n      b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n\n\n    P.precision = P.sd = function (sd, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (sd != null && sd !== !!sd) {\n        intCheck(sd, 1, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), sd, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--) {\n          ;\n        } // Add the number of digits of the first element.\n\n\n        for (v = c[0]; v >= 10; v /= 10, n++) {\n          ;\n        }\n      }\n\n      if (sd && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\n\n\n    P.shiftedBy = function (k) {\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      return this.times('1e' + k);\n    };\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.squareRoot = P.sqrt = function () {\n      var m,\n          n,\n          r,\n          rep,\n          t,\n          x = this,\n          c = x.c,\n          s = x.s,\n          e = x.e,\n          dp = DECIMAL_PLACES + 4,\n          half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      } // Initial estimate.\n\n\n      s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(+n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n        if (s == 1 / 0) {\n          n = '1e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      } // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n\n\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0; // Newton-Raphson iteration.\n\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.toExponential = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp++;\n      }\n\n      return format(this, dp, rm, 1);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.toFixed = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp = dp + this.e + 1;\n      }\n\n      return format(this, dp, rm);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\n\n\n    P.toFormat = function (dp, rm, format) {\n      var str,\n          x = this;\n\n      if (format == null) {\n        if (dp != null && rm && _typeof(rm) == 'object') {\n          format = rm;\n          rm = null;\n        } else if (dp && _typeof(dp) == 'object') {\n          format = dp;\n          dp = rm = null;\n        } else {\n          format = FORMAT;\n        }\n      } else if (_typeof(format) != 'object') {\n        throw Error(bignumberError + 'Argument not an object: ' + format);\n      }\n\n      str = x.toFixed(dp, rm);\n\n      if (x.c) {\n        var i,\n            arr = str.split('.'),\n            g1 = +format.groupSize,\n            g2 = +format.secondaryGroupSize,\n            groupSeparator = format.groupSeparator || '',\n            intPart = arr[0],\n            fractionPart = arr[1],\n            isNeg = x.s < 0,\n            intDigits = isNeg ? intPart.slice(1) : intPart,\n            len = intDigits.length;\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n\n          for (; i < len; i += g1) {\n            intPart += groupSeparator + intDigits.substr(i, g1);\n          }\n\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n\n        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n      }\n\n      return (format.prefix || '') + str + (format.suffix || '');\n    };\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\n\n\n    P.toFraction = function (md) {\n      var d,\n          d0,\n          d1,\n          d2,\n          e,\n          exp,\n          n,\n          n0,\n          n1,\n          q,\n          r,\n          s,\n          x = this,\n          xc = x.c;\n\n      if (md != null) {\n        n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.\n\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n        }\n      }\n\n      if (!xc) return new BigNumber(x);\n      d = new BigNumber(ONE);\n      n1 = d0 = new BigNumber(ONE);\n      d1 = n0 = new BigNumber(ONE);\n      s = coeffToString(xc); // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s); // n0 = d1 = 0\n\n      n0.c[0] = 0;\n\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.comparedTo(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n      MAX_EXP = exp;\n      return r;\n    };\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\n\n\n    P.toNumber = function () {\n      return +valueOf(this);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n\n\n    P.toPrecision = function (sd, rm) {\n      if (sd != null) intCheck(sd, 1, MAX);\n      return format(this, sd, rm, 2);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\n\n\n    P.toString = function (b) {\n      var str,\n          n = this,\n          s = n.s,\n          e = n.e; // Infinity or NaN?\n\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        str = coeffToString(n.c);\n\n        if (b == null) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n        } else {\n          intCheck(b, 2, ALPHABET.length, 'Base');\n          str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\n        }\n\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n\n      return str;\n    };\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\n\n\n    P.valueOf = P.toJSON = function () {\n      return valueOf(this);\n    };\n\n    P._isBigNumber = true;\n\n    if (typeof Symbol == 'function' && _typeof(Symbol.iterator) == 'symbol') {\n      P[Symbol.toStringTag] = 'BigNumber'; // Node.js v10.12.0+\n\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\n    }\n\n    if (configObject != null) BigNumber.set(configObject);\n    return BigNumber;\n  } // PRIVATE HELPER FUNCTIONS\n\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  } // Return a coefficient array as a string of base 10 digits.\n\n\n  function coeffToString(a) {\n    var s,\n        z,\n        i = 1,\n        j = a.length,\n        r = a[0] + '';\n\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n\n      for (; z--; s = '0' + s) {\n        ;\n      }\n\n      r += s;\n    } // Determine trailing zeros.\n\n\n    for (j = r.length; r.charCodeAt(--j) === 48;) {\n      ;\n    }\n\n    return r.slice(0, j + 1 || 1);\n  } // Compare the value of BigNumbers x and y.\n\n\n  function compare(x, y) {\n    var a,\n        b,\n        xc = x.c,\n        yc = y.c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e; // Either NaN?\n\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0]; // Either zero?\n\n    if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l; // Either Infinity?\n\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n    for (i = 0; i < j; i++) {\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n    } // Compare lengths.\n\n\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\n\n\n  function intCheck(n, min, max, name) {\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\n      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n    }\n  } // Assumes finite n.\n\n\n  function isOdd(n) {\n    var k = n.c.length - 1;\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n  }\n\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n\n  function toFixedPoint(str, e, z) {\n    var len, zs; // Negative exponent?\n\n    if (e < 0) {\n      // Prepend zeros.\n      for (zs = z + '.'; ++e; zs += z) {\n        ;\n      }\n\n      str = zs + str; // Positive exponent\n    } else {\n      len = str.length; // Append zeros.\n\n      if (++e > len) {\n        for (zs = z, e -= len; --e; zs += z) {\n          ;\n        }\n\n        str += zs;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    return str;\n  } // EXPORT\n\n\n  BigNumber = clone();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.\n\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    }); // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber; // Browser.\n  } else {\n    if (!globalObject) {\n      globalObject = typeof self != 'undefined' && self ? self : window;\n    }\n\n    globalObject.BigNumber = BigNumber;\n  }\n})(void 0);","'use strict'\n\nconst Bignumber = require('bignumber.js')\n\nexports.MT = {\n  POS_INT: 0,\n  NEG_INT: 1,\n  BYTE_STRING: 2,\n  UTF8_STRING: 3,\n  ARRAY: 4,\n  MAP: 5,\n  TAG: 6,\n  SIMPLE_FLOAT: 7\n}\n\nexports.TAG = {\n  DATE_STRING: 0,\n  DATE_EPOCH: 1,\n  POS_BIGINT: 2,\n  NEG_BIGINT: 3,\n  DECIMAL_FRAC: 4,\n  BIGFLOAT: 5,\n  BASE64URL_EXPECTED: 21,\n  BASE64_EXPECTED: 22,\n  BASE16_EXPECTED: 23,\n  CBOR: 24,\n  URI: 32,\n  BASE64URL: 33,\n  BASE64: 34,\n  REGEXP: 35,\n  MIME: 36\n}\n\nexports.NUMBYTES = {\n  ZERO: 0,\n  ONE: 24,\n  TWO: 25,\n  FOUR: 26,\n  EIGHT: 27,\n  INDEFINITE: 31\n}\n\nexports.SIMPLE = {\n  FALSE: 20,\n  TRUE: 21,\n  NULL: 22,\n  UNDEFINED: 23\n}\n\nexports.SYMS = {\n  NULL: Symbol('null'),\n  UNDEFINED: Symbol('undef'),\n  PARENT: Symbol('parent'),\n  BREAK: Symbol('break'),\n  STREAM: Symbol('stream')\n}\n\nexports.SHIFT32 = Math.pow(2, 32)\nexports.SHIFT16 = Math.pow(2, 16)\n\nexports.MAX_SAFE_HIGH = 0x1fffff\nexports.NEG_ONE = new Bignumber(-1)\nexports.TEN = new Bignumber(10)\nexports.TWO = new Bignumber(2)\n\nexports.PARENT = {\n  ARRAY: 0,\n  OBJECT: 1,\n  MAP: 2,\n  TAG: 3,\n  BYTE_STRING: 4,\n  UTF8_STRING: 5\n}\n","'use strict'\n\nconst Bignumber = require('bignumber.js')\n\nconst constants = require('./constants')\nconst SHIFT32 = constants.SHIFT32\nconst SHIFT16 = constants.SHIFT16\nconst MAX_SAFE_HIGH = 0x1fffff\n\nexports.parseHalf = function parseHalf (buf) {\n  var exp, mant, sign\n  sign = buf[0] & 0x80 ? -1 : 1\n  exp = (buf[0] & 0x7C) >> 2\n  mant = ((buf[0] & 0x03) << 8) | buf[1]\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308)\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant)\n  }\n}\n\nfunction toHex (n) {\n  if (n < 16) {\n    return '0' + n.toString(16)\n  }\n\n  return n.toString(16)\n}\n\nexports.arrayBufferToBignumber = function (buf) {\n  const len = buf.byteLength\n  let res = ''\n  for (let i = 0; i < len; i++) {\n    res += toHex(buf[i])\n  }\n\n  return new Bignumber(res, 16)\n}\n\n// convert an Object into a Map\nexports.buildMap = (obj) => {\n  const res = new Map()\n  const keys = Object.keys(obj)\n  const length = keys.length\n  for (let i = 0; i < length; i++) {\n    res.set(keys[i], obj[keys[i]])\n  }\n  return res\n}\n\nexports.buildInt32 = (f, g) => {\n  return f * SHIFT16 + g\n}\n\nexports.buildInt64 = (f1, f2, g1, g2) => {\n  const f = exports.buildInt32(f1, f2)\n  const g = exports.buildInt32(g1, g2)\n\n  if (f > MAX_SAFE_HIGH) {\n    return new Bignumber(f).times(SHIFT32).plus(g)\n  } else {\n    return (f * SHIFT32) + g\n  }\n}\n\nexports.writeHalf = function writeHalf (buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4)\n  u32.writeFloatBE(half, 0)\n  const u = u32.readUInt32BE(0)\n\n  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion\n  if ((u & 0x1FFF) !== 0) {\n    return false\n  }\n\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  var s16 = (u >> 16) & 0x8000 // top bit is sign\n  const exp = (u >> 23) & 0xff // then 5 bits of exponent\n  const mant = u & 0x7fffff\n\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n  if ((exp >= 113) && (exp <= 142)) {\n    s16 += ((exp - 112) << 10) + (mant >> 13)\n\n  //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n  //     if (mant & ((1 << (126 - exp)) - 1))\n  //       goto float32;         /* loss of precision */\n  //     s16 += ((mant + 0x800000) >> (126 - exp));\n  } else if ((exp >= 103) && (exp < 113)) {\n    if (mant & ((1 << (126 - exp)) - 1)) {\n      return false\n    }\n    s16 += ((mant + 0x800000) >> (126 - exp))\n\n    //   } else if (exp == 255 && mant == 0) { /* Inf */\n    //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n  //   } else\n  //     goto float32;           /* loss of range */\n  } else {\n    return false\n  }\n\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16, 0)\n  return true\n}\n\nexports.keySorter = function (a, b) {\n  var lenA = a[0].byteLength\n  var lenB = b[0].byteLength\n\n  if (lenA > lenB) {\n    return 1\n  }\n\n  if (lenB > lenA) {\n    return -1\n  }\n\n  return a[0].compare(b[0])\n}\n\n// Adapted from http://www.2ality.com/2012/03/signedzero.html\nexports.isNegativeZero = (x) => {\n  return x === 0 && (1 / x < 0)\n}\n\nexports.nextPowerOf2 = (n) => {\n  let count = 0\n  // First n in the below condition is for\n  // the case where n is 0\n  if (n && !(n & (n - 1))) {\n    return n\n  }\n\n  while (n !== 0) {\n    n >>= 1\n    count += 1\n  }\n\n  return 1 << count\n}\n","\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;","\"use strict\";\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = e << mLen | m;\n  eLen += mLen;\n\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};","'use strict'\n\nconst ieee754 = require('ieee754')\nconst Bignumber = require('bignumber.js')\n\nconst parser = require('./decoder.asm')\nconst utils = require('./utils')\nconst c = require('./constants')\nconst Simple = require('./simple')\nconst Tagged = require('./tagged')\nconst { URL } = require('iso-url')\n\n/**\n * Transform binary cbor data into JavaScript objects.\n */\nclass Decoder {\n  /**\n   * @param {Object} [opts={}]\n   * @param {number} [opts.size=65536] - Size of the allocated heap.\n   */\n  constructor (opts) {\n    opts = opts || {}\n\n    if (!opts.size || opts.size < 0x10000) {\n      opts.size = 0x10000\n    } else {\n      // Ensure the size is a power of 2\n      opts.size = utils.nextPowerOf2(opts.size)\n    }\n\n    // Heap use to share the input with the parser\n    this._heap = new ArrayBuffer(opts.size)\n    this._heap8 = new Uint8Array(this._heap)\n    this._buffer = Buffer.from(this._heap)\n\n    this._reset()\n\n    // Known tags\n    this._knownTags = Object.assign({\n      0: (val) => new Date(val),\n      1: (val) => new Date(val * 1000),\n      2: (val) => utils.arrayBufferToBignumber(val),\n      3: (val) => c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),\n      4: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TEN.pow(v[0]).times(v[1])\n      },\n      5: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TWO.pow(v[0]).times(v[1])\n      },\n      32: (val) => new URL(val),\n      35: (val) => new RegExp(val)\n    }, opts.tags)\n\n    // Initialize asm based parser\n    this.parser = parser(global, {\n      log: console.log.bind(console),\n      pushInt: this.pushInt.bind(this),\n      pushInt32: this.pushInt32.bind(this),\n      pushInt32Neg: this.pushInt32Neg.bind(this),\n      pushInt64: this.pushInt64.bind(this),\n      pushInt64Neg: this.pushInt64Neg.bind(this),\n      pushFloat: this.pushFloat.bind(this),\n      pushFloatSingle: this.pushFloatSingle.bind(this),\n      pushFloatDouble: this.pushFloatDouble.bind(this),\n      pushTrue: this.pushTrue.bind(this),\n      pushFalse: this.pushFalse.bind(this),\n      pushUndefined: this.pushUndefined.bind(this),\n      pushNull: this.pushNull.bind(this),\n      pushInfinity: this.pushInfinity.bind(this),\n      pushInfinityNeg: this.pushInfinityNeg.bind(this),\n      pushNaN: this.pushNaN.bind(this),\n      pushNaNNeg: this.pushNaNNeg.bind(this),\n      pushArrayStart: this.pushArrayStart.bind(this),\n      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),\n      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),\n      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),\n      pushObjectStart: this.pushObjectStart.bind(this),\n      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),\n      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),\n      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),\n      pushByteString: this.pushByteString.bind(this),\n      pushByteStringStart: this.pushByteStringStart.bind(this),\n      pushUtf8String: this.pushUtf8String.bind(this),\n      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),\n      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),\n      pushTagUnassigned: this.pushTagUnassigned.bind(this),\n      pushTagStart: this.pushTagStart.bind(this),\n      pushTagStart4: this.pushTagStart4.bind(this),\n      pushTagStart8: this.pushTagStart8.bind(this),\n      pushBreak: this.pushBreak.bind(this)\n    }, this._heap)\n  }\n\n  get _depth () {\n    return this._parents.length\n  }\n\n  get _currentParent () {\n    return this._parents[this._depth - 1]\n  }\n\n  get _ref () {\n    return this._currentParent.ref\n  }\n\n  // Finish the current parent\n  _closeParent () {\n    var p = this._parents.pop()\n\n    if (p.length > 0) {\n      throw new Error(`Missing ${p.length} elements`)\n    }\n\n    switch (p.type) {\n      case c.PARENT.TAG:\n        this._push(\n          this.createTag(p.ref[0], p.ref[1])\n        )\n        break\n      case c.PARENT.BYTE_STRING:\n        this._push(this.createByteString(p.ref, p.length))\n        break\n      case c.PARENT.UTF8_STRING:\n        this._push(this.createUtf8String(p.ref, p.length))\n        break\n      case c.PARENT.MAP:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createMap(p.ref, p.length))\n        break\n      case c.PARENT.OBJECT:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createObject(p.ref, p.length))\n        break\n      case c.PARENT.ARRAY:\n        this._push(this.createArray(p.ref, p.length))\n        break\n      default:\n        break\n    }\n\n    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {\n      this._dec()\n    }\n  }\n\n  // Reduce the expected length of the current parent by one\n  _dec () {\n    const p = this._currentParent\n    // The current parent does not know the epxected child length\n\n    if (p.length < 0) {\n      return\n    }\n\n    p.length--\n\n    // All children were seen, we can close the current parent\n    if (p.length === 0) {\n      this._closeParent()\n    }\n  }\n\n  // Push any value to the current parent\n  _push (val, hasChildren) {\n    const p = this._currentParent\n    p.values++\n\n    switch (p.type) {\n      case c.PARENT.ARRAY:\n      case c.PARENT.BYTE_STRING:\n      case c.PARENT.UTF8_STRING:\n        if (p.length > -1) {\n          this._ref[this._ref.length - p.length] = val\n        } else {\n          this._ref.push(val)\n        }\n        this._dec()\n        break\n      case c.PARENT.OBJECT:\n        if (p.tmpKey != null) {\n          this._ref[p.tmpKey] = val\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n\n          if (typeof p.tmpKey !== 'string') {\n            // too bad, convert to a Map\n            p.type = c.PARENT.MAP\n            p.ref = utils.buildMap(p.ref)\n          }\n        }\n        break\n      case c.PARENT.MAP:\n        if (p.tmpKey != null) {\n          this._ref.set(p.tmpKey, val)\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n        }\n        break\n      case c.PARENT.TAG:\n        this._ref.push(val)\n        if (!hasChildren) {\n          this._dec()\n        }\n        break\n      default:\n        throw new Error('Unknown parent type')\n    }\n  }\n\n  // Create a new parent in the parents list\n  _createParent (obj, type, len) {\n    this._parents[this._depth] = {\n      type: type,\n      length: len,\n      ref: obj,\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  // Reset all state back to the beginning, also used for initiatlization\n  _reset () {\n    this._res = []\n    this._parents = [{\n      type: c.PARENT.ARRAY,\n      length: -1,\n      ref: this._res,\n      values: 0,\n      tmpKey: null\n    }]\n  }\n\n  // -- Interface to customize deoding behaviour\n  createTag (tagNumber, value) {\n    const typ = this._knownTags[tagNumber]\n\n    if (!typ) {\n      return new Tagged(tagNumber, value)\n    }\n\n    return typ(value)\n  }\n\n  createMap (obj, len) {\n    return obj\n  }\n\n  createObject (obj, len) {\n    return obj\n  }\n\n  createArray (arr, len) {\n    return arr\n  }\n\n  createByteString (raw, len) {\n    return Buffer.concat(raw)\n  }\n\n  createByteStringFromHeap (start, end) {\n    if (start === end) {\n      return Buffer.alloc(0)\n    }\n\n    return Buffer.from(this._heap.slice(start, end))\n  }\n\n  createInt (val) {\n    return val\n  }\n\n  createInt32 (f, g) {\n    return utils.buildInt32(f, g)\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return utils.buildInt64(f1, f2, g1, g2)\n  }\n\n  createFloat (val) {\n    return val\n  }\n\n  createFloatSingle (a, b, c, d) {\n    return ieee754.read([a, b, c, d], 0, false, 23, 4)\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8)\n  }\n\n  createInt32Neg (f, g) {\n    return -1 - utils.buildInt32(f, g)\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    const f = utils.buildInt32(f1, f2)\n    const g = utils.buildInt32(g1, g2)\n\n    if (f > c.MAX_SAFE_HIGH) {\n      return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g))\n    }\n\n    return -1 - ((f * c.SHIFT32) + g)\n  }\n\n  createTrue () {\n    return true\n  }\n\n  createFalse () {\n    return false\n  }\n\n  createNull () {\n    return null\n  }\n\n  createUndefined () {\n    return void 0\n  }\n\n  createInfinity () {\n    return Infinity\n  }\n\n  createInfinityNeg () {\n    return -Infinity\n  }\n\n  createNaN () {\n    return NaN\n  }\n\n  createNaNNeg () {\n    return -NaN\n  }\n\n  createUtf8String (raw, len) {\n    return raw.join('')\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    if (start === end) {\n      return ''\n    }\n\n    return this._buffer.toString('utf8', start, end)\n  }\n\n  createSimpleUnassigned (val) {\n    return new Simple(val)\n  }\n\n  // -- Interface for decoder.asm.js\n\n  pushInt (val) {\n    this._push(this.createInt(val))\n  }\n\n  pushInt32 (f, g) {\n    this._push(this.createInt32(f, g))\n  }\n\n  pushInt64 (f1, f2, g1, g2) {\n    this._push(this.createInt64(f1, f2, g1, g2))\n  }\n\n  pushFloat (val) {\n    this._push(this.createFloat(val))\n  }\n\n  pushFloatSingle (a, b, c, d) {\n    this._push(this.createFloatSingle(a, b, c, d))\n  }\n\n  pushFloatDouble (a, b, c, d, e, f, g, h) {\n    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h))\n  }\n\n  pushInt32Neg (f, g) {\n    this._push(this.createInt32Neg(f, g))\n  }\n\n  pushInt64Neg (f1, f2, g1, g2) {\n    this._push(this.createInt64Neg(f1, f2, g1, g2))\n  }\n\n  pushTrue () {\n    this._push(this.createTrue())\n  }\n\n  pushFalse () {\n    this._push(this.createFalse())\n  }\n\n  pushNull () {\n    this._push(this.createNull())\n  }\n\n  pushUndefined () {\n    this._push(this.createUndefined())\n  }\n\n  pushInfinity () {\n    this._push(this.createInfinity())\n  }\n\n  pushInfinityNeg () {\n    this._push(this.createInfinityNeg())\n  }\n\n  pushNaN () {\n    this._push(this.createNaN())\n  }\n\n  pushNaNNeg () {\n    this._push(this.createNaNNeg())\n  }\n\n  pushArrayStart () {\n    this._createParent([], c.PARENT.ARRAY, -1)\n  }\n\n  pushArrayStartFixed (len) {\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createArrayStartFixed(len)\n  }\n\n  pushObjectStart () {\n    this._createObjectStartFixed(-1)\n  }\n\n  pushObjectStartFixed (len) {\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createObjectStartFixed(len)\n  }\n\n  pushByteStringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.BYTE_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushByteString (start, end) {\n    this._push(this.createByteStringFromHeap(start, end))\n  }\n\n  pushUtf8StringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.UTF8_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushUtf8String (start, end) {\n    this._push(this.createUtf8StringFromHeap(start, end))\n  }\n\n  pushSimpleUnassigned (val) {\n    this._push(this.createSimpleUnassigned(val))\n  }\n\n  pushTagStart (tag) {\n    this._parents[this._depth] = {\n      type: c.PARENT.TAG,\n      length: 1,\n      ref: [tag]\n    }\n  }\n\n  pushTagStart4 (f, g) {\n    this.pushTagStart(utils.buildInt32(f, g))\n  }\n\n  pushTagStart8 (f1, f2, g1, g2) {\n    this.pushTagStart(utils.buildInt64(f1, f2, g1, g2))\n  }\n\n  pushTagUnassigned (tagNumber) {\n    this._push(this.createTag(tagNumber))\n  }\n\n  pushBreak () {\n    if (this._currentParent.length > -1) {\n      throw new Error('Unexpected break')\n    }\n\n    this._closeParent()\n  }\n\n  _createObjectStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createObject({}))\n      return\n    }\n\n    this._createParent({}, c.PARENT.OBJECT, len)\n  }\n\n  _createArrayStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createArray([]))\n      return\n    }\n\n    this._createParent(new Array(len), c.PARENT.ARRAY, len)\n  }\n\n  _decode (input) {\n    if (input.byteLength === 0) {\n      throw new Error('Input too short')\n    }\n\n    this._reset()\n    this._heap8.set(input)\n    const code = this.parser.parse(input.byteLength)\n\n    if (this._depth > 1) {\n      while (this._currentParent.length === 0) {\n        this._closeParent()\n      }\n      if (this._depth > 1) {\n        throw new Error('Undeterminated nesting')\n      }\n    }\n\n    if (code > 0) {\n      throw new Error('Failed to parse')\n    }\n\n    if (this._res.length === 0) {\n      throw new Error('No valid result')\n    }\n  }\n\n  // -- Public Interface\n\n  decodeFirst (input) {\n    this._decode(input)\n\n    return this._res[0]\n  }\n\n  decodeAll (input) {\n    this._decode(input)\n\n    return this._res\n  }\n\n  /**\n   * Decode the first cbor object.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {*}\n   */\n  static decode (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeFirst(input)\n  }\n\n  /**\n   * Decode all cbor objects.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {Array<*>}\n   */\n  static decodeAll (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeAll(input)\n  }\n}\n\nDecoder.decodeFirst = Decoder.decode\n\nmodule.exports = Decoder\n","'use strict'\n\nconst constants = require('./constants')\nconst MT = constants.MT\nconst SIMPLE = constants.SIMPLE\nconst SYMS = constants.SYMS\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor (value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + (typeof value))\n    }\n    if ((value < 0) || (value > 255) || ((value | 0) !== value)) {\n      throw new Error('value must be a small positive integer: ' + value)\n    }\n    this.value = value\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  inspect () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n  static isSimple (obj) {\n    return obj instanceof Simple\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} hasParent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n  static decode (val, hasParent) {\n    if (hasParent == null) {\n      hasParent = true\n    }\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false\n      case SIMPLE.TRUE:\n        return true\n      case SIMPLE.NULL:\n        if (hasParent) {\n          return null\n        } else {\n          return SYMS.NULL\n        }\n      case SIMPLE.UNDEFINED:\n        if (hasParent) {\n          return void 0\n        } else {\n          return SYMS.UNDEFINED\n        }\n      case -1:\n        if (!hasParent) {\n          throw new Error('Invalid BREAK')\n        }\n        return SYMS.BREAK\n      default:\n        return new Simple(val)\n    }\n  }\n}\n\nmodule.exports = Simple\n","'use strict'\n\n/**\n * A CBOR tagged item, where the tag does not have semantics specified at the\n * moment, or those semantics threw an error during parsing. Typically this will\n * be an extension point you're not yet expecting.\n */\nclass Tagged {\n  /**\n   * Creates an instance of Tagged.\n   *\n   * @param {Number} tag - the number of the tag\n   * @param {any} value - the value inside the tag\n   * @param {Error} err - the error that was thrown parsing the tag, or null\n   */\n  constructor (tag, value, err) {\n    this.tag = tag\n    this.value = value\n    this.err = err\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + (typeof this.tag) + ')')\n    }\n    if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {\n      throw new Error('Tag must be a positive integer: ' + this.tag)\n    }\n  }\n\n  /**\n   * Convert to a String\n   *\n   * @returns {String} string of the form '1(2)'\n   */\n  toString () {\n    return `${this.tag}(${JSON.stringify(this.value)})`\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    gen._pushTag(this.tag)\n    return gen.pushAny(this.value)\n  }\n\n  /**\n   * If we have a converter for this type, do the conversion.  Some converters\n   * are built-in.  Additional ones can be passed in.  If you want to remove\n   * a built-in converter, pass a converter in whose value is 'null' instead\n   * of a function.\n   *\n   * @param {Object} converters - keys in the object are a tag number, the value\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\n   *   of the appropriate type.  Throw an exception in the function on errors.\n   * @returns {any} - the converted item\n   */\n  convert (converters) {\n    var er, f\n    f = converters != null ? converters[this.tag] : void 0\n    if (typeof f !== 'function') {\n      f = Tagged['_tag' + this.tag]\n      if (typeof f !== 'function') {\n        return this\n      }\n    }\n    try {\n      return f.call(Tagged, this.value)\n    } catch (error) {\n      er = error\n      this.err = er\n      return this\n    }\n  }\n}\n\nmodule.exports = Tagged\n","'use strict';\n\nvar _require = require('./src/url'),\n    URLWithLegacySupport = _require.URLWithLegacySupport,\n    format = _require.format,\n    URLSearchParams = _require.URLSearchParams,\n    defaultBase = _require.defaultBase;\n\nvar relative = require('./src/relative');\n\nmodule.exports = {\n  URL: URLWithLegacySupport,\n  URLSearchParams: URLSearchParams,\n  format: format,\n  relative: relative,\n  defaultBase: defaultBase\n};","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar defaultBase = self.location ? self.location.protocol + '//' + self.location.host : '';\nvar URL = self.URL;\n\nvar URLWithLegacySupport =\n/*#__PURE__*/\nfunction (_URL) {\n  _inherits(URLWithLegacySupport, _URL);\n\n  function URLWithLegacySupport(url) {\n    var _this;\n\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultBase;\n\n    _classCallCheck(this, URLWithLegacySupport);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(URLWithLegacySupport).call(this, url, base));\n    _this.path = _this.pathname + _this.search;\n    _this.auth = _this.username && _this.password ? _this.username + ':' + _this.password : null;\n    _this.query = _this.search && _this.search.startsWith('?') ? _this.search.slice(1) : null;\n    return _this;\n  }\n\n  _createClass(URLWithLegacySupport, [{\n    key: \"format\",\n    value: function format() {\n      return this.toString();\n    }\n  }]);\n\n  return URLWithLegacySupport;\n}(URL);\n\nfunction format(obj) {\n  if (typeof obj === 'string') {\n    var url = new URL(obj);\n    return url.toString();\n  }\n\n  if (!(obj instanceof URL)) {\n    var auth = obj.username ? \"\".concat(obj.username, \":\").concat(obj.password, \"@\") : obj.auth + '@' || '';\n    var port = obj.port ? ':' + obj.port : '';\n    var protocol = obj.protocol ? obj.protocol + '//' : '';\n    var host = obj.host || '';\n    var hostname = obj.hostname || '';\n    var search = obj.search || (obj.query ? '?' + obj.query : '');\n    var hash = obj.hash || '';\n    var pathname = obj.pathname || '';\n    var path = obj.path || pathname + search;\n    return \"\".concat(protocol).concat(auth).concat(host || hostname + port).concat(path).concat(hash);\n  }\n}\n\nmodule.exports = {\n  URLWithLegacySupport: URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase: defaultBase,\n  format: format\n};","'use strict'\n\n// exports.Commented = require('./commented')\nexports.Diagnose = require('./diagnose')\nexports.Decoder = require('./decoder')\nexports.Encoder = require('./encoder')\nexports.Simple = require('./simple')\nexports.Tagged = require('./tagged')\n\n// exports.comment = exports.Commented.comment\nexports.decodeAll = exports.Decoder.decodeAll\nexports.decodeFirst = exports.Decoder.decodeFirst\nexports.diagnose = exports.Diagnose.diagnose\nexports.encode = exports.Encoder.encode\nexports.decode = exports.Decoder.decode\n\nexports.leveldb = {\n  decode: exports.Decoder.decodeAll,\n  encode: exports.Encoder.encode,\n  buffer: true,\n  name: 'cbor'\n}\n","'use strict'\n\nconst Decoder = require('./decoder')\nconst utils = require('./utils')\n\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\nclass Diagnose extends Decoder {\n  createTag (tagNumber, value) {\n    return `${tagNumber}(${value})`\n  }\n\n  createInt (val) {\n    return super.createInt(val).toString()\n  }\n\n  createInt32 (f, g) {\n    return super.createInt32(f, g).toString()\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return super.createInt64(f1, f2, g1, g2).toString()\n  }\n\n  createInt32Neg (f, g) {\n    return super.createInt32Neg(f, g).toString()\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    return super.createInt64Neg(f1, f2, g1, g2).toString()\n  }\n\n  createTrue () {\n    return 'true'\n  }\n\n  createFalse () {\n    return 'false'\n  }\n\n  createFloat (val) {\n    const fl = super.createFloat(val)\n    if (utils.isNegativeZero(val)) {\n      return '-0_1'\n    }\n\n    return `${fl}_1`\n  }\n\n  createFloatSingle (a, b, c, d) {\n    const fl = super.createFloatSingle(a, b, c, d)\n    return `${fl}_2`\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h)\n    return `${fl}_3`\n  }\n\n  createByteString (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n    return `h'${val}`\n  }\n\n  createByteStringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createByteStringFromHeap(start, end)\n    )).toString('hex')\n\n    return `h'${val}'`\n  }\n\n  createInfinity () {\n    return 'Infinity_1'\n  }\n\n  createInfinityNeg () {\n    return '-Infinity_1'\n  }\n\n  createNaN () {\n    return 'NaN_1'\n  }\n\n  createNaNNeg () {\n    return '-NaN_1'\n  }\n\n  createNull () {\n    return 'null'\n  }\n\n  createUndefined () {\n    return 'undefined'\n  }\n\n  createSimpleUnassigned (val) {\n    return `simple(${val})`\n  }\n\n  createArray (arr, len) {\n    const val = super.createArray(arr, len)\n\n    if (len === -1) {\n      // indefinite\n      return `[_ ${val.join(', ')}]`\n    }\n\n    return `[${val.join(', ')}]`\n  }\n\n  createMap (map, len) {\n    const val = super.createMap(map)\n    const list = Array.from(val.keys())\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${list}}`\n    }\n\n    return `{${list}}`\n  }\n\n  createObject (obj, len) {\n    const val = super.createObject(obj)\n    const map = Object.keys(val)\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${map}}`\n    }\n\n    return `{${map}}`\n  }\n\n  createUtf8String (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n\n    return `\"${val}\"`\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createUtf8StringFromHeap(start, end)\n    )).toString('utf8')\n\n    return `\"${val}\"`\n  }\n\n  static diagnose (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Diagnose()\n    return dec.decodeFirst(input)\n  }\n}\n\nmodule.exports = Diagnose\n\nfunction collectObject (val) {\n  return (acc, key) => {\n    if (acc) {\n      return `${acc}, ${key}: ${val[key]}`\n    }\n    return `${key}: ${val[key]}`\n  }\n}\n","'use strict';\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n} // Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\n\n\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction getLens(b64) {\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  } // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n\n\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n} // base64 is 4/3 + up to two characters of the original data\n\n\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars\n\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n\n  for (var i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  return arr;\n}\n\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n\n  return output.join('');\n}\n\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n  // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n\n  return parts.join('');\n}","\"use strict\";\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};","module.exports = function decodeAsm (stdlib, foreign, buffer) {\n  'use asm'\n\n  // -- Imports\n\n  var heap = new stdlib.Uint8Array(buffer)\n  // var log = foreign.log\n  var pushInt = foreign.pushInt\n  var pushInt32 = foreign.pushInt32\n  var pushInt32Neg = foreign.pushInt32Neg\n  var pushInt64 = foreign.pushInt64\n  var pushInt64Neg = foreign.pushInt64Neg\n  var pushFloat = foreign.pushFloat\n  var pushFloatSingle = foreign.pushFloatSingle\n  var pushFloatDouble = foreign.pushFloatDouble\n  var pushTrue = foreign.pushTrue\n  var pushFalse = foreign.pushFalse\n  var pushUndefined = foreign.pushUndefined\n  var pushNull = foreign.pushNull\n  var pushInfinity = foreign.pushInfinity\n  var pushInfinityNeg = foreign.pushInfinityNeg\n  var pushNaN = foreign.pushNaN\n  var pushNaNNeg = foreign.pushNaNNeg\n\n  var pushArrayStart = foreign.pushArrayStart\n  var pushArrayStartFixed = foreign.pushArrayStartFixed\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64\n  var pushObjectStart = foreign.pushObjectStart\n  var pushObjectStartFixed = foreign.pushObjectStartFixed\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64\n\n  var pushByteString = foreign.pushByteString\n  var pushByteStringStart = foreign.pushByteStringStart\n  var pushUtf8String = foreign.pushUtf8String\n  var pushUtf8StringStart = foreign.pushUtf8StringStart\n\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned\n\n  var pushTagStart = foreign.pushTagStart\n  var pushTagStart4 = foreign.pushTagStart4\n  var pushTagStart8 = foreign.pushTagStart8\n  var pushTagUnassigned = foreign.pushTagUnassigned\n\n  var pushBreak = foreign.pushBreak\n\n  var pow = stdlib.Math.pow\n\n  // -- Constants\n\n\n  // -- Mutable Variables\n\n  var offset = 0\n  var inputLength = 0\n  var code = 0\n\n  // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n  function parse (input) {\n    input = input | 0\n\n    offset = 0\n    inputLength = input\n\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0\n\n      if ((code | 0) > 0) {\n        break\n      }\n    }\n\n    return code | 0\n  }\n\n  // -- Helper Function\n\n  function checkOffset (n) {\n    n = n | 0\n\n    if ((((offset | 0) + (n | 0)) | 0) < (inputLength | 0)) {\n      return 0\n    }\n\n    return 1\n  }\n\n  function readUInt16 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 8) | heap[(n + 1) | 0]\n    ) | 0\n  }\n\n  function readUInt32 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 24) | (heap[(n + 1) | 0] << 16) | (heap[(n + 2) | 0] << 8) | heap[(n + 3) | 0]\n    ) | 0\n  }\n\n  // -- Initial Byte Handlers\n\n  function INT_P (octet) {\n    octet = octet | 0\n\n    pushInt(octet | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_P_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_P_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushInt(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_P_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_P_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function INT_N (octet) {\n    octet = octet | 0\n\n    pushInt((-1 - ((octet - 32) | 0)) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_N_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(\n      (-1 - (heap[(offset + 1) | 0] | 0)) | 0\n    )\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_N_16 (octet) {\n    octet = octet | 0\n\n    var val = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    val = readUInt16((offset + 1) | 0) | 0\n    pushInt((-1 - (val | 0)) | 0)\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_N_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_N_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function BYTE_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 64) | 0\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BYTE_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushByteStringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UTF8_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 96) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function UTF8_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushUtf8StringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY (octet) {\n    octet = octet | 0\n\n    pushArrayStartFixed((octet - 128) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function ARRAY_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function ARRAY_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function ARRAY_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ARRAY_BREAK (octet) {\n    octet = octet | 0\n\n    pushArrayStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP (octet) {\n    octet = octet | 0\n\n    var step = 0\n\n    step = (octet - 160) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(step | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function MAP_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function MAP_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function MAP_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function MAP_BREAK (octet) {\n    octet = octet | 0\n\n    pushObjectStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function TAG_KNOWN (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_POS (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_NEG (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_FRAC (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_FLOAT (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64_URL (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE16 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_1 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushTagStart(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_2 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushTagStart(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_4 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushTagStart4(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushTagStart8(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9 | 0)\n\n    return 0\n  }\n\n  function SIMPLE_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushSimpleUnassigned(((octet | 0) - 224) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FALSE (octet) {\n    octet = octet | 0\n\n    pushFalse()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_TRUE (octet) {\n    octet = octet | 0\n\n    pushTrue()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_NULL (octet) {\n    octet = octet | 0\n\n    pushNull()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_UNDEFINED (octet) {\n    octet = octet | 0\n\n    pushUndefined()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_BYTE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushSimpleUnassigned(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2)  | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_HALF (octet) {\n    octet = octet | 0\n\n    var f = 0\n    var g = 0\n    var sign = 1.0\n    var exp = 0.0\n    var mant = 0.0\n    var r = 0.0\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    f = heap[(offset + 1) | 0] | 0\n    g = heap[(offset + 2) | 0] | 0\n\n    if ((f | 0) & 0x80) {\n      sign = -1.0\n    }\n\n    exp = +(((f | 0) & 0x7C) >> 2)\n    mant = +((((f | 0) & 0x03) << 8) | g)\n\n    if (+exp == 0.0) {\n      pushFloat(+(\n        (+sign) * +5.9604644775390625e-8 * (+mant)\n      ))\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN()\n        } else {\n          pushInfinity()\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg()\n        } else {\n          pushInfinityNeg()\n        }\n      }\n    } else {\n      pushFloat(+(\n        +sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)\n      ))\n    }\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_SINGLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushFloatSingle(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_DOUBLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushFloatDouble(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0,\n      heap[(offset + 5) | 0] | 0,\n      heap[(offset + 6) | 0] | 0,\n      heap[(offset + 7) | 0] | 0,\n      heap[(offset + 8) | 0] | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ERROR (octet) {\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BREAK (octet) {\n    octet = octet | 0\n\n    pushBreak()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  // -- Jump Table\n\n  var jumpTable = [\n    // Integer 0x00..0x17 (0..23)\n    INT_P, // 0x00\n    INT_P, // 0x01\n    INT_P, // 0x02\n    INT_P, // 0x03\n    INT_P, // 0x04\n    INT_P, // 0x05\n    INT_P, // 0x06\n    INT_P, // 0x07\n    INT_P, // 0x08\n    INT_P, // 0x09\n    INT_P, // 0x0A\n    INT_P, // 0x0B\n    INT_P, // 0x0C\n    INT_P, // 0x0D\n    INT_P, // 0x0E\n    INT_P, // 0x0F\n    INT_P, // 0x10\n    INT_P, // 0x11\n    INT_P, // 0x12\n    INT_P, // 0x13\n    INT_P, // 0x14\n    INT_P, // 0x15\n    INT_P, // 0x16\n    INT_P, // 0x17\n    // Unsigned integer (one-byte uint8_t follows)\n    UINT_P_8, // 0x18\n    // Unsigned integer (two-byte uint16_t follows)\n    UINT_P_16, // 0x19\n    // Unsigned integer (four-byte uint32_t follows)\n    UINT_P_32, // 0x1a\n    // Unsigned integer (eight-byte uint64_t follows)\n    UINT_P_64, // 0x1b\n    ERROR, // 0x1c\n    ERROR, // 0x1d\n    ERROR, // 0x1e\n    ERROR, // 0x1f\n    // Negative integer -1-0x00..-1-0x17 (-1..-24)\n    INT_N, // 0x20\n    INT_N, // 0x21\n    INT_N, // 0x22\n    INT_N, // 0x23\n    INT_N, // 0x24\n    INT_N, // 0x25\n    INT_N, // 0x26\n    INT_N, // 0x27\n    INT_N, // 0x28\n    INT_N, // 0x29\n    INT_N, // 0x2A\n    INT_N, // 0x2B\n    INT_N, // 0x2C\n    INT_N, // 0x2D\n    INT_N, // 0x2E\n    INT_N, // 0x2F\n    INT_N, // 0x30\n    INT_N, // 0x31\n    INT_N, // 0x32\n    INT_N, // 0x33\n    INT_N, // 0x34\n    INT_N, // 0x35\n    INT_N, // 0x36\n    INT_N, // 0x37\n    // Negative integer -1-n (one-byte uint8_t for n follows)\n    UINT_N_8, // 0x38\n    // Negative integer -1-n (two-byte uint16_t for n follows)\n    UINT_N_16, // 0x39\n    // Negative integer -1-n (four-byte uint32_t for nfollows)\n    UINT_N_32, // 0x3a\n    // Negative integer -1-n (eight-byte uint64_t for n follows)\n    UINT_N_64, // 0x3b\n    ERROR, // 0x3c\n    ERROR, // 0x3d\n    ERROR, // 0x3e\n    ERROR, // 0x3f\n    // byte string (0x00..0x17 bytes follow)\n    BYTE_STRING, // 0x40\n    BYTE_STRING, // 0x41\n    BYTE_STRING, // 0x42\n    BYTE_STRING, // 0x43\n    BYTE_STRING, // 0x44\n    BYTE_STRING, // 0x45\n    BYTE_STRING, // 0x46\n    BYTE_STRING, // 0x47\n    BYTE_STRING, // 0x48\n    BYTE_STRING, // 0x49\n    BYTE_STRING, // 0x4A\n    BYTE_STRING, // 0x4B\n    BYTE_STRING, // 0x4C\n    BYTE_STRING, // 0x4D\n    BYTE_STRING, // 0x4E\n    BYTE_STRING, // 0x4F\n    BYTE_STRING, // 0x50\n    BYTE_STRING, // 0x51\n    BYTE_STRING, // 0x52\n    BYTE_STRING, // 0x53\n    BYTE_STRING, // 0x54\n    BYTE_STRING, // 0x55\n    BYTE_STRING, // 0x56\n    BYTE_STRING, // 0x57\n    // byte string (one-byte uint8_t for n, and then n bytes follow)\n    BYTE_STRING_8, // 0x58\n    // byte string (two-byte uint16_t for n, and then n bytes follow)\n    BYTE_STRING_16, // 0x59\n    // byte string (four-byte uint32_t for n, and then n bytes follow)\n    BYTE_STRING_32, // 0x5a\n    // byte string (eight-byte uint64_t for n, and then n bytes follow)\n    BYTE_STRING_64, // 0x5b\n    ERROR, // 0x5c\n    ERROR, // 0x5d\n    ERROR, // 0x5e\n    // byte string, byte strings follow, terminated by \"break\"\n    BYTE_STRING_BREAK, // 0x5f\n    // UTF-8 string (0x00..0x17 bytes follow)\n    UTF8_STRING, // 0x60\n    UTF8_STRING, // 0x61\n    UTF8_STRING, // 0x62\n    UTF8_STRING, // 0x63\n    UTF8_STRING, // 0x64\n    UTF8_STRING, // 0x65\n    UTF8_STRING, // 0x66\n    UTF8_STRING, // 0x67\n    UTF8_STRING, // 0x68\n    UTF8_STRING, // 0x69\n    UTF8_STRING, // 0x6A\n    UTF8_STRING, // 0x6B\n    UTF8_STRING, // 0x6C\n    UTF8_STRING, // 0x6D\n    UTF8_STRING, // 0x6E\n    UTF8_STRING, // 0x6F\n    UTF8_STRING, // 0x70\n    UTF8_STRING, // 0x71\n    UTF8_STRING, // 0x72\n    UTF8_STRING, // 0x73\n    UTF8_STRING, // 0x74\n    UTF8_STRING, // 0x75\n    UTF8_STRING, // 0x76\n    UTF8_STRING, // 0x77\n    // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n    UTF8_STRING_8, // 0x78\n    // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n    UTF8_STRING_16, // 0x79\n    // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n    UTF8_STRING_32, // 0x7a\n    // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n    UTF8_STRING_64, // 0x7b\n    // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n    ERROR, // 0x7c\n    ERROR, // 0x7d\n    ERROR, // 0x7e\n    UTF8_STRING_BREAK, // 0x7f\n    // array (0x00..0x17 data items follow)\n    ARRAY, // 0x80\n    ARRAY, // 0x81\n    ARRAY, // 0x82\n    ARRAY, // 0x83\n    ARRAY, // 0x84\n    ARRAY, // 0x85\n    ARRAY, // 0x86\n    ARRAY, // 0x87\n    ARRAY, // 0x88\n    ARRAY, // 0x89\n    ARRAY, // 0x8A\n    ARRAY, // 0x8B\n    ARRAY, // 0x8C\n    ARRAY, // 0x8D\n    ARRAY, // 0x8E\n    ARRAY, // 0x8F\n    ARRAY, // 0x90\n    ARRAY, // 0x91\n    ARRAY, // 0x92\n    ARRAY, // 0x93\n    ARRAY, // 0x94\n    ARRAY, // 0x95\n    ARRAY, // 0x96\n    ARRAY, // 0x97\n    // array (one-byte uint8_t fo, and then n data items follow)\n    ARRAY_8, // 0x98\n    // array (two-byte uint16_t for n, and then n data items follow)\n    ARRAY_16, // 0x99\n    // array (four-byte uint32_t for n, and then n data items follow)\n    ARRAY_32, // 0x9a\n    // array (eight-byte uint64_t for n, and then n data items follow)\n    ARRAY_64, // 0x9b\n    // array, data items follow, terminated by \"break\"\n    ERROR, // 0x9c\n    ERROR, // 0x9d\n    ERROR, // 0x9e\n    ARRAY_BREAK, // 0x9f\n    // map (0x00..0x17 pairs of data items follow)\n    MAP, // 0xa0\n    MAP, // 0xa1\n    MAP, // 0xa2\n    MAP, // 0xa3\n    MAP, // 0xa4\n    MAP, // 0xa5\n    MAP, // 0xa6\n    MAP, // 0xa7\n    MAP, // 0xa8\n    MAP, // 0xa9\n    MAP, // 0xaA\n    MAP, // 0xaB\n    MAP, // 0xaC\n    MAP, // 0xaD\n    MAP, // 0xaE\n    MAP, // 0xaF\n    MAP, // 0xb0\n    MAP, // 0xb1\n    MAP, // 0xb2\n    MAP, // 0xb3\n    MAP, // 0xb4\n    MAP, // 0xb5\n    MAP, // 0xb6\n    MAP, // 0xb7\n    // map (one-byte uint8_t for n, and then n pairs of data items follow)\n    MAP_8, // 0xb8\n    // map (two-byte uint16_t for n, and then n pairs of data items follow)\n    MAP_16, // 0xb9\n    // map (four-byte uint32_t for n, and then n pairs of data items follow)\n    MAP_32, // 0xba\n    // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n    MAP_64, // 0xbb\n    ERROR, // 0xbc\n    ERROR, // 0xbd\n    ERROR, // 0xbe\n    // map, pairs of data items follow, terminated by \"break\"\n    MAP_BREAK, // 0xbf\n    // Text-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc0\n    // Epoch-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc1\n    // Positive bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc2\n    // Negative bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc3\n    // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc4\n    // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc5\n    // (tagged item)\n    TAG_UNASSIGNED, // 0xc6\n    TAG_UNASSIGNED, // 0xc7\n    TAG_UNASSIGNED, // 0xc8\n    TAG_UNASSIGNED, // 0xc9\n    TAG_UNASSIGNED, // 0xca\n    TAG_UNASSIGNED, // 0xcb\n    TAG_UNASSIGNED, // 0xcc\n    TAG_UNASSIGNED, // 0xcd\n    TAG_UNASSIGNED, // 0xce\n    TAG_UNASSIGNED, // 0xcf\n    TAG_UNASSIGNED, // 0xd0\n    TAG_UNASSIGNED, // 0xd1\n    TAG_UNASSIGNED, // 0xd2\n    TAG_UNASSIGNED, // 0xd3\n    TAG_UNASSIGNED, // 0xd4\n    // Expected Conversion (data item follows; see Section 2.4.4.2)\n    TAG_UNASSIGNED, // 0xd5\n    TAG_UNASSIGNED, // 0xd6\n    TAG_UNASSIGNED, // 0xd7\n    // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n    TAG_MORE_1, // 0xd8\n    TAG_MORE_2, // 0xd9\n    TAG_MORE_4, // 0xda\n    TAG_MORE_8, // 0xdb\n    ERROR, // 0xdc\n    ERROR, // 0xdd\n    ERROR, // 0xde\n    ERROR, // 0xdf\n    // (simple value)\n    SIMPLE_UNASSIGNED, // 0xe0\n    SIMPLE_UNASSIGNED, // 0xe1\n    SIMPLE_UNASSIGNED, // 0xe2\n    SIMPLE_UNASSIGNED, // 0xe3\n    SIMPLE_UNASSIGNED, // 0xe4\n    SIMPLE_UNASSIGNED, // 0xe5\n    SIMPLE_UNASSIGNED, // 0xe6\n    SIMPLE_UNASSIGNED, // 0xe7\n    SIMPLE_UNASSIGNED, // 0xe8\n    SIMPLE_UNASSIGNED, // 0xe9\n    SIMPLE_UNASSIGNED, // 0xea\n    SIMPLE_UNASSIGNED, // 0xeb\n    SIMPLE_UNASSIGNED, // 0xec\n    SIMPLE_UNASSIGNED, // 0xed\n    SIMPLE_UNASSIGNED, // 0xee\n    SIMPLE_UNASSIGNED, // 0xef\n    SIMPLE_UNASSIGNED, // 0xf0\n    SIMPLE_UNASSIGNED, // 0xf1\n    SIMPLE_UNASSIGNED, // 0xf2\n    SIMPLE_UNASSIGNED, // 0xf3\n    // False\n    SIMPLE_FALSE, // 0xf4\n    // True\n    SIMPLE_TRUE, // 0xf5\n    // Null\n    SIMPLE_NULL, // 0xf6\n    // Undefined\n    SIMPLE_UNDEFINED, // 0xf7\n    // (simple value, one byte follows)\n    SIMPLE_BYTE, // 0xf8\n    // Half-Precision Float (two-byte IEEE 754)\n    SIMPLE_FLOAT_HALF, // 0xf9\n    // Single-Precision Float (four-byte IEEE 754)\n    SIMPLE_FLOAT_SINGLE, // 0xfa\n    // Double-Precision Float (eight-byte IEEE 754)\n    SIMPLE_FLOAT_DOUBLE, // 0xfb\n    ERROR, // 0xfc\n    ERROR, // 0xfd\n    ERROR, // 0xfe\n    // \"break\" stop code\n    BREAK // 0xff\n  ]\n\n  // --\n\n  return {\n    parse: parse\n  }\n}\n","'use strict';\n\nvar _require = require('./url'),\n    URLWithLegacySupport = _require.URLWithLegacySupport,\n    format = _require.format;\n\nmodule.exports = function (url) {\n  var location = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var protocolMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var defaultProtocol = arguments.length > 3 ? arguments[3] : undefined;\n  var protocol = location.protocol ? location.protocol.replace(':', '') : 'http'; // Check protocol map\n\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';\n  var urlParsed;\n\n  try {\n    urlParsed = new URLWithLegacySupport(url);\n  } catch (err) {\n    urlParsed = {};\n  }\n\n  var base = Object.assign({}, location, {\n    protocol: protocol || urlParsed.protocol,\n    host: location.host || urlParsed.host\n  });\n  return new URLWithLegacySupport(url, format(base)).toString();\n};","'use strict'\n\nconst { URL } = require('iso-url')\nconst Bignumber = require('bignumber.js')\n\nconst utils = require('./utils')\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\n\nconst MAXINT_BN = new Bignumber('0x20000000000000')\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\n\nfunction toType (obj) {\n  // [object Type]\n  // --------8---1\n  return ({}).toString.call(obj).slice(8, -1)\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor (options) {\n    options = options || {}\n\n    this.streaming = typeof options.stream === 'function'\n    this.onData = options.stream\n\n    this.semanticTypes = [\n      [URL, this._pushUrl],\n      [Bignumber, this._pushBigNumber]\n    ]\n\n    const addTypes = options.genTypes || []\n    const len = addTypes.length\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(\n        addTypes[i][0],\n        addTypes[i][1]\n      )\n    }\n\n    this._reset()\n  }\n\n  addSemanticType (type, fun) {\n    const len = this.semanticTypes.length\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0]\n      if (typ === type) {\n        const old = this.semanticTypes[i][1]\n        this.semanticTypes[i][1] = fun\n        return old\n      }\n    }\n    this.semanticTypes.push([type, fun])\n    return null\n  }\n\n  push (val) {\n    if (!val) {\n      return true\n    }\n\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = 0\n    this.resultLength[this.offset] = val.length\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  pushWrite (val, method, len) {\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = method\n    this.resultLength[this.offset] = len\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  _pushUInt8 (val) {\n    return this.pushWrite(val, 1, 1)\n  }\n\n  _pushUInt16BE (val) {\n    return this.pushWrite(val, 2, 2)\n  }\n\n  _pushUInt32BE (val) {\n    return this.pushWrite(val, 3, 4)\n  }\n\n  _pushDoubleBE (val) {\n    return this.pushWrite(val, 4, 8)\n  }\n\n  _pushNaN () {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity (obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat (obj) {\n    const b2 = Buffer.allocUnsafe(2)\n\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n\n    const b4 = Buffer.allocUnsafe(4)\n    b4.writeFloatBE(obj, 0)\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt (obj, mt, orig) {\n    const m = mt << 5\n    if (obj < 24) {\n      return this._pushUInt8(m | obj)\n    }\n\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n    }\n\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n    }\n\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n    }\n\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n        this._pushUInt32BE(obj % SHIFT32)\n    }\n\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig)\n    }\n\n    return this._pushFloat(obj)\n  }\n\n  _pushIntNum (obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber (obj) {\n    switch (false) {\n      case (obj === obj): // eslint-disable-line\n        return this._pushNaN(obj)\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case ((obj % 1) !== 0):\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString (obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)\n  }\n\n  _pushBoolean (obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined (obj) {\n    return this._pushUInt8(UNDEFINED)\n  }\n\n  _pushArray (gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag (tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate (gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))\n  }\n\n  _pushBuffer (gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter (gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp (gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (let x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl (gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushBigint (obj) {\n    let tag = TAG.POS_BIGINT\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      tag = TAG.NEG_BIGINT\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber (gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec))\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      obj.size,\n      Array.from(obj)\n    )\n  }\n\n  _pushObject (obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL)\n    }\n\n    var len = this.semanticTypes.length\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj)\n      }\n    }\n\n    var f = obj.encodeCBOR\n    if (typeof f === 'function') {\n      return f.call(obj, this)\n    }\n\n    var keys = Object.keys(obj)\n    var keyLength = keys.length\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      keyLength,\n      keys.map((k) => [k, obj[k]])\n    )\n  }\n\n  _pushRawMap (len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0])\n      return a\n    }).sort(utils.keySorter)\n\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false\n      }\n\n      if (!this.pushAny(map[j][1])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write (obj) {\n    return this.pushAny(obj)\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny (obj) {\n    var typ = toType(obj)\n\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj)\n      case 'String':\n        return this._pushString(obj)\n      case 'Boolean':\n        return this._pushBoolean(obj)\n      case 'Object':\n        return this._pushObject(obj)\n      case 'Array':\n        return this._pushArray(this, obj)\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj))\n      case 'Null':\n        return this._pushUInt8(NULL)\n      case 'Undefined':\n        return this._pushUndefined(obj)\n      case 'Map':\n        return this._pushMap(this, obj)\n      case 'Set':\n        return this._pushSet(this, obj)\n      case 'URL':\n        return this._pushUrl(this, obj)\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj)\n      case 'Date':\n        return this._pushDate(this, obj)\n      case 'RegExp':\n        return this._pushRegexp(this, obj)\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(void 0)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))\n    }\n  }\n\n  finalize () {\n    if (this.offset === 0) {\n      return null\n    }\n\n    var result = this.result\n    var resultLength = this.resultLength\n    var resultMethod = this.resultMethod\n    var offset = this.offset\n\n    // Determine the size of the buffer\n    var size = 0\n    var i = 0\n\n    for (; i < offset; i++) {\n      size += resultLength[i]\n    }\n\n    var res = Buffer.allocUnsafe(size)\n    var index = 0\n    var length = 0\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i]\n\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index)\n          break\n        case 1:\n          res.writeUInt8(result[i], index, true)\n          break\n        case 2:\n          res.writeUInt16BE(result[i], index, true)\n          break\n        case 3:\n          res.writeUInt32BE(result[i], index, true)\n          break\n        case 4:\n          res.writeDoubleBE(result[i], index, true)\n          break\n        case 5:\n          res.write(result[i], index, length, 'utf8')\n          break\n        default:\n          throw new Error('unkown method')\n      }\n\n      index += length\n    }\n\n    var tmp = res\n\n    this._reset()\n\n    return tmp\n  }\n\n  _reset () {\n    this.result = []\n    this.resultMethod = []\n    this.resultLength = []\n    this.offset = 0\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode (o) {\n    const enc = new Encoder()\n    const ret = enc.pushAny(o)\n    if (!ret) {\n      throw new Error('Failed to encode input')\n    }\n\n    return enc.finalize()\n  }\n}\n\nmodule.exports = Encoder\n"],"sourceRoot":""}